
5250_snake.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb4  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800678c  0800678c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0001678c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006790  08006790  00016790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000070  08006804  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08006804  00020728  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3bd  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002258  00000000  00000000  0002e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  000306f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e0  00000000  00000000  000313b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161af  00000000  00000000  00031d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b29  00000000  00000000  00047f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00085001  00000000  00000000  00058a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000372c  00000000  00000000  000dda74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000040  00000000  00000000  000e11a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058b8 	.word	0x080058b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080058b8 	.word	0x080058b8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_uldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d111      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d10f      	bne.n	8000430 <__aeabi_uldivmod+0x28>
 8000410:	2900      	cmp	r1, #0
 8000412:	d100      	bne.n	8000416 <__aeabi_uldivmod+0xe>
 8000414:	2800      	cmp	r0, #0
 8000416:	d002      	beq.n	800041e <__aeabi_uldivmod+0x16>
 8000418:	2100      	movs	r1, #0
 800041a:	43c9      	mvns	r1, r1
 800041c:	0008      	movs	r0, r1
 800041e:	b407      	push	{r0, r1, r2}
 8000420:	4802      	ldr	r0, [pc, #8]	; (800042c <__aeabi_uldivmod+0x24>)
 8000422:	a102      	add	r1, pc, #8	; (adr r1, 800042c <__aeabi_uldivmod+0x24>)
 8000424:	1840      	adds	r0, r0, r1
 8000426:	9002      	str	r0, [sp, #8]
 8000428:	bd03      	pop	{r0, r1, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	ffffffd9 	.word	0xffffffd9
 8000430:	b403      	push	{r0, r1}
 8000432:	4668      	mov	r0, sp
 8000434:	b501      	push	{r0, lr}
 8000436:	9802      	ldr	r0, [sp, #8]
 8000438:	f000 f834 	bl	80004a4 <__udivmoddi4>
 800043c:	9b01      	ldr	r3, [sp, #4]
 800043e:	469e      	mov	lr, r3
 8000440:	b002      	add	sp, #8
 8000442:	bc0c      	pop	{r2, r3}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_lmul>:
 8000448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044a:	46ce      	mov	lr, r9
 800044c:	4699      	mov	r9, r3
 800044e:	0c03      	lsrs	r3, r0, #16
 8000450:	469c      	mov	ip, r3
 8000452:	0413      	lsls	r3, r2, #16
 8000454:	4647      	mov	r7, r8
 8000456:	0c1b      	lsrs	r3, r3, #16
 8000458:	001d      	movs	r5, r3
 800045a:	000e      	movs	r6, r1
 800045c:	4661      	mov	r1, ip
 800045e:	0404      	lsls	r4, r0, #16
 8000460:	0c24      	lsrs	r4, r4, #16
 8000462:	b580      	push	{r7, lr}
 8000464:	0007      	movs	r7, r0
 8000466:	0c10      	lsrs	r0, r2, #16
 8000468:	434b      	muls	r3, r1
 800046a:	4365      	muls	r5, r4
 800046c:	4341      	muls	r1, r0
 800046e:	4360      	muls	r0, r4
 8000470:	0c2c      	lsrs	r4, r5, #16
 8000472:	18c0      	adds	r0, r0, r3
 8000474:	1820      	adds	r0, r4, r0
 8000476:	468c      	mov	ip, r1
 8000478:	4283      	cmp	r3, r0
 800047a:	d903      	bls.n	8000484 <__aeabi_lmul+0x3c>
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	025b      	lsls	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	44c4      	add	ip, r8
 8000484:	4649      	mov	r1, r9
 8000486:	4379      	muls	r1, r7
 8000488:	4356      	muls	r6, r2
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	042d      	lsls	r5, r5, #16
 800048e:	0c2d      	lsrs	r5, r5, #16
 8000490:	1989      	adds	r1, r1, r6
 8000492:	4463      	add	r3, ip
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	1940      	adds	r0, r0, r5
 8000498:	18c9      	adds	r1, r1, r3
 800049a:	bcc0      	pop	{r6, r7}
 800049c:	46b9      	mov	r9, r7
 800049e:	46b0      	mov	r8, r6
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 f8d8 	bl	8000678 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 f8d3 	bl	8000678 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	d434      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004da:	469b      	mov	fp, r3
 80004dc:	4653      	mov	r3, sl
 80004de:	465a      	mov	r2, fp
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83b      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e079      	b.n	80005ea <__udivmoddi4+0x146>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e076      	b.n	80005f0 <__udivmoddi4+0x14c>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e029      	b.n	8000570 <__udivmoddi4+0xcc>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	469b      	mov	fp, r3
 8000548:	2320      	movs	r3, #32
 800054a:	1a9b      	subs	r3, r3, r2
 800054c:	4652      	mov	r2, sl
 800054e:	40da      	lsrs	r2, r3
 8000550:	4641      	mov	r1, r8
 8000552:	0013      	movs	r3, r2
 8000554:	464a      	mov	r2, r9
 8000556:	408a      	lsls	r2, r1
 8000558:	0017      	movs	r7, r2
 800055a:	4642      	mov	r2, r8
 800055c:	431f      	orrs	r7, r3
 800055e:	4653      	mov	r3, sl
 8000560:	4093      	lsls	r3, r2
 8000562:	001e      	movs	r6, r3
 8000564:	42af      	cmp	r7, r5
 8000566:	d9c3      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d0d8      	beq.n	8000528 <__udivmoddi4+0x84>
 8000576:	07fb      	lsls	r3, r7, #31
 8000578:	0872      	lsrs	r2, r6, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4646      	mov	r6, r8
 800057e:	087b      	lsrs	r3, r7, #1
 8000580:	e00e      	b.n	80005a0 <__udivmoddi4+0xfc>
 8000582:	42ab      	cmp	r3, r5
 8000584:	d101      	bne.n	800058a <__udivmoddi4+0xe6>
 8000586:	42a2      	cmp	r2, r4
 8000588:	d80c      	bhi.n	80005a4 <__udivmoddi4+0x100>
 800058a:	1aa4      	subs	r4, r4, r2
 800058c:	419d      	sbcs	r5, r3
 800058e:	2001      	movs	r0, #1
 8000590:	1924      	adds	r4, r4, r4
 8000592:	416d      	adcs	r5, r5
 8000594:	2100      	movs	r1, #0
 8000596:	3e01      	subs	r6, #1
 8000598:	1824      	adds	r4, r4, r0
 800059a:	414d      	adcs	r5, r1
 800059c:	2e00      	cmp	r6, #0
 800059e:	d006      	beq.n	80005ae <__udivmoddi4+0x10a>
 80005a0:	42ab      	cmp	r3, r5
 80005a2:	d9ee      	bls.n	8000582 <__udivmoddi4+0xde>
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1924      	adds	r4, r4, r4
 80005a8:	416d      	adcs	r5, r5
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d1f8      	bne.n	80005a0 <__udivmoddi4+0xfc>
 80005ae:	9800      	ldr	r0, [sp, #0]
 80005b0:	9901      	ldr	r1, [sp, #4]
 80005b2:	465b      	mov	r3, fp
 80005b4:	1900      	adds	r0, r0, r4
 80005b6:	4169      	adcs	r1, r5
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	db24      	blt.n	8000606 <__udivmoddi4+0x162>
 80005bc:	002b      	movs	r3, r5
 80005be:	465a      	mov	r2, fp
 80005c0:	4644      	mov	r4, r8
 80005c2:	40d3      	lsrs	r3, r2
 80005c4:	002a      	movs	r2, r5
 80005c6:	40e2      	lsrs	r2, r4
 80005c8:	001c      	movs	r4, r3
 80005ca:	465b      	mov	r3, fp
 80005cc:	0015      	movs	r5, r2
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	db2a      	blt.n	8000628 <__udivmoddi4+0x184>
 80005d2:	0026      	movs	r6, r4
 80005d4:	409e      	lsls	r6, r3
 80005d6:	0033      	movs	r3, r6
 80005d8:	0026      	movs	r6, r4
 80005da:	4647      	mov	r7, r8
 80005dc:	40be      	lsls	r6, r7
 80005de:	0032      	movs	r2, r6
 80005e0:	1a80      	subs	r0, r0, r2
 80005e2:	4199      	sbcs	r1, r3
 80005e4:	9000      	str	r0, [sp, #0]
 80005e6:	9101      	str	r1, [sp, #4]
 80005e8:	e79e      	b.n	8000528 <__udivmoddi4+0x84>
 80005ea:	42a3      	cmp	r3, r4
 80005ec:	d8bc      	bhi.n	8000568 <__udivmoddi4+0xc4>
 80005ee:	e782      	b.n	80004f6 <__udivmoddi4+0x52>
 80005f0:	4642      	mov	r2, r8
 80005f2:	2320      	movs	r3, #32
 80005f4:	2100      	movs	r1, #0
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	9100      	str	r1, [sp, #0]
 80005fc:	9201      	str	r2, [sp, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	40da      	lsrs	r2, r3
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	e785      	b.n	8000512 <__udivmoddi4+0x6e>
 8000606:	4642      	mov	r2, r8
 8000608:	2320      	movs	r3, #32
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	002a      	movs	r2, r5
 800060e:	4646      	mov	r6, r8
 8000610:	409a      	lsls	r2, r3
 8000612:	0023      	movs	r3, r4
 8000614:	40f3      	lsrs	r3, r6
 8000616:	4644      	mov	r4, r8
 8000618:	4313      	orrs	r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	40e2      	lsrs	r2, r4
 800061e:	001c      	movs	r4, r3
 8000620:	465b      	mov	r3, fp
 8000622:	0015      	movs	r5, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	dad4      	bge.n	80005d2 <__udivmoddi4+0x12e>
 8000628:	4642      	mov	r2, r8
 800062a:	002f      	movs	r7, r5
 800062c:	2320      	movs	r3, #32
 800062e:	0026      	movs	r6, r4
 8000630:	4097      	lsls	r7, r2
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	40de      	lsrs	r6, r3
 8000636:	003b      	movs	r3, r7
 8000638:	4333      	orrs	r3, r6
 800063a:	e7cd      	b.n	80005d8 <__udivmoddi4+0x134>

0800063c <__clzsi2>:
 800063c:	211c      	movs	r1, #28
 800063e:	2301      	movs	r3, #1
 8000640:	041b      	lsls	r3, r3, #16
 8000642:	4298      	cmp	r0, r3
 8000644:	d301      	bcc.n	800064a <__clzsi2+0xe>
 8000646:	0c00      	lsrs	r0, r0, #16
 8000648:	3910      	subs	r1, #16
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	4298      	cmp	r0, r3
 800064e:	d301      	bcc.n	8000654 <__clzsi2+0x18>
 8000650:	0a00      	lsrs	r0, r0, #8
 8000652:	3908      	subs	r1, #8
 8000654:	091b      	lsrs	r3, r3, #4
 8000656:	4298      	cmp	r0, r3
 8000658:	d301      	bcc.n	800065e <__clzsi2+0x22>
 800065a:	0900      	lsrs	r0, r0, #4
 800065c:	3904      	subs	r1, #4
 800065e:	a202      	add	r2, pc, #8	; (adr r2, 8000668 <__clzsi2+0x2c>)
 8000660:	5c10      	ldrb	r0, [r2, r0]
 8000662:	1840      	adds	r0, r0, r1
 8000664:	4770      	bx	lr
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	02020304 	.word	0x02020304
 800066c:	01010101 	.word	0x01010101
	...

08000678 <__clzdi2>:
 8000678:	b510      	push	{r4, lr}
 800067a:	2900      	cmp	r1, #0
 800067c:	d103      	bne.n	8000686 <__clzdi2+0xe>
 800067e:	f7ff ffdd 	bl	800063c <__clzsi2>
 8000682:	3020      	adds	r0, #32
 8000684:	e002      	b.n	800068c <__clzdi2+0x14>
 8000686:	0008      	movs	r0, r1
 8000688:	f7ff ffd8 	bl	800063c <__clzsi2>
 800068c:	bd10      	pop	{r4, pc}
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b0b4      	sub	sp, #208	; 0xd0
 8000694:	af00      	add	r7, sp, #0
  HAL_Init();
 8000696:	f001 fa1b 	bl	8001ad0 <HAL_Init>

  SystemClock_Config();
 800069a:	f000 fa23 	bl	8000ae4 <SystemClock_Config>
  MX_GPIO_Init();
 800069e:	f000 fb6f 	bl	8000d80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a2:	f000 fb3d 	bl	8000d20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80006a6:	f000 fafd 	bl	8000ca4 <MX_I2C1_Init>
  MX_ADC_Init();
 80006aa:	f000 fa89 	bl	8000bc0 <MX_ADC_Init>
  ssd1306_Init();
 80006ae:	f000 fc9d 	bl	8000fec <ssd1306_Init>
  Snake snake;
  Food food;
  initializeGame(&snake, &food);
 80006b2:	003a      	movs	r2, r7
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 f837 	bl	800072c <initializeGame>

  while (1) {
          updateGame(&snake, &food);
 80006be:	003a      	movs	r2, r7
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	0011      	movs	r1, r2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 f8a1 	bl	800080c <updateGame>
          if (checkCollision(&snake)) {
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 f927 	bl	8000920 <checkCollision>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d01b      	beq.n	800070e <main+0x7e>
              // Game over logic here
              ssd1306_Fill(Black);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fcf4 	bl	80010c4 <ssd1306_Fill>
              ssd1306_SetCursor(10, 26);
 80006dc:	211a      	movs	r1, #26
 80006de:	200a      	movs	r0, #10
 80006e0:	f000 fe5e 	bl	80013a0 <ssd1306_SetCursor>
              ssd1306_WriteString("Game Over!", Font_11x18, White);
 80006e4:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <main+0x94>)
 80006e6:	4810      	ldr	r0, [pc, #64]	; (8000728 <main+0x98>)
 80006e8:	2301      	movs	r3, #1
 80006ea:	6811      	ldr	r1, [r2, #0]
 80006ec:	6852      	ldr	r2, [r2, #4]
 80006ee:	f000 fe2d 	bl	800134c <ssd1306_WriteString>
              ssd1306_UpdateScreen();
 80006f2:	f000 fd01 	bl	80010f8 <ssd1306_UpdateScreen>
              HAL_Delay(2000); // Wait 5 seconds before resetting
 80006f6:	23fa      	movs	r3, #250	; 0xfa
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 fa58 	bl	8001bb0 <HAL_Delay>
              resetGame(&snake, &food); // Reset the game
 8000700:	003a      	movs	r2, r7
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 f848 	bl	800079c <resetGame>
              continue;
 800070c:	e008      	b.n	8000720 <main+0x90>
          }
          renderGame(&snake, &food);
 800070e:	003a      	movs	r2, r7
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f000 f8b3 	bl	8000880 <renderGame>
          HAL_Delay(200); // Game speed
 800071a:	20c8      	movs	r0, #200	; 0xc8
 800071c:	f001 fa48 	bl	8001bb0 <HAL_Delay>
          updateGame(&snake, &food);
 8000720:	e7cd      	b.n	80006be <main+0x2e>
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000000 	.word	0x20000000
 8000728:	080058d0 	.word	0x080058d0

0800072c <initializeGame>:
      }
}


void initializeGame(Snake* snake, Food* food) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
    // Initialize the snake in the middle of the screen
    snake->length = SNAKE_START_LENGTH;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	22c8      	movs	r2, #200	; 0xc8
 800073a:	2105      	movs	r1, #5
 800073c:	5299      	strh	r1, [r3, r2]
    for (int i = 0; i < snake->length; i++) {
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	e012      	b.n	800076a <initializeGame+0x3e>
        snake->body[i].x = SSD1306_WIDTH / 2;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	0052      	lsls	r2, r2, #1
 800074a:	2140      	movs	r1, #64	; 0x40
 800074c:	54d1      	strb	r1, [r2, r3]
        snake->body[i].y = SSD1306_HEIGHT / 2 + i;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	3320      	adds	r3, #32
 8000754:	b2d9      	uxtb	r1, r3
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	3301      	adds	r3, #1
 8000760:	1c0a      	adds	r2, r1, #0
 8000762:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake->length; i++) {
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	22c8      	movs	r2, #200	; 0xc8
 800076e:	5a9b      	ldrh	r3, [r3, r2]
 8000770:	001a      	movs	r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	4293      	cmp	r3, r2
 8000776:	dbe5      	blt.n	8000744 <initializeGame+0x18>
    }
    snake->direction.x = 0;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	22ca      	movs	r2, #202	; 0xca
 800077c:	2100      	movs	r1, #0
 800077e:	5499      	strb	r1, [r3, r2]
    snake->direction.y = -1; // Moving upwards
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	22cb      	movs	r2, #203	; 0xcb
 8000784:	21ff      	movs	r1, #255	; 0xff
 8000786:	5499      	strb	r1, [r3, r2]

    // Initialize the food
    generateFood(food, snake);
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	0011      	movs	r1, r2
 800078e:	0018      	movs	r0, r3
 8000790:	f000 f8e4 	bl	800095c <generateFood>
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b004      	add	sp, #16
 800079a:	bd80      	pop	{r7, pc}

0800079c <resetGame>:

void resetGame(Snake* snake, Food* food) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
    // Reinitialize the snake in the middle of the screen
    snake->length = SNAKE_START_LENGTH;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	22c8      	movs	r2, #200	; 0xc8
 80007aa:	2105      	movs	r1, #5
 80007ac:	5299      	strh	r1, [r3, r2]
    for (int i = 0; i < snake->length; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e012      	b.n	80007da <resetGame+0x3e>
        snake->body[i].x = 62;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	0052      	lsls	r2, r2, #1
 80007ba:	213e      	movs	r1, #62	; 0x3e
 80007bc:	54d1      	strb	r1, [r2, r3]
        snake->body[i].y = 30 + i;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	331e      	adds	r3, #30
 80007c4:	b2d9      	uxtb	r1, r3
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	18d3      	adds	r3, r2, r3
 80007ce:	3301      	adds	r3, #1
 80007d0:	1c0a      	adds	r2, r1, #0
 80007d2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < snake->length; i++) {
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	22c8      	movs	r2, #200	; 0xc8
 80007de:	5a9b      	ldrh	r3, [r3, r2]
 80007e0:	001a      	movs	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	4293      	cmp	r3, r2
 80007e6:	dbe5      	blt.n	80007b4 <resetGame+0x18>
    }
    snake->direction.x = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	22ca      	movs	r2, #202	; 0xca
 80007ec:	2100      	movs	r1, #0
 80007ee:	5499      	strb	r1, [r3, r2]
    snake->direction.y = -1; // Moving upwards
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	22cb      	movs	r2, #203	; 0xcb
 80007f4:	21ff      	movs	r1, #255	; 0xff
 80007f6:	5499      	strb	r1, [r3, r2]

    // Reinitialize the food
    generateFood(food, snake);
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 f8ac 	bl	800095c <generateFood>
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b004      	add	sp, #16
 800080a:	bd80      	pop	{r7, pc}

0800080c <updateGame>:


void updateGame(Snake* snake, Food* food) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    // Update direction based on global variables
    if (snake_direction_x != 0 || snake_direction_y != 0) {
 8000816:	4b18      	ldr	r3, [pc, #96]	; (8000878 <updateGame+0x6c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d103      	bne.n	8000826 <updateGame+0x1a>
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <updateGame+0x70>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d011      	beq.n	800084a <updateGame+0x3e>
        snake->direction.x = snake_direction_x;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <updateGame+0x6c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	b2d9      	uxtb	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	22ca      	movs	r2, #202	; 0xca
 8000830:	5499      	strb	r1, [r3, r2]
        snake->direction.y = snake_direction_y;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <updateGame+0x70>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	b2d9      	uxtb	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	22cb      	movs	r2, #203	; 0xcb
 800083c:	5499      	strb	r1, [r3, r2]

        // Reset direction variables
        snake_direction_x = 0;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <updateGame+0x6c>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
        snake_direction_y = 0;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <updateGame+0x70>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
    }

    moveSnake(snake);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f8b7 	bl	80009c0 <moveSnake>
    if (checkFoodCollision(snake, food)) {
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f000 f8f0 	bl	8000a3e <checkFoodCollision>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d005      	beq.n	800086e <updateGame+0x62>
        generateFood(food, snake);
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f877 	bl	800095c <generateFood>
    }
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	200001c4 	.word	0x200001c4
 800087c:	200001c8 	.word	0x200001c8

08000880 <renderGame>:


void renderGame(const Snake* snake, const Food* food) {
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b087      	sub	sp, #28
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
    ssd1306_Fill(Black);
 800088a:	2000      	movs	r0, #0
 800088c:	f000 fc1a 	bl	80010c4 <ssd1306_Fill>
    ssd1306_DrawRectangle(0,0,127,63,White);
 8000890:	2301      	movs	r3, #1
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	233f      	movs	r3, #63	; 0x3f
 8000896:	227f      	movs	r2, #127	; 0x7f
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f000 fe24 	bl	80014e8 <ssd1306_DrawRectangle>

    // Render the food as a 2x2 rectangle
    ssd1306_FillRectangle(food->position.x, food->position.y, food->position.x + 3, food->position.y + 3, White);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	7818      	ldrb	r0, [r3, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	7859      	ldrb	r1, [r3, #1]
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	3303      	adds	r3, #3
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	3303      	adds	r3, #3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2401      	movs	r4, #1
 80008ba:	9400      	str	r4, [sp, #0]
 80008bc:	f000 fe64 	bl	8001588 <ssd1306_FillRectangle>

    // Render each segment of the snake as a 2x2 rectangle
    for (int i = 0; i < snake->length; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	e01f      	b.n	8000906 <renderGame+0x86>
        ssd1306_FillRectangle(snake->body[i].x, snake->body[i].y, snake->body[i].x + 3, snake->body[i].y + 3, White);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	5cd0      	ldrb	r0, [r2, r3]
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	3301      	adds	r3, #1
 80008d8:	7819      	ldrb	r1, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	5cd3      	ldrb	r3, [r2, r3]
 80008e2:	3303      	adds	r3, #3
 80008e4:	b2dc      	uxtb	r4, r3
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	3301      	adds	r3, #1
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3303      	adds	r3, #3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2201      	movs	r2, #1
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	0022      	movs	r2, r4
 80008fc:	f000 fe44 	bl	8001588 <ssd1306_FillRectangle>
    for (int i = 0; i < snake->length; i++) {
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	3301      	adds	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	22c8      	movs	r2, #200	; 0xc8
 800090a:	5a9b      	ldrh	r3, [r3, r2]
 800090c:	001a      	movs	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	4293      	cmp	r3, r2
 8000912:	dbd8      	blt.n	80008c6 <renderGame+0x46>
    }
    ssd1306_UpdateScreen();
 8000914:	f000 fbf0 	bl	80010f8 <ssd1306_UpdateScreen>
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	b005      	add	sp, #20
 800091e:	bd90      	pop	{r4, r7, pc}

08000920 <checkCollision>:


bool checkCollision(const Snake* snake) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    // Check for collision with walls
    Point head = snake->body[0];
 8000928:	210c      	movs	r1, #12
 800092a:	187b      	adds	r3, r7, r1
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	8812      	ldrh	r2, [r2, #0]
 8000930:	801a      	strh	r2, [r3, #0]
    if (head.x >= SSD1306_WIDTH || head.x < 0 || head.y >= SSD1306_HEIGHT || head.y < 0) {
 8000932:	000a      	movs	r2, r1
 8000934:	18bb      	adds	r3, r7, r2
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	db03      	blt.n	8000946 <checkCollision+0x26>
 800093e:	18bb      	adds	r3, r7, r2
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	2b3f      	cmp	r3, #63	; 0x3f
 8000944:	d901      	bls.n	800094a <checkCollision+0x2a>
        return true;
 8000946:	2301      	movs	r3, #1
 8000948:	e004      	b.n	8000954 <checkCollision+0x34>
    }
    // Check for collision with self
    return checkSelfCollision(snake);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	0018      	movs	r0, r3
 800094e:	f000 f899 	bl	8000a84 <checkSelfCollision>
 8000952:	0003      	movs	r3, r0
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}

0800095c <generateFood>:

void generateFood(Food* food, const Snake* snake) {
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
    bool collision;
    do {
        collision = false;
 8000966:	240f      	movs	r4, #15
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]

        // Generate food in grid coordinates within game area
        food->position.x = GAME_AREA_X_MIN + (rand() % GRID_WIDTH) * GRID_CELL_SIZE;
 800096e:	f003 ff97 	bl	80048a0 <rand>
 8000972:	0003      	movs	r3, r0
 8000974:	211f      	movs	r1, #31
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fd40 	bl	80003fc <__aeabi_idivmod>
 800097c:	000b      	movs	r3, r1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	3302      	adds	r3, #2
 8000986:	b2da      	uxtb	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	701a      	strb	r2, [r3, #0]
        food->position.y = GAME_AREA_Y_MIN + (rand() % GRID_HEIGHT) * GRID_CELL_SIZE;
 800098c:	f003 ff88 	bl	80048a0 <rand>
 8000990:	0003      	movs	r3, r0
 8000992:	210f      	movs	r1, #15
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff fd31 	bl	80003fc <__aeabi_idivmod>
 800099a:	000b      	movs	r3, r1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	3302      	adds	r3, #2
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	705a      	strb	r2, [r3, #1]

        // Check collision with snake
        // ...
    } while (collision);
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1d9      	bne.n	8000966 <generateFood+0xa>

    food->isEaten = false;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	709a      	strb	r2, [r3, #2]
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b005      	add	sp, #20
 80009be:	bd90      	pop	{r4, r7, pc}

080009c0 <moveSnake>:


void moveSnake(Snake* snake) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	Point newHead = {
	        .x = snake->body[0].x + (snake->direction.x * GRID_CELL_SIZE),
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	21ca      	movs	r1, #202	; 0xca
 80009d0:	5c5b      	ldrb	r3, [r3, r1]
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	18d3      	adds	r3, r2, r3
 80009d8:	b2da      	uxtb	r2, r3
	Point newHead = {
 80009da:	2008      	movs	r0, #8
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	701a      	strb	r2, [r3, #0]
	        .y = snake->body[0].y + (snake->direction.y * GRID_CELL_SIZE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	785a      	ldrb	r2, [r3, #1]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	21cb      	movs	r1, #203	; 0xcb
 80009e8:	5c5b      	ldrb	r3, [r3, r1]
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	18d3      	adds	r3, r2, r3
 80009f0:	b2da      	uxtb	r2, r3
	Point newHead = {
 80009f2:	183b      	adds	r3, r7, r0
 80009f4:	705a      	strb	r2, [r3, #1]
	    };

	    // Restrict new head position within game area
	    if (newHead.x < GAME_AREA_X_MIN || newHead.x >= GAME_AREA_X_MAX ||
 80009f6:	183b      	adds	r3, r7, r0
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d901      	bls.n	8000a02 <moveSnake+0x42>
 80009fe:	183b      	adds	r3, r7, r0
 8000a00:	781b      	ldrb	r3, [r3, #0]
	        newHead.y < GAME_AREA_Y_MIN || newHead.y >= GAME_AREA_Y_MAX) {
	        // Handle collision or reset game
	        // ...
	    }
    // Shift the body
    for (int i = snake->length - 1; i > 0; i--) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	22c8      	movs	r2, #200	; 0xc8
 8000a06:	5a9b      	ldrh	r3, [r3, r2]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	e00b      	b.n	8000a26 <moveSnake+0x66>
        snake->body[i] = snake->body[i - 1];
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	1e58      	subs	r0, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	0052      	lsls	r2, r2, #1
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	0040      	lsls	r0, r0, #1
 8000a1c:	5a41      	ldrh	r1, [r0, r1]
 8000a1e:	52d1      	strh	r1, [r2, r3]
    for (int i = snake->length - 1; i > 0; i--) {
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dcf0      	bgt.n	8000a0e <moveSnake+0x4e>
    }
    // Set new head
    snake->body[0] = newHead;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2208      	movs	r2, #8
 8000a30:	18ba      	adds	r2, r7, r2
 8000a32:	8812      	ldrh	r2, [r2, #0]
 8000a34:	801a      	strh	r2, [r3, #0]
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b004      	add	sp, #16
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <checkFoodCollision>:

bool checkFoodCollision(Snake* snake, Food* food) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
    if (snake->body[0].x == food->position.x && snake->body[0].y == food->position.y) {
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d112      	bne.n	8000a7a <checkFoodCollision+0x3c>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	785a      	ldrb	r2, [r3, #1]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	785b      	ldrb	r3, [r3, #1]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d10c      	bne.n	8000a7a <checkFoodCollision+0x3c>
        food->isEaten = true;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	2201      	movs	r2, #1
 8000a64:	709a      	strb	r2, [r3, #2]
        snake->length++;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	22c8      	movs	r2, #200	; 0xc8
 8000a6a:	5a9b      	ldrh	r3, [r3, r2]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b299      	uxth	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	22c8      	movs	r2, #200	; 0xc8
 8000a74:	5299      	strh	r1, [r3, r2]
        return true;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e000      	b.n	8000a7c <checkFoodCollision+0x3e>
    }
    return false;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <checkSelfCollision>:

bool checkSelfCollision(const Snake* snake) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    Point head = snake->body[0];
 8000a8c:	2308      	movs	r3, #8
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	8812      	ldrh	r2, [r2, #0]
 8000a94:	801a      	strh	r2, [r3, #0]
    for (int i = 1; i < snake->length; i++) {
 8000a96:	2301      	movs	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e017      	b.n	8000acc <checkSelfCollision+0x48>
        if (head.x == snake->body[i].x && head.y == snake->body[i].y) {
 8000a9c:	2008      	movs	r0, #8
 8000a9e:	183b      	adds	r3, r7, r0
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68f9      	ldr	r1, [r7, #12]
 8000aa6:	0049      	lsls	r1, r1, #1
 8000aa8:	5ccb      	ldrb	r3, [r1, r3]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d10b      	bne.n	8000ac6 <checkSelfCollision+0x42>
 8000aae:	183b      	adds	r3, r7, r0
 8000ab0:	785a      	ldrb	r2, [r3, #1]
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	18cb      	adds	r3, r1, r3
 8000aba:	3301      	adds	r3, #1
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d101      	bne.n	8000ac6 <checkSelfCollision+0x42>
            return true;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00a      	b.n	8000adc <checkSelfCollision+0x58>
    for (int i = 1; i < snake->length; i++) {
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	22c8      	movs	r2, #200	; 0xc8
 8000ad0:	5a9b      	ldrh	r3, [r3, r2]
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	dbe0      	blt.n	8000a9c <checkSelfCollision+0x18>
        }
    }
    return false;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b004      	add	sp, #16
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b09f      	sub	sp, #124	; 0x7c
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	2440      	movs	r4, #64	; 0x40
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	0018      	movs	r0, r3
 8000af0:	2338      	movs	r3, #56	; 0x38
 8000af2:	001a      	movs	r2, r3
 8000af4:	2100      	movs	r1, #0
 8000af6:	f004 f80f 	bl	8004b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afa:	232c      	movs	r3, #44	; 0x2c
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	0018      	movs	r0, r3
 8000b00:	2314      	movs	r3, #20
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f004 f807 	bl	8004b18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2328      	movs	r3, #40	; 0x28
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f004 f800 	bl	8004b18 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SystemClock_Config+0xd4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <SystemClock_Config+0xd8>)
 8000b1e:	401a      	ands	r2, r3
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <SystemClock_Config+0xd4>)
 8000b22:	2180      	movs	r1, #128	; 0x80
 8000b24:	0109      	lsls	r1, r1, #4
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b2a:	0021      	movs	r1, r4
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2210      	movs	r2, #16
 8000b30:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2201      	movs	r2, #1
 8000b36:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	22a0      	movs	r2, #160	; 0xa0
 8000b42:	0212      	lsls	r2, r2, #8
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 f9f4 	bl	8002f3c <HAL_RCC_OscConfig>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000b58:	f000 fa0a 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	212c      	movs	r1, #44	; 0x2c
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	220f      	movs	r2, #15
 8000b62:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2100      	movs	r1, #0
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 fdaf 	bl	80036e4 <HAL_RCC_ClockConfig>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b8a:	f000 f9f1 	bl	8000f70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	220a      	movs	r2, #10
 8000b92:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 ffc2 	bl	8003b2c <HAL_RCCEx_PeriphCLKConfig>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bac:	f000 f9e0 	bl	8000f70 <Error_Handler>
  }
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b01f      	add	sp, #124	; 0x7c
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	ffffe7ff 	.word	0xffffe7ff

08000bc0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	0018      	movs	r0, r3
 8000bca:	2308      	movs	r3, #8
 8000bcc:	001a      	movs	r2, r3
 8000bce:	2100      	movs	r1, #0
 8000bd0:	f003 ffa2 	bl	8004b18 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000bd4:	4b30      	ldr	r3, [pc, #192]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000bd6:	4a31      	ldr	r2, [pc, #196]	; (8000c9c <MX_ADC_Init+0xdc>)
 8000bd8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000bda:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000be0:	4b2d      	ldr	r3, [pc, #180]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000be2:	22c0      	movs	r2, #192	; 0xc0
 8000be4:	0612      	lsls	r2, r2, #24
 8000be6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000be8:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bee:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c02:	2220      	movs	r2, #32
 8000c04:	2100      	movs	r1, #0
 8000c06:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c08:	4b23      	ldr	r3, [pc, #140]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c0a:	2221      	movs	r2, #33	; 0x21
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c18:	22c2      	movs	r2, #194	; 0xc2
 8000c1a:	32ff      	adds	r2, #255	; 0xff
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c20:	222c      	movs	r2, #44	; 0x2c
 8000c22:	2100      	movs	r1, #0
 8000c24:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c28:	2204      	movs	r2, #4
 8000c2a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 ffd6 	bl	8001bf8 <HAL_ADC_Init>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000c50:	f000 f98e 	bl	8000f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c54:	003b      	movs	r3, r7
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	2280      	movs	r2, #128	; 0x80
 8000c5e:	0152      	lsls	r2, r2, #5
 8000c60:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c62:	003a      	movs	r2, r7
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 f939 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000c72:	f000 f97d 	bl	8000f70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c76:	003b      	movs	r3, r7
 8000c78:	4a09      	ldr	r2, [pc, #36]	; (8000ca0 <MX_ADC_Init+0xe0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c7c:	003a      	movs	r2, r7
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_ADC_Init+0xd8>)
 8000c80:	0011      	movs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f001 f92c 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000c8c:	f000 f970 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000008c 	.word	0x2000008c
 8000c9c:	40012400 	.word	0x40012400
 8000ca0:	04000002 	.word	0x04000002

08000ca4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_I2C1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc6:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 fc37 	bl	8002554 <HAL_I2C_Init>
 8000ce6:	1e03      	subs	r3, r0, #0
 8000ce8:	d001      	beq.n	8000cee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cea:	f000 f941 	bl	8000f70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f002 f88a 	bl	8002e0c <HAL_I2CEx_ConfigAnalogFilter>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cfc:	f000 f938 	bl	8000f70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <MX_I2C1_Init+0x74>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	0018      	movs	r0, r3
 8000d06:	f002 f8cd 	bl	8002ea4 <HAL_I2CEx_ConfigDigitalFilter>
 8000d0a:	1e03      	subs	r3, r0, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 f92f 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	200000e8 	.word	0x200000e8
 8000d1c:	40005400 	.word	0x40005400

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <MX_USART2_UART_Init+0x5c>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d2c:	22e1      	movs	r2, #225	; 0xe1
 8000d2e:	0252      	lsls	r2, r2, #9
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f003 f87f 	bl	8003e68 <HAL_UART_Init>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 f8ff 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000013c 	.word	0x2000013c
 8000d7c:	40004400 	.word	0x40004400

08000d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	2414      	movs	r4, #20
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2314      	movs	r3, #20
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f003 fec1 	bl	8004b18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b49      	ldr	r3, [pc, #292]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d9a:	4b48      	ldr	r3, [pc, #288]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da2:	4b46      	ldr	r3, [pc, #280]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	2204      	movs	r2, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db2:	4b42      	ldr	r3, [pc, #264]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	430a      	orrs	r2, r1
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b3d      	ldr	r3, [pc, #244]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dca:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000de4:	2102      	movs	r1, #2
 8000de6:	430a      	orrs	r2, r1
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <MX_GPIO_Init+0x13c>)
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fb8a 	bl	8002518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	2280      	movs	r2, #128	; 0x80
 8000e08:	0192      	lsls	r2, r2, #6
 8000e0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e0c:	193b      	adds	r3, r7, r4
 8000e0e:	2284      	movs	r2, #132	; 0x84
 8000e10:	0392      	lsls	r2, r2, #14
 8000e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <MX_GPIO_Init+0x140>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f001 f9fb 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	2220      	movs	r2, #32
 8000e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	193b      	adds	r3, r7, r4
 8000e2e:	2201      	movs	r2, #1
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	193a      	adds	r2, r7, r4
 8000e40:	23a0      	movs	r3, #160	; 0xa0
 8000e42:	05db      	lsls	r3, r3, #23
 8000e44:	0011      	movs	r1, r2
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 f9e8 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	2288      	movs	r2, #136	; 0x88
 8000e58:	0352      	lsls	r2, r2, #13
 8000e5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	193a      	adds	r2, r7, r4
 8000e64:	23a0      	movs	r3, #160	; 0xa0
 8000e66:	05db      	lsls	r3, r3, #23
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f001 f9d6 	bl	800221c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e70:	0021      	movs	r1, r4
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2238      	movs	r2, #56	; 0x38
 8000e76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2288      	movs	r2, #136	; 0x88
 8000e7c:	0352      	lsls	r2, r2, #13
 8000e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <MX_GPIO_Init+0x144>)
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	0010      	movs	r0, r2
 8000e8e:	f001 f9c5 	bl	800221c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2006      	movs	r0, #6
 8000e98:	f001 f98e 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000e9c:	2006      	movs	r0, #6
 8000e9e:	f001 f9a0 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f001 f986 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000eac:	2007      	movs	r0, #7
 8000eae:	f001 f998 	bl	80021e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00b      	add	sp, #44	; 0x2c
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	50000800 	.word	0x50000800
 8000ec4:	50000400 	.word	0x50000400

08000ec8 <EXTI2_3_IRQHandler>:

/* USER CODE BEGIN 4 */

void EXTI2_3_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET) {
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <EXTI2_3_IRQHandler+0x28>)
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d008      	beq.n	8000ee8 <EXTI2_3_IRQHandler+0x20>
            __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <EXTI2_3_IRQHandler+0x28>)
 8000ed8:	2208      	movs	r2, #8
 8000eda:	615a      	str	r2, [r3, #20]

       snake_direction_x = 1; // Right
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <EXTI2_3_IRQHandler+0x2c>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
       snake_direction_y = 0;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <EXTI2_3_IRQHandler+0x30>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
    }
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	40010400 	.word	0x40010400
 8000ef4:	200001c4 	.word	0x200001c4
 8000ef8:	200001c8 	.word	0x200001c8

08000efc <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) {
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <EXTI4_15_IRQHandler+0x68>)
 8000f02:	695a      	ldr	r2, [r3, #20]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d00a      	beq.n	8000f22 <EXTI4_15_IRQHandler+0x26>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <EXTI4_15_IRQHandler+0x68>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	615a      	str	r2, [r3, #20]
        snake_direction_x = 0;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <EXTI4_15_IRQHandler+0x6c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
        snake_direction_y = -1; // Up
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <EXTI4_15_IRQHandler+0x70>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4252      	negs	r2, r2
 8000f20:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) {
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <EXTI4_15_IRQHandler+0x68>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	2210      	movs	r2, #16
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d009      	beq.n	8000f40 <EXTI4_15_IRQHandler+0x44>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <EXTI4_15_IRQHandler+0x68>)
 8000f2e:	2210      	movs	r2, #16
 8000f30:	615a      	str	r2, [r3, #20]
        snake_direction_x = -1;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <EXTI4_15_IRQHandler+0x6c>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	4252      	negs	r2, r2
 8000f38:	601a      	str	r2, [r3, #0]
        snake_direction_y = 0; // Left
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <EXTI4_15_IRQHandler+0x70>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) {
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <EXTI4_15_IRQHandler+0x68>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	2220      	movs	r2, #32
 8000f46:	4013      	ands	r3, r2
 8000f48:	d008      	beq.n	8000f5c <EXTI4_15_IRQHandler+0x60>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <EXTI4_15_IRQHandler+0x68>)
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	615a      	str	r2, [r3, #20]
        snake_direction_x = 0;
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <EXTI4_15_IRQHandler+0x6c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
        snake_direction_y = 1; // Down
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <EXTI4_15_IRQHandler+0x70>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	601a      	str	r2, [r3, #0]
    }
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40010400 	.word	0x40010400
 8000f68:	200001c4 	.word	0x200001c4
 8000f6c:	200001c8 	.word	0x200001c8

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>

08000f7a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	0002      	movs	r2, r0
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <ssd1306_WriteCommand+0x30>)
 8000f92:	2301      	movs	r3, #1
 8000f94:	425b      	negs	r3, r3
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	1dfb      	adds	r3, r7, #7
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2178      	movs	r1, #120	; 0x78
 8000fa6:	f001 fb6b 	bl	8002680 <HAL_I2C_Mem_Write>
}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	200000e8 	.word	0x200000e8

08000fb8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af04      	add	r7, sp, #16
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <ssd1306_WriteData+0x30>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4252      	negs	r2, r2
 8000fcc:	9202      	str	r2, [sp, #8]
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	2178      	movs	r1, #120	; 0x78
 8000fda:	f001 fb51 	bl	8002680 <HAL_I2C_Mem_Write>
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b002      	add	sp, #8
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	200000e8 	.word	0x200000e8

08000fec <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000ff0:	f7ff ffc3 	bl	8000f7a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000ff4:	2064      	movs	r0, #100	; 0x64
 8000ff6:	f000 fddb 	bl	8001bb0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fb64 	bl	80016c8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001000:	2020      	movs	r0, #32
 8001002:	f7ff ffbf 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ffbc 	bl	8000f84 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800100c:	20b0      	movs	r0, #176	; 0xb0
 800100e:	f7ff ffb9 	bl	8000f84 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001012:	20c8      	movs	r0, #200	; 0xc8
 8001014:	f7ff ffb6 	bl	8000f84 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff ffb3 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800101e:	2010      	movs	r0, #16
 8001020:	f7ff ffb0 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001024:	2040      	movs	r0, #64	; 0x40
 8001026:	f7ff ffad 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800102a:	20ff      	movs	r0, #255	; 0xff
 800102c:	f000 fb33 	bl	8001696 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001030:	20a1      	movs	r0, #161	; 0xa1
 8001032:	f7ff ffa7 	bl	8000f84 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001036:	20a6      	movs	r0, #166	; 0xa6
 8001038:	f7ff ffa4 	bl	8000f84 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800103c:	20a8      	movs	r0, #168	; 0xa8
 800103e:	f7ff ffa1 	bl	8000f84 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001042:	203f      	movs	r0, #63	; 0x3f
 8001044:	f7ff ff9e 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001048:	20a4      	movs	r0, #164	; 0xa4
 800104a:	f7ff ff9b 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800104e:	20d3      	movs	r0, #211	; 0xd3
 8001050:	f7ff ff98 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff95 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800105a:	20d5      	movs	r0, #213	; 0xd5
 800105c:	f7ff ff92 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001060:	20f0      	movs	r0, #240	; 0xf0
 8001062:	f7ff ff8f 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001066:	20d9      	movs	r0, #217	; 0xd9
 8001068:	f7ff ff8c 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800106c:	2022      	movs	r0, #34	; 0x22
 800106e:	f7ff ff89 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001072:	20da      	movs	r0, #218	; 0xda
 8001074:	f7ff ff86 	bl	8000f84 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001078:	2012      	movs	r0, #18
 800107a:	f7ff ff83 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800107e:	20db      	movs	r0, #219	; 0xdb
 8001080:	f7ff ff80 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001084:	2020      	movs	r0, #32
 8001086:	f7ff ff7d 	bl	8000f84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800108a:	208d      	movs	r0, #141	; 0x8d
 800108c:	f7ff ff7a 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001090:	2014      	movs	r0, #20
 8001092:	f7ff ff77 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001096:	2001      	movs	r0, #1
 8001098:	f000 fb16 	bl	80016c8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800109c:	2000      	movs	r0, #0
 800109e:	f000 f811 	bl	80010c4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80010a2:	f000 f829 	bl	80010f8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <ssd1306_Init+0xd4>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <ssd1306_Init+0xd4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <ssd1306_Init+0xd4>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	711a      	strb	r2, [r3, #4]
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	200005cc 	.word	0x200005cc

080010c4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0002      	movs	r2, r0
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <ssd1306_Fill+0x18>
 80010d8:	2300      	movs	r3, #0
 80010da:	e000      	b.n	80010de <ssd1306_Fill+0x1a>
 80010dc:	23ff      	movs	r3, #255	; 0xff
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <ssd1306_Fill+0x30>)
 80010e4:	0019      	movs	r1, r3
 80010e6:	f003 fd17 	bl	8004b18 <memset>
}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	200001cc 	.word	0x200001cc

080010f8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e01a      	b.n	800113c <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3b50      	subs	r3, #80	; 0x50
 800110c:	b2db      	uxtb	r3, r3
 800110e:	0018      	movs	r0, r3
 8001110:	f7ff ff38 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff35 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800111a:	2010      	movs	r0, #16
 800111c:	f7ff ff32 	bl	8000f84 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	01da      	lsls	r2, r3, #7
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <ssd1306_UpdateScreen+0x58>)
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff ff43 	bl	8000fb8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781a      	ldrb	r2, [r3, #0]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	3201      	adds	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	2b07      	cmp	r3, #7
 8001142:	d9e0      	bls.n	8001106 <ssd1306_UpdateScreen+0xe>
    }
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	200001cc 	.word	0x200001cc

08001154 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	0004      	movs	r4, r0
 800115c:	0008      	movs	r0, r1
 800115e:	0011      	movs	r1, r2
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	1c22      	adds	r2, r4, #0
 8001164:	701a      	strb	r2, [r3, #0]
 8001166:	1dbb      	adds	r3, r7, #6
 8001168:	1c02      	adds	r2, r0, #0
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	1d7b      	adds	r3, r7, #5
 800116e:	1c0a      	adds	r2, r1, #0
 8001170:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b25b      	sxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	db47      	blt.n	800120c <ssd1306_DrawPixel+0xb8>
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b3f      	cmp	r3, #63	; 0x3f
 8001182:	d843      	bhi.n	800120c <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001184:	1d7b      	adds	r3, r7, #5
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d11e      	bne.n	80011ca <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	08db      	lsrs	r3, r3, #3
 8001196:	b2d8      	uxtb	r0, r3
 8001198:	0003      	movs	r3, r0
 800119a:	01db      	lsls	r3, r3, #7
 800119c:	18d3      	adds	r3, r2, r3
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <ssd1306_DrawPixel+0xc0>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	1dbb      	adds	r3, r7, #6
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2107      	movs	r1, #7
 80011aa:	400b      	ands	r3, r1
 80011ac:	2101      	movs	r1, #1
 80011ae:	4099      	lsls	r1, r3
 80011b0:	000b      	movs	r3, r1
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b259      	sxtb	r1, r3
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	0003      	movs	r3, r0
 80011be:	01db      	lsls	r3, r3, #7
 80011c0:	18d3      	adds	r3, r2, r3
 80011c2:	b2c9      	uxtb	r1, r1
 80011c4:	4a13      	ldr	r2, [pc, #76]	; (8001214 <ssd1306_DrawPixel+0xc0>)
 80011c6:	54d1      	strb	r1, [r2, r3]
 80011c8:	e021      	b.n	800120e <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	1dbb      	adds	r3, r7, #6
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	08db      	lsrs	r3, r3, #3
 80011d4:	b2d8      	uxtb	r0, r3
 80011d6:	0003      	movs	r3, r0
 80011d8:	01db      	lsls	r3, r3, #7
 80011da:	18d3      	adds	r3, r2, r3
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <ssd1306_DrawPixel+0xc0>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	1dba      	adds	r2, r7, #6
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	2107      	movs	r1, #7
 80011e8:	400a      	ands	r2, r1
 80011ea:	2101      	movs	r1, #1
 80011ec:	4091      	lsls	r1, r2
 80011ee:	000a      	movs	r2, r1
 80011f0:	b252      	sxtb	r2, r2
 80011f2:	43d2      	mvns	r2, r2
 80011f4:	b252      	sxtb	r2, r2
 80011f6:	4013      	ands	r3, r2
 80011f8:	b259      	sxtb	r1, r3
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	0003      	movs	r3, r0
 8001200:	01db      	lsls	r3, r3, #7
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	b2c9      	uxtb	r1, r1
 8001206:	4a03      	ldr	r2, [pc, #12]	; (8001214 <ssd1306_DrawPixel+0xc0>)
 8001208:	54d1      	strb	r1, [r2, r3]
 800120a:	e000      	b.n	800120e <ssd1306_DrawPixel+0xba>
        return;
 800120c:	46c0      	nop			; (mov r8, r8)
    }
}
 800120e:	46bd      	mov	sp, r7
 8001210:	b003      	add	sp, #12
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	200001cc 	.word	0x200001cc

08001218 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	0004      	movs	r4, r0
 8001220:	1d38      	adds	r0, r7, #4
 8001222:	6001      	str	r1, [r0, #0]
 8001224:	6042      	str	r2, [r0, #4]
 8001226:	0019      	movs	r1, r3
 8001228:	200f      	movs	r0, #15
 800122a:	183b      	adds	r3, r7, r0
 800122c:	1c22      	adds	r2, r4, #0
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	230e      	movs	r3, #14
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	1c0a      	adds	r2, r1, #0
 8001236:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001238:	183b      	adds	r3, r7, r0
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b1f      	cmp	r3, #31
 800123e:	d903      	bls.n	8001248 <ssd1306_WriteChar+0x30>
 8001240:	183b      	adds	r3, r7, r0
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b7e      	cmp	r3, #126	; 0x7e
 8001246:	d901      	bls.n	800124c <ssd1306_WriteChar+0x34>
        return 0;
 8001248:	2300      	movs	r3, #0
 800124a:	e078      	b.n	800133e <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <ssd1306_WriteChar+0x130>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	001a      	movs	r2, r3
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	18d3      	adds	r3, r2, r3
 8001258:	2b80      	cmp	r3, #128	; 0x80
 800125a:	dc07      	bgt.n	800126c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800125c:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <ssd1306_WriteChar+0x130>)
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	001a      	movs	r2, r3
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001268:	2b40      	cmp	r3, #64	; 0x40
 800126a:	dd01      	ble.n	8001270 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 800126c:	2300      	movs	r3, #0
 800126e:	e066      	b.n	800133e <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e051      	b.n	800131a <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	230f      	movs	r3, #15
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3b20      	subs	r3, #32
 8001282:	1d39      	adds	r1, r7, #4
 8001284:	7849      	ldrb	r1, [r1, #1]
 8001286:	434b      	muls	r3, r1
 8001288:	0019      	movs	r1, r3
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	18cb      	adds	r3, r1, r3
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	e035      	b.n	8001308 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	409a      	lsls	r2, r3
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	4013      	ands	r3, r2
 80012a8:	d014      	beq.n	80012d4 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <ssd1306_WriteChar+0x130>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	b2d8      	uxtb	r0, r3
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <ssd1306_WriteChar+0x130>)
 80012ba:	885b      	ldrh	r3, [r3, #2]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	18d3      	adds	r3, r2, r3
 80012c4:	b2d9      	uxtb	r1, r3
 80012c6:	230e      	movs	r3, #14
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	001a      	movs	r2, r3
 80012ce:	f7ff ff41 	bl	8001154 <ssd1306_DrawPixel>
 80012d2:	e016      	b.n	8001302 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <ssd1306_WriteChar+0x130>)
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	18d3      	adds	r3, r2, r3
 80012e0:	b2d8      	uxtb	r0, r3
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <ssd1306_WriteChar+0x130>)
 80012e4:	885b      	ldrh	r3, [r3, #2]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	18d3      	adds	r3, r2, r3
 80012ee:	b2d9      	uxtb	r1, r3
 80012f0:	230e      	movs	r3, #14
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	425a      	negs	r2, r3
 80012f8:	4153      	adcs	r3, r2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	001a      	movs	r2, r3
 80012fe:	f7ff ff29 	bl	8001154 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	3301      	adds	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	001a      	movs	r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4293      	cmp	r3, r2
 8001312:	d3c3      	bcc.n	800129c <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	3301      	adds	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	785b      	ldrb	r3, [r3, #1]
 800131e:	001a      	movs	r2, r3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	4293      	cmp	r3, r2
 8001324:	d3a7      	bcc.n	8001276 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <ssd1306_WriteChar+0x130>)
 8001328:	881a      	ldrh	r2, [r3, #0]
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	18d3      	adds	r3, r2, r3
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <ssd1306_WriteChar+0x130>)
 8001336:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001338:	230f      	movs	r3, #15
 800133a:	18fb      	adds	r3, r7, r3
 800133c:	781b      	ldrb	r3, [r3, #0]
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b009      	add	sp, #36	; 0x24
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	200005cc 	.word	0x200005cc

0800134c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	1d38      	adds	r0, r7, #4
 8001356:	6001      	str	r1, [r0, #0]
 8001358:	6042      	str	r2, [r0, #4]
 800135a:	001a      	movs	r2, r3
 800135c:	1cfb      	adds	r3, r7, #3
 800135e:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8001360:	e014      	b.n	800138c <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	7818      	ldrb	r0, [r3, #0]
 8001366:	1cfb      	adds	r3, r7, #3
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	1d3a      	adds	r2, r7, #4
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	6852      	ldr	r2, [r2, #4]
 8001370:	f7ff ff52 	bl	8001218 <ssd1306_WriteChar>
 8001374:	0003      	movs	r3, r0
 8001376:	001a      	movs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d002      	beq.n	8001386 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	e008      	b.n	8001398 <ssd1306_WriteString+0x4c>
        }
        str++;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1e6      	bne.n	8001362 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	781b      	ldrb	r3, [r3, #0]
}
 8001398:	0018      	movs	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	b004      	add	sp, #16
 800139e:	bd80      	pop	{r7, pc}

080013a0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	0002      	movs	r2, r0
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	1dbb      	adds	r3, r7, #6
 80013ae:	1c0a      	adds	r2, r1, #0
 80013b0:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <ssd1306_SetCursor+0x30>)
 80013ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80013bc:	1dbb      	adds	r3, r7, #6
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b03      	ldr	r3, [pc, #12]	; (80013d0 <ssd1306_SetCursor+0x30>)
 80013c4:	805a      	strh	r2, [r3, #2]
}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	200005cc 	.word	0x200005cc

080013d4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	0005      	movs	r5, r0
 80013dc:	000c      	movs	r4, r1
 80013de:	0010      	movs	r0, r2
 80013e0:	0019      	movs	r1, r3
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	1c2a      	adds	r2, r5, #0
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	1dbb      	adds	r3, r7, #6
 80013ea:	1c22      	adds	r2, r4, #0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	1d7b      	adds	r3, r7, #5
 80013f0:	1c02      	adds	r2, r0, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	1d3b      	adds	r3, r7, #4
 80013f6:	1c0a      	adds	r2, r1, #0
 80013f8:	701a      	strb	r2, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 80013fa:	1d7b      	adds	r3, r7, #5
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	17da      	asrs	r2, r3, #31
 8001406:	189b      	adds	r3, r3, r2
 8001408:	4053      	eors	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	781a      	ldrb	r2, [r3, #0]
 8001410:	1dbb      	adds	r3, r7, #6
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	17da      	asrs	r2, r3, #31
 8001418:	189b      	adds	r3, r3, r2
 800141a:	4053      	eors	r3, r2
 800141c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800141e:	1dfa      	adds	r2, r7, #7
 8001420:	1d7b      	adds	r3, r7, #5
 8001422:	7812      	ldrb	r2, [r2, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	429a      	cmp	r2, r3
 8001428:	d201      	bcs.n	800142e <ssd1306_Line+0x5a>
 800142a:	2301      	movs	r3, #1
 800142c:	e001      	b.n	8001432 <ssd1306_Line+0x5e>
 800142e:	2301      	movs	r3, #1
 8001430:	425b      	negs	r3, r3
 8001432:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001434:	1dba      	adds	r2, r7, #6
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	429a      	cmp	r2, r3
 800143e:	d201      	bcs.n	8001444 <ssd1306_Line+0x70>
 8001440:	2301      	movs	r3, #1
 8001442:	e001      	b.n	8001448 <ssd1306_Line+0x74>
 8001444:	2301      	movs	r3, #1
 8001446:	425b      	negs	r3, r3
 8001448:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001452:	2330      	movs	r3, #48	; 0x30
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	1d7b      	adds	r3, r7, #5
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fe77 	bl	8001154 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001466:	e02f      	b.n	80014c8 <ssd1306_Line+0xf4>
        ssd1306_DrawPixel(x1, y1, color);
 8001468:	2330      	movs	r3, #48	; 0x30
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	781a      	ldrb	r2, [r3, #0]
 800146e:	1dbb      	adds	r3, r7, #6
 8001470:	7819      	ldrb	r1, [r3, #0]
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	0018      	movs	r0, r3
 8001478:	f7ff fe6c 	bl	8001154 <ssd1306_DrawPixel>
        error2 = error * 2;
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	425b      	negs	r3, r3
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	429a      	cmp	r2, r3
 800148a:	dd0a      	ble.n	80014a2 <ssd1306_Line+0xce>
            error -= deltaY;
 800148c:	69fa      	ldr	r2, [r7, #28]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	b2d9      	uxtb	r1, r3
 8001498:	1dfb      	adds	r3, r7, #7
 800149a:	1dfa      	adds	r2, r7, #7
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	188a      	adds	r2, r1, r2
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	1dbb      	adds	r3, r7, #6
 80014a4:	1dba      	adds	r2, r7, #6
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	701a      	strb	r2, [r3, #0]
        }
        
        if(error2 < deltaX) {
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	da0a      	bge.n	80014c8 <ssd1306_Line+0xf4>
            error += deltaX;
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	18d3      	adds	r3, r2, r3
 80014b8:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	1dbb      	adds	r3, r7, #6
 80014c0:	1dba      	adds	r2, r7, #6
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	188a      	adds	r2, r1, r2
 80014c6:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 80014c8:	1dfa      	adds	r2, r7, #7
 80014ca:	1d7b      	adds	r3, r7, #5
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d1c9      	bne.n	8001468 <ssd1306_Line+0x94>
 80014d4:	1dba      	adds	r2, r7, #6
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1c3      	bne.n	8001468 <ssd1306_Line+0x94>
        }
    }
    return;
 80014e0:	46c0      	nop			; (mov r8, r8)
}
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b008      	add	sp, #32
 80014e6:	bdb0      	pop	{r4, r5, r7, pc}

080014e8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80014e8:	b5b0      	push	{r4, r5, r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	0005      	movs	r5, r0
 80014f0:	000c      	movs	r4, r1
 80014f2:	0010      	movs	r0, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	1c2a      	adds	r2, r5, #0
 80014fa:	701a      	strb	r2, [r3, #0]
 80014fc:	1dbb      	adds	r3, r7, #6
 80014fe:	1c22      	adds	r2, r4, #0
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	1d7b      	adds	r3, r7, #5
 8001504:	1c02      	adds	r2, r0, #0
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	1c0a      	adds	r2, r1, #0
 800150c:	701a      	strb	r2, [r3, #0]
    ssd1306_Line(x1,y1,x2,y1,color);
 800150e:	1dbb      	adds	r3, r7, #6
 8001510:	781c      	ldrb	r4, [r3, #0]
 8001512:	1d7b      	adds	r3, r7, #5
 8001514:	781a      	ldrb	r2, [r3, #0]
 8001516:	1dbb      	adds	r3, r7, #6
 8001518:	7819      	ldrb	r1, [r3, #0]
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	7818      	ldrb	r0, [r3, #0]
 800151e:	2518      	movs	r5, #24
 8001520:	197b      	adds	r3, r7, r5
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	0023      	movs	r3, r4
 8001528:	f7ff ff54 	bl	80013d4 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	781c      	ldrb	r4, [r3, #0]
 8001530:	1d7b      	adds	r3, r7, #5
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	7819      	ldrb	r1, [r3, #0]
 8001538:	1d7b      	adds	r3, r7, #5
 800153a:	7818      	ldrb	r0, [r3, #0]
 800153c:	197b      	adds	r3, r7, r5
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	0023      	movs	r3, r4
 8001544:	f7ff ff46 	bl	80013d4 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	781c      	ldrb	r4, [r3, #0]
 800154c:	1dfb      	adds	r3, r7, #7
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	7819      	ldrb	r1, [r3, #0]
 8001554:	1d7b      	adds	r3, r7, #5
 8001556:	7818      	ldrb	r0, [r3, #0]
 8001558:	197b      	adds	r3, r7, r5
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	0023      	movs	r3, r4
 8001560:	f7ff ff38 	bl	80013d4 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	781c      	ldrb	r4, [r3, #0]
 8001568:	1dfb      	adds	r3, r7, #7
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	7818      	ldrb	r0, [r3, #0]
 8001574:	197b      	adds	r3, r7, r5
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	0023      	movs	r3, r4
 800157c:	f7ff ff2a 	bl	80013d4 <ssd1306_Line>

    return;
 8001580:	46c0      	nop			; (mov r8, r8)
}
 8001582:	46bd      	mov	sp, r7
 8001584:	b002      	add	sp, #8
 8001586:	bdb0      	pop	{r4, r5, r7, pc}

08001588 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001588:	b5b0      	push	{r4, r5, r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	0005      	movs	r5, r0
 8001590:	000c      	movs	r4, r1
 8001592:	0010      	movs	r0, r2
 8001594:	0019      	movs	r1, r3
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	1c2a      	adds	r2, r5, #0
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	1dbb      	adds	r3, r7, #6
 800159e:	1c22      	adds	r2, r4, #0
 80015a0:	701a      	strb	r2, [r3, #0]
 80015a2:	1d7b      	adds	r3, r7, #5
 80015a4:	1c02      	adds	r2, r0, #0
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	1c0a      	adds	r2, r1, #0
 80015ac:	701a      	strb	r2, [r3, #0]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80015ae:	230d      	movs	r3, #13
 80015b0:	18fa      	adds	r2, r7, r3
 80015b2:	1dfb      	adds	r3, r7, #7
 80015b4:	1d79      	adds	r1, r7, #5
 80015b6:	780c      	ldrb	r4, [r1, #0]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b2d8      	uxtb	r0, r3
 80015bc:	b2e1      	uxtb	r1, r4
 80015be:	4288      	cmp	r0, r1
 80015c0:	d900      	bls.n	80015c4 <ssd1306_FillRectangle+0x3c>
 80015c2:	1c23      	adds	r3, r4, #0
 80015c4:	7013      	strb	r3, [r2, #0]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80015c6:	230c      	movs	r3, #12
 80015c8:	18fa      	adds	r2, r7, r3
 80015ca:	1d7b      	adds	r3, r7, #5
 80015cc:	1df9      	adds	r1, r7, #7
 80015ce:	780c      	ldrb	r4, [r1, #0]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2d8      	uxtb	r0, r3
 80015d4:	b2e1      	uxtb	r1, r4
 80015d6:	4288      	cmp	r0, r1
 80015d8:	d200      	bcs.n	80015dc <ssd1306_FillRectangle+0x54>
 80015da:	1c23      	adds	r3, r4, #0
 80015dc:	7013      	strb	r3, [r2, #0]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80015de:	230b      	movs	r3, #11
 80015e0:	18fa      	adds	r2, r7, r3
 80015e2:	1dbb      	adds	r3, r7, #6
 80015e4:	1d39      	adds	r1, r7, #4
 80015e6:	780c      	ldrb	r4, [r1, #0]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2d8      	uxtb	r0, r3
 80015ec:	b2e1      	uxtb	r1, r4
 80015ee:	4288      	cmp	r0, r1
 80015f0:	d900      	bls.n	80015f4 <ssd1306_FillRectangle+0x6c>
 80015f2:	1c23      	adds	r3, r4, #0
 80015f4:	7013      	strb	r3, [r2, #0]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80015f6:	230a      	movs	r3, #10
 80015f8:	18fa      	adds	r2, r7, r3
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	1db9      	adds	r1, r7, #6
 80015fe:	780c      	ldrb	r4, [r1, #0]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b2d8      	uxtb	r0, r3
 8001604:	b2e1      	uxtb	r1, r4
 8001606:	4288      	cmp	r0, r1
 8001608:	d200      	bcs.n	800160c <ssd1306_FillRectangle+0x84>
 800160a:	1c23      	adds	r3, r4, #0
 800160c:	7013      	strb	r3, [r2, #0]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800160e:	230f      	movs	r3, #15
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	220b      	movs	r2, #11
 8001614:	18ba      	adds	r2, r7, r2
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e02b      	b.n	8001674 <ssd1306_FillRectangle+0xec>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800161c:	230e      	movs	r3, #14
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	220d      	movs	r2, #13
 8001622:	18ba      	adds	r2, r7, r2
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e011      	b.n	800164e <ssd1306_FillRectangle+0xc6>
            ssd1306_DrawPixel(x, y, color);
 800162a:	2320      	movs	r3, #32
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	230f      	movs	r3, #15
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	7819      	ldrb	r1, [r3, #0]
 8001636:	240e      	movs	r4, #14
 8001638:	193b      	adds	r3, r7, r4
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff fd89 	bl	8001154 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001642:	0021      	movs	r1, r4
 8001644:	187b      	adds	r3, r7, r1
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	187b      	adds	r3, r7, r1
 800164a:	3201      	adds	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	210e      	movs	r1, #14
 8001650:	187a      	adds	r2, r7, r1
 8001652:	230c      	movs	r3, #12
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d804      	bhi.n	8001668 <ssd1306_FillRectangle+0xe0>
 800165e:	187b      	adds	r3, r7, r1
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	dae0      	bge.n	800162a <ssd1306_FillRectangle+0xa2>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001668:	210f      	movs	r1, #15
 800166a:	187b      	adds	r3, r7, r1
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	187b      	adds	r3, r7, r1
 8001670:	3201      	adds	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	210f      	movs	r1, #15
 8001676:	187a      	adds	r2, r7, r1
 8001678:	230a      	movs	r3, #10
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d804      	bhi.n	800168e <ssd1306_FillRectangle+0x106>
 8001684:	187b      	adds	r3, r7, r1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b3f      	cmp	r3, #63	; 0x3f
 800168a:	d9c7      	bls.n	800161c <ssd1306_FillRectangle+0x94>
        }
    }
    return;
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46c0      	nop			; (mov r8, r8)
}
 8001690:	46bd      	mov	sp, r7
 8001692:	b004      	add	sp, #16
 8001694:	bdb0      	pop	{r4, r5, r7, pc}

08001696 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	0002      	movs	r2, r0
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80016a2:	210f      	movs	r1, #15
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2281      	movs	r2, #129	; 0x81
 80016a8:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff fc68 	bl	8000f84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff fc63 	bl	8000f84 <ssd1306_WriteCommand>
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	0002      	movs	r2, r0
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80016dc:	230f      	movs	r3, #15
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	22af      	movs	r2, #175	; 0xaf
 80016e2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <ssd1306_SetDisplayOn+0x48>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	715a      	strb	r2, [r3, #5]
 80016ea:	e006      	b.n	80016fa <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80016ec:	230f      	movs	r3, #15
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	22ae      	movs	r2, #174	; 0xae
 80016f2:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <ssd1306_SetDisplayOn+0x48>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016fa:	230f      	movs	r3, #15
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fc3f 	bl	8000f84 <ssd1306_WriteCommand>
}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b004      	add	sp, #16
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	200005cc 	.word	0x200005cc

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_MspInit+0x24>)
 800171a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_MspInit+0x24>)
 800171e:	2101      	movs	r1, #1
 8001720:	430a      	orrs	r2, r1
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_MspInit+0x24>)
 8001726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <HAL_MspInit+0x24>)
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0549      	lsls	r1, r1, #21
 800172e:	430a      	orrs	r2, r1
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	240c      	movs	r4, #12
 8001746:	193b      	adds	r3, r7, r4
 8001748:	0018      	movs	r0, r3
 800174a:	2314      	movs	r3, #20
 800174c:	001a      	movs	r2, r3
 800174e:	2100      	movs	r1, #0
 8001750:	f003 f9e2 	bl	8004b18 <memset>
  if(hadc->Instance==ADC1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a14      	ldr	r2, [pc, #80]	; (80017ac <HAL_ADC_MspInit+0x70>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d122      	bne.n	80017a4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_ADC_MspInit+0x74>)
 8001760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <HAL_ADC_MspInit+0x74>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0089      	lsls	r1, r1, #2
 8001768:	430a      	orrs	r2, r1
 800176a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <HAL_ADC_MspInit+0x74>)
 800176e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_ADC_MspInit+0x74>)
 8001772:	2101      	movs	r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
 8001778:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <HAL_ADC_MspInit+0x74>)
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001784:	193b      	adds	r3, r7, r4
 8001786:	2203      	movs	r2, #3
 8001788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2203      	movs	r2, #3
 800178e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	193b      	adds	r3, r7, r4
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	193a      	adds	r2, r7, r4
 8001798:	23a0      	movs	r3, #160	; 0xa0
 800179a:	05db      	lsls	r3, r3, #23
 800179c:	0011      	movs	r1, r2
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fd3c 	bl	800221c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b009      	add	sp, #36	; 0x24
 80017aa:	bd90      	pop	{r4, r7, pc}
 80017ac:	40012400 	.word	0x40012400
 80017b0:	40021000 	.word	0x40021000

080017b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	240c      	movs	r4, #12
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	0018      	movs	r0, r3
 80017c2:	2314      	movs	r3, #20
 80017c4:	001a      	movs	r2, r3
 80017c6:	2100      	movs	r1, #0
 80017c8:	f003 f9a6 	bl	8004b18 <memset>
  if(hi2c->Instance==I2C1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a18      	ldr	r2, [pc, #96]	; (8001834 <HAL_I2C_MspInit+0x80>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d129      	bne.n	800182a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_I2C_MspInit+0x84>)
 80017d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_I2C_MspInit+0x84>)
 80017dc:	2102      	movs	r1, #2
 80017de:	430a      	orrs	r2, r1
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_I2C_MspInit+0x84>)
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	22c0      	movs	r2, #192	; 0xc0
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f6:	0021      	movs	r1, r4
 80017f8:	187b      	adds	r3, r7, r1
 80017fa:	2212      	movs	r2, #18
 80017fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	187b      	adds	r3, r7, r1
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	187b      	adds	r3, r7, r1
 8001806:	2203      	movs	r2, #3
 8001808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800180a:	187b      	adds	r3, r7, r1
 800180c:	2204      	movs	r2, #4
 800180e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	187b      	adds	r3, r7, r1
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_I2C_MspInit+0x88>)
 8001814:	0019      	movs	r1, r3
 8001816:	0010      	movs	r0, r2
 8001818:	f000 fd00 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_I2C_MspInit+0x84>)
 800181e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_I2C_MspInit+0x84>)
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0389      	lsls	r1, r1, #14
 8001826:	430a      	orrs	r2, r1
 8001828:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b009      	add	sp, #36	; 0x24
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40005400 	.word	0x40005400
 8001838:	40021000 	.word	0x40021000
 800183c:	50000400 	.word	0x50000400

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	240c      	movs	r4, #12
 800184a:	193b      	adds	r3, r7, r4
 800184c:	0018      	movs	r0, r3
 800184e:	2314      	movs	r3, #20
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f003 f960 	bl	8004b18 <memset>
  if(huart->Instance==USART2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <HAL_UART_MspInit+0x80>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d129      	bne.n	80018b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_UART_MspInit+0x84>)
 8001864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_UART_MspInit+0x84>)
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0289      	lsls	r1, r1, #10
 800186c:	430a      	orrs	r2, r1
 800186e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_UART_MspInit+0x84>)
 8001872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_UART_MspInit+0x84>)
 8001876:	2101      	movs	r1, #1
 8001878:	430a      	orrs	r2, r1
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x84>)
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2201      	movs	r2, #1
 8001882:	4013      	ands	r3, r2
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001888:	0021      	movs	r1, r4
 800188a:	187b      	adds	r3, r7, r1
 800188c:	220c      	movs	r2, #12
 800188e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2202      	movs	r2, #2
 8001894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2203      	movs	r2, #3
 80018a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	2204      	movs	r2, #4
 80018a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	187a      	adds	r2, r7, r1
 80018aa:	23a0      	movs	r3, #160	; 0xa0
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f000 fcb3 	bl	800221c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b009      	add	sp, #36	; 0x24
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40021000 	.word	0x40021000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ec:	f000 f944 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f0:	46c0      	nop			; (mov r8, r8)
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
  return 1;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_kill>:

int _kill(int pid, int sig)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190c:	f003 f95a 	bl	8004bc4 <__errno>
 8001910:	0003      	movs	r3, r0
 8001912:	2216      	movs	r2, #22
 8001914:	601a      	str	r2, [r3, #0]
  return -1;
 8001916:	2301      	movs	r3, #1
 8001918:	425b      	negs	r3, r3
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	b002      	add	sp, #8
 8001920:	bd80      	pop	{r7, pc}

08001922 <_exit>:

void _exit (int status)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192a:	2301      	movs	r3, #1
 800192c:	425a      	negs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0011      	movs	r1, r2
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff ffe5 	bl	8001902 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001938:	e7fe      	b.n	8001938 <_exit+0x16>

0800193a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00a      	b.n	8001962 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194c:	e000      	b.n	8001950 <_read+0x16>
 800194e:	bf00      	nop
 8001950:	0001      	movs	r1, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	60ba      	str	r2, [r7, #8]
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	dbf0      	blt.n	800194c <_read+0x12>
  }

  return len;
 800196a:	687b      	ldr	r3, [r7, #4]
}
 800196c:	0018      	movs	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	b006      	add	sp, #24
 8001972:	bd80      	pop	{r7, pc}

08001974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e009      	b.n	800199a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	e000      	b.n	8001994 <_write+0x20>
 8001992:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbf1      	blt.n	8001986 <_write+0x12>
  }
  return len;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b006      	add	sp, #24
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_close>:

int _close(int file)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	425b      	negs	r3, r3
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	0192      	lsls	r2, r2, #6
 80019d0:	605a      	str	r2, [r3, #4]
  return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b002      	add	sp, #8
 80019da:	bd80      	pop	{r7, pc}

080019dc <_isatty>:

int _isatty(int file)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <_sbrk+0x5c>)
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <_sbrk+0x60>)
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <_sbrk+0x64>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d102      	bne.n	8001a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <_sbrk+0x64>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <_sbrk+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <_sbrk+0x64>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	18d3      	adds	r3, r2, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d207      	bcs.n	8001a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a34:	f003 f8c6 	bl	8004bc4 <__errno>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	220c      	movs	r2, #12
 8001a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	425b      	negs	r3, r3
 8001a42:	e009      	b.n	8001a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	18d2      	adds	r2, r2, r3
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <_sbrk+0x64>)
 8001a54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b006      	add	sp, #24
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20005000 	.word	0x20005000
 8001a64:	00000400 	.word	0x00000400
 8001a68:	200005d4 	.word	0x200005d4
 8001a6c:	20000728 	.word	0x20000728

08001a70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001a7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a80:	f7ff fff6 	bl	8001a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a86:	490d      	ldr	r1, [pc, #52]	; (8001abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <LoopForever+0xe>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a9c:	4c0a      	ldr	r4, [pc, #40]	; (8001ac8 <LoopForever+0x16>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f003 f891 	bl	8004bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aae:	f7fe fdef 	bl	8000690 <main>

08001ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
   ldr   r0, =_estack
 8001ab4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ac0:	08006794 	.word	0x08006794
  ldr r2, =_sbss
 8001ac4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ac8:	20000728 	.word	0x20000728

08001acc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_COMP_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad6:	1dfb      	adds	r3, r7, #7
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_Init+0x3c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Init+0x3c>)
 8001ae2:	2140      	movs	r1, #64	; 0x40
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f811 	bl	8001b10 <HAL_InitTick>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d003      	beq.n	8001afa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001af2:	1dfb      	adds	r3, r7, #7
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e001      	b.n	8001afe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001afa:	f7ff fe0b 	bl	8001714 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001afe:	1dfb      	adds	r3, r7, #7
 8001b00:	781b      	ldrb	r3, [r3, #0]
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	40022000 	.word	0x40022000

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_InitTick+0x5c>)
 8001b1a:	681c      	ldr	r4, [r3, #0]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_InitTick+0x60>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	0019      	movs	r1, r3
 8001b22:	23fa      	movs	r3, #250	; 0xfa
 8001b24:	0098      	lsls	r0, r3, #2
 8001b26:	f7fe faf9 	bl	800011c <__udivsi3>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	0020      	movs	r0, r4
 8001b30:	f7fe faf4 	bl	800011c <__udivsi3>
 8001b34:	0003      	movs	r3, r0
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 fb63 	bl	8002202 <HAL_SYSTICK_Config>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e00f      	b.n	8001b64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d80b      	bhi.n	8001b62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	425b      	negs	r3, r3
 8001b50:	2200      	movs	r2, #0
 8001b52:	0018      	movs	r0, r3
 8001b54:	f000 fb30 	bl	80021b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_InitTick+0x64>)
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b003      	add	sp, #12
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000010 	.word	0x20000010
 8001b74:	2000000c 	.word	0x2000000c

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_IncTick+0x1c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	001a      	movs	r2, r3
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_IncTick+0x20>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	18d2      	adds	r2, r2, r3
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_IncTick+0x20>)
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	20000010 	.word	0x20000010
 8001b98:	200005d8 	.word	0x200005d8

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b02      	ldr	r3, [pc, #8]	; (8001bac <HAL_GetTick+0x10>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	46c0      	nop			; (mov r8, r8)
 8001bac:	200005d8 	.word	0x200005d8

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	001a      	movs	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	f7ff ffe0 	bl	8001b9c <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	46bd      	mov	sp, r7
 8001bee:	b004      	add	sp, #16
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	20000010 	.word	0x20000010

08001bf8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e159      	b.n	8001ebe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10a      	bne.n	8001c28 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2250      	movs	r2, #80	; 0x50
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f7ff fd8a 	bl	800173c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d005      	beq.n	8001c40 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001c3e:	d00b      	beq.n	8001c58 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	2210      	movs	r2, #16
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2250      	movs	r2, #80	; 0x50
 8001c50:	2100      	movs	r1, #0
 8001c52:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e132      	b.n	8001ebe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5c:	4a9a      	ldr	r2, [pc, #616]	; (8001ec8 <HAL_ADC_Init+0x2d0>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2202      	movs	r2, #2
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d108      	bne.n	8001c88 <HAL_ADC_Init+0x90>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_Init+0x90>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_ADC_Init+0x92>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d149      	bne.n	8001d22 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d00b      	beq.n	8001cb2 <HAL_ADC_Init+0xba>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	05db      	lsls	r3, r3, #23
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d005      	beq.n	8001cb2 <HAL_ADC_Init+0xba>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d111      	bne.n	8001cd6 <HAL_ADC_Init+0xde>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	0892      	lsrs	r2, r2, #2
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6919      	ldr	r1, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	e014      	b.n	8001d00 <HAL_ADC_Init+0x108>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	0892      	lsrs	r2, r2, #2
 8001ce4:	611a      	str	r2, [r3, #16]
 8001ce6:	4b79      	ldr	r3, [pc, #484]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b78      	ldr	r3, [pc, #480]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001cec:	4978      	ldr	r1, [pc, #480]	; (8001ed0 <HAL_ADC_Init+0x2d8>)
 8001cee:	400a      	ands	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	4b76      	ldr	r3, [pc, #472]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001cf4:	6819      	ldr	r1, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4b74      	ldr	r3, [pc, #464]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2118      	movs	r1, #24
 8001d0c:	438a      	bics	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68d9      	ldr	r1, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001d28:	496a      	ldr	r1, [pc, #424]	; (8001ed4 <HAL_ADC_Init+0x2dc>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001d2e:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	065a      	lsls	r2, r3, #25
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <HAL_ADC_Init+0x2d4>)
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d108      	bne.n	8001d5e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2180      	movs	r1, #128	; 0x80
 8001d58:	0549      	lsls	r1, r1, #21
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	495b      	ldr	r1, [pc, #364]	; (8001ed8 <HAL_ADC_Init+0x2e0>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68d9      	ldr	r1, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d101      	bne.n	8001d84 <HAL_ADC_Init+0x18c>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e000      	b.n	8001d86 <HAL_ADC_Init+0x18e>
 8001d84:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001d86:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2020      	movs	r0, #32
 8001d8c:	5c1b      	ldrb	r3, [r3, r0]
 8001d8e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001d90:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	202c      	movs	r0, #44	; 0x2c
 8001d96:	5c1b      	ldrb	r3, [r3, r0]
 8001d98:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d9a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001da0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001da8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001db0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	23c2      	movs	r3, #194	; 0xc2
 8001dc0:	33ff      	adds	r3, #255	; 0xff
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d00b      	beq.n	8001dde <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68d9      	ldr	r1, [r3, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2221      	movs	r2, #33	; 0x21
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d11a      	bne.n	8001e1e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2220      	movs	r2, #32
 8001dec:	5c9b      	ldrb	r3, [r3, r2]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0249      	lsls	r1, r1, #9
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	e00b      	b.n	8001e1e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	2201      	movs	r2, #1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d11f      	bne.n	8001e66 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	492a      	ldr	r1, [pc, #168]	; (8001edc <HAL_ADC_Init+0x2e4>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6919      	ldr	r1, [r3, #16]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e44:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001e4a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2101      	movs	r1, #1
 8001e60:	430a      	orrs	r2, r1
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	e00e      	b.n	8001e84 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2101      	movs	r1, #1
 8001e80:	438a      	bics	r2, r1
 8001e82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2107      	movs	r1, #7
 8001e90:	438a      	bics	r2, r1
 8001e92:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6959      	ldr	r1, [r3, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	fffffefd 	.word	0xfffffefd
 8001ecc:	40012708 	.word	0x40012708
 8001ed0:	ffc3ffff 	.word	0xffc3ffff
 8001ed4:	fdffffff 	.word	0xfdffffff
 8001ed8:	fffe0219 	.word	0xfffe0219
 8001edc:	fffffc03 	.word	0xfffffc03

08001ee0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2250      	movs	r2, #80	; 0x50
 8001eee:	5c9b      	ldrb	r3, [r3, r2]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x18>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e085      	b.n	8002004 <HAL_ADC_ConfigChannel+0x124>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2250      	movs	r2, #80	; 0x50
 8001efc:	2101      	movs	r1, #1
 8001efe:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2204      	movs	r2, #4
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d00b      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	2220      	movs	r2, #32
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2250      	movs	r2, #80	; 0x50
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e06f      	b.n	8002004 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a38      	ldr	r2, [pc, #224]	; (800200c <HAL_ADC_ConfigChannel+0x12c>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d035      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	035b      	lsls	r3, r3, #13
 8001f3a:	0b5a      	lsrs	r2, r3, #13
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	02db      	lsls	r3, r3, #11
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0409      	lsls	r1, r1, #16
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f000 f85e 	bl	8002020 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	029b      	lsls	r3, r3, #10
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d006      	beq.n	8001f7e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001f70:	4b27      	ldr	r3, [pc, #156]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	03c9      	lsls	r1, r1, #15
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	025b      	lsls	r3, r3, #9
 8001f86:	4013      	ands	r3, r2
 8001f88:	d037      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001f8a:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0449      	lsls	r1, r1, #17
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e02f      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	035b      	lsls	r3, r3, #13
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	43d9      	mvns	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	400a      	ands	r2, r1
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	02db      	lsls	r3, r3, #11
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d005      	beq.n	8001fca <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001fbe:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001fc4:	4913      	ldr	r1, [pc, #76]	; (8002014 <HAL_ADC_ConfigChannel+0x134>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	029b      	lsls	r3, r3, #10
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d005      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001fdc:	490e      	ldr	r1, [pc, #56]	; (8002018 <HAL_ADC_ConfigChannel+0x138>)
 8001fde:	400a      	ands	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	025b      	lsls	r3, r3, #9
 8001fea:	4013      	ands	r3, r2
 8001fec:	d005      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_ADC_ConfigChannel+0x130>)
 8001ff4:	4909      	ldr	r1, [pc, #36]	; (800201c <HAL_ADC_ConfigChannel+0x13c>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2250      	movs	r2, #80	; 0x50
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}
 800200c:	00001001 	.word	0x00001001
 8002010:	40012708 	.word	0x40012708
 8002014:	ff7fffff 	.word	0xff7fffff
 8002018:	ffbfffff 	.word	0xffbfffff
 800201c:	feffffff 	.word	0xfeffffff

08002020 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002028:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <ADC_DelayMicroSecond+0x38>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	490b      	ldr	r1, [pc, #44]	; (800205c <ADC_DelayMicroSecond+0x3c>)
 800202e:	0018      	movs	r0, r3
 8002030:	f7fe f874 	bl	800011c <__udivsi3>
 8002034:	0003      	movs	r3, r0
 8002036:	001a      	movs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4353      	muls	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800203e:	e002      	b.n	8002046 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3b01      	subs	r3, #1
 8002044:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f9      	bne.n	8002040 <ADC_DelayMicroSecond+0x20>
  }
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	20000008 	.word	0x20000008
 800205c:	000f4240 	.word	0x000f4240

08002060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	0002      	movs	r2, r0
 8002068:	1dfb      	adds	r3, r7, #7
 800206a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800206c:	1dfb      	adds	r3, r7, #7
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b7f      	cmp	r3, #127	; 0x7f
 8002072:	d809      	bhi.n	8002088 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	001a      	movs	r2, r3
 800207a:	231f      	movs	r3, #31
 800207c:	401a      	ands	r2, r3
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <__NVIC_EnableIRQ+0x30>)
 8002080:	2101      	movs	r1, #1
 8002082:	4091      	lsls	r1, r2
 8002084:	000a      	movs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
  }
}
 8002088:	46c0      	nop			; (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}
 8002090:	e000e100 	.word	0xe000e100

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	0002      	movs	r2, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	1dfb      	adds	r3, r7, #7
 80020a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b7f      	cmp	r3, #127	; 0x7f
 80020a8:	d828      	bhi.n	80020fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020aa:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <__NVIC_SetPriority+0xd4>)
 80020ac:	1dfb      	adds	r3, r7, #7
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	089b      	lsrs	r3, r3, #2
 80020b4:	33c0      	adds	r3, #192	; 0xc0
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	589b      	ldr	r3, [r3, r2]
 80020ba:	1dfa      	adds	r2, r7, #7
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	0011      	movs	r1, r2
 80020c0:	2203      	movs	r2, #3
 80020c2:	400a      	ands	r2, r1
 80020c4:	00d2      	lsls	r2, r2, #3
 80020c6:	21ff      	movs	r1, #255	; 0xff
 80020c8:	4091      	lsls	r1, r2
 80020ca:	000a      	movs	r2, r1
 80020cc:	43d2      	mvns	r2, r2
 80020ce:	401a      	ands	r2, r3
 80020d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	019b      	lsls	r3, r3, #6
 80020d6:	22ff      	movs	r2, #255	; 0xff
 80020d8:	401a      	ands	r2, r3
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	0018      	movs	r0, r3
 80020e0:	2303      	movs	r3, #3
 80020e2:	4003      	ands	r3, r0
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e8:	481f      	ldr	r0, [pc, #124]	; (8002168 <__NVIC_SetPriority+0xd4>)
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	430a      	orrs	r2, r1
 80020f4:	33c0      	adds	r3, #192	; 0xc0
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020fa:	e031      	b.n	8002160 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fc:	4a1b      	ldr	r2, [pc, #108]	; (800216c <__NVIC_SetPriority+0xd8>)
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	0019      	movs	r1, r3
 8002104:	230f      	movs	r3, #15
 8002106:	400b      	ands	r3, r1
 8002108:	3b08      	subs	r3, #8
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3306      	adds	r3, #6
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	18d3      	adds	r3, r2, r3
 8002112:	3304      	adds	r3, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	1dfa      	adds	r2, r7, #7
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	0011      	movs	r1, r2
 800211c:	2203      	movs	r2, #3
 800211e:	400a      	ands	r2, r1
 8002120:	00d2      	lsls	r2, r2, #3
 8002122:	21ff      	movs	r1, #255	; 0xff
 8002124:	4091      	lsls	r1, r2
 8002126:	000a      	movs	r2, r1
 8002128:	43d2      	mvns	r2, r2
 800212a:	401a      	ands	r2, r3
 800212c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	22ff      	movs	r2, #255	; 0xff
 8002134:	401a      	ands	r2, r3
 8002136:	1dfb      	adds	r3, r7, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	0018      	movs	r0, r3
 800213c:	2303      	movs	r3, #3
 800213e:	4003      	ands	r3, r0
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002144:	4809      	ldr	r0, [pc, #36]	; (800216c <__NVIC_SetPriority+0xd8>)
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	001c      	movs	r4, r3
 800214c:	230f      	movs	r3, #15
 800214e:	4023      	ands	r3, r4
 8002150:	3b08      	subs	r3, #8
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	430a      	orrs	r2, r1
 8002156:	3306      	adds	r3, #6
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	18c3      	adds	r3, r0, r3
 800215c:	3304      	adds	r3, #4
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b003      	add	sp, #12
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	1e5a      	subs	r2, r3, #1
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	045b      	lsls	r3, r3, #17
 8002180:	429a      	cmp	r2, r3
 8002182:	d301      	bcc.n	8002188 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002184:	2301      	movs	r3, #1
 8002186:	e010      	b.n	80021aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <SysTick_Config+0x44>)
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	3a01      	subs	r2, #1
 800218e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002190:	2301      	movs	r3, #1
 8002192:	425b      	negs	r3, r3
 8002194:	2103      	movs	r1, #3
 8002196:	0018      	movs	r0, r3
 8002198:	f7ff ff7c 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <SysTick_Config+0x44>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021a2:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SysTick_Config+0x44>)
 80021a4:	2207      	movs	r2, #7
 80021a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	e000e010 	.word	0xe000e010

080021b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	210f      	movs	r1, #15
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	1c02      	adds	r2, r0, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	0011      	movs	r1, r2
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff ff5d 	bl	8002094 <__NVIC_SetPriority>
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	0002      	movs	r2, r0
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ff33 	bl	8002060 <__NVIC_EnableIRQ>
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	0018      	movs	r0, r3
 800220e:	f7ff ffaf 	bl	8002170 <SysTick_Config>
 8002212:	0003      	movs	r3, r0
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	b002      	add	sp, #8
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002232:	e155      	b.n	80024e0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4091      	lsls	r1, r2
 800223e:	000a      	movs	r2, r1
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d100      	bne.n	800224c <HAL_GPIO_Init+0x30>
 800224a:	e146      	b.n	80024da <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2203      	movs	r2, #3
 8002252:	4013      	ands	r3, r2
 8002254:	2b01      	cmp	r3, #1
 8002256:	d005      	beq.n	8002264 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002260:	2b02      	cmp	r3, #2
 8002262:	d130      	bne.n	80022c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2203      	movs	r2, #3
 8002270:	409a      	lsls	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	43da      	mvns	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	0013      	movs	r3, r2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229a:	2201      	movs	r2, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
 80022a0:	0013      	movs	r3, r2
 80022a2:	43da      	mvns	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4013      	ands	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	2201      	movs	r2, #1
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
 80022b8:	0013      	movs	r3, r2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d017      	beq.n	8002302 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	409a      	lsls	r2, r3
 80022e0:	0013      	movs	r3, r2
 80022e2:	43da      	mvns	r2, r3
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	409a      	lsls	r2, r3
 80022f4:	0013      	movs	r3, r2
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2203      	movs	r2, #3
 8002308:	4013      	ands	r3, r2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d123      	bne.n	8002356 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	0092      	lsls	r2, r2, #2
 8002318:	58d3      	ldr	r3, [r2, r3]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2207      	movs	r2, #7
 8002320:	4013      	ands	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	220f      	movs	r2, #15
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	43da      	mvns	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2107      	movs	r1, #7
 800233a:	400b      	ands	r3, r1
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	409a      	lsls	r2, r3
 8002340:	0013      	movs	r3, r2
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	6939      	ldr	r1, [r7, #16]
 8002354:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	409a      	lsls	r2, r3
 8002364:	0013      	movs	r3, r2
 8002366:	43da      	mvns	r2, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	401a      	ands	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	409a      	lsls	r2, r3
 800237c:	0013      	movs	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	029b      	lsls	r3, r3, #10
 8002392:	4013      	ands	r3, r2
 8002394:	d100      	bne.n	8002398 <HAL_GPIO_Init+0x17c>
 8002396:	e0a0      	b.n	80024da <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002398:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <HAL_GPIO_Init+0x2dc>)
 800239a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239c:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_GPIO_Init+0x2dc>)
 800239e:	2101      	movs	r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a4:	4a55      	ldr	r2, [pc, #340]	; (80024fc <HAL_GPIO_Init+0x2e0>)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	589b      	ldr	r3, [r3, r2]
 80023b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2203      	movs	r2, #3
 80023b6:	4013      	ands	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	409a      	lsls	r2, r3
 80023be:	0013      	movs	r3, r2
 80023c0:	43da      	mvns	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	23a0      	movs	r3, #160	; 0xa0
 80023cc:	05db      	lsls	r3, r3, #23
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d01f      	beq.n	8002412 <HAL_GPIO_Init+0x1f6>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4a      	ldr	r2, [pc, #296]	; (8002500 <HAL_GPIO_Init+0x2e4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d019      	beq.n	800240e <HAL_GPIO_Init+0x1f2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a49      	ldr	r2, [pc, #292]	; (8002504 <HAL_GPIO_Init+0x2e8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0x1ee>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a48      	ldr	r2, [pc, #288]	; (8002508 <HAL_GPIO_Init+0x2ec>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00d      	beq.n	8002406 <HAL_GPIO_Init+0x1ea>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a47      	ldr	r2, [pc, #284]	; (800250c <HAL_GPIO_Init+0x2f0>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <HAL_GPIO_Init+0x1e6>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a46      	ldr	r2, [pc, #280]	; (8002510 <HAL_GPIO_Init+0x2f4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_GPIO_Init+0x1e2>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x1f8>
 80023fe:	2306      	movs	r3, #6
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x1f8>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x1f8>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x1f8>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x1f8>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x1f8>
 8002412:	2300      	movs	r3, #0
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	2103      	movs	r1, #3
 8002418:	400a      	ands	r2, r1
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x2e0>)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	43da      	mvns	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	035b      	lsls	r3, r3, #13
 800244a:	4013      	ands	r3, r2
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43da      	mvns	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4013      	ands	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	039b      	lsls	r3, r3, #14
 8002474:	4013      	ands	r3, r2
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002486:	4b23      	ldr	r3, [pc, #140]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43da      	mvns	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	029b      	lsls	r3, r3, #10
 800249e:	4013      	ands	r3, r2
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	025b      	lsls	r3, r3, #9
 80024c8:	4013      	ands	r3, r2
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_GPIO_Init+0x2f8>)
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	40da      	lsrs	r2, r3
 80024e8:	1e13      	subs	r3, r2, #0
 80024ea:	d000      	beq.n	80024ee <HAL_GPIO_Init+0x2d2>
 80024ec:	e6a2      	b.n	8002234 <HAL_GPIO_Init+0x18>
  }
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46c0      	nop			; (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b006      	add	sp, #24
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	50000400 	.word	0x50000400
 8002504:	50000800 	.word	0x50000800
 8002508:	50000c00 	.word	0x50000c00
 800250c:	50001000 	.word	0x50001000
 8002510:	50001c00 	.word	0x50001c00
 8002514:	40010400 	.word	0x40010400

08002518 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	0008      	movs	r0, r1
 8002522:	0011      	movs	r1, r2
 8002524:	1cbb      	adds	r3, r7, #2
 8002526:	1c02      	adds	r2, r0, #0
 8002528:	801a      	strh	r2, [r3, #0]
 800252a:	1c7b      	adds	r3, r7, #1
 800252c:	1c0a      	adds	r2, r1, #0
 800252e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002530:	1c7b      	adds	r3, r7, #1
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d004      	beq.n	8002542 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002538:	1cbb      	adds	r3, r7, #2
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002542:	1cbb      	adds	r3, r7, #2
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e082      	b.n	800266c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2241      	movs	r2, #65	; 0x41
 800256a:	5c9b      	ldrb	r3, [r3, r2]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d107      	bne.n	8002582 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2240      	movs	r2, #64	; 0x40
 8002576:	2100      	movs	r1, #0
 8002578:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff f919 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2241      	movs	r2, #65	; 0x41
 8002586:	2124      	movs	r1, #36	; 0x24
 8002588:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2101      	movs	r1, #1
 8002596:	438a      	bics	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4934      	ldr	r1, [pc, #208]	; (8002674 <HAL_I2C_Init+0x120>)
 80025a4:	400a      	ands	r2, r1
 80025a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4931      	ldr	r1, [pc, #196]	; (8002678 <HAL_I2C_Init+0x124>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d108      	bne.n	80025d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	0209      	lsls	r1, r1, #8
 80025cc:	430a      	orrs	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	e007      	b.n	80025e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2184      	movs	r1, #132	; 0x84
 80025dc:	0209      	lsls	r1, r1, #8
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d104      	bne.n	80025f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	491f      	ldr	r1, [pc, #124]	; (800267c <HAL_I2C_Init+0x128>)
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	491a      	ldr	r1, [pc, #104]	; (8002678 <HAL_I2C_Init+0x124>)
 8002610:	400a      	ands	r2, r1
 8002612:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	431a      	orrs	r2, r3
 800261e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69d9      	ldr	r1, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2241      	movs	r2, #65	; 0x41
 8002658:	2120      	movs	r1, #32
 800265a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2242      	movs	r2, #66	; 0x42
 8002666:	2100      	movs	r1, #0
 8002668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}
 8002674:	f0ffffff 	.word	0xf0ffffff
 8002678:	ffff7fff 	.word	0xffff7fff
 800267c:	02008000 	.word	0x02008000

08002680 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	000c      	movs	r4, r1
 800268a:	0010      	movs	r0, r2
 800268c:	0019      	movs	r1, r3
 800268e:	230a      	movs	r3, #10
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	1c22      	adds	r2, r4, #0
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	2308      	movs	r3, #8
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	1c02      	adds	r2, r0, #0
 800269c:	801a      	strh	r2, [r3, #0]
 800269e:	1dbb      	adds	r3, r7, #6
 80026a0:	1c0a      	adds	r2, r1, #0
 80026a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2241      	movs	r2, #65	; 0x41
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d000      	beq.n	80026b2 <HAL_I2C_Mem_Write+0x32>
 80026b0:	e10c      	b.n	80028cc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_I2C_Mem_Write+0x42>
 80026b8:	232c      	movs	r3, #44	; 0x2c
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d105      	bne.n	80026ce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	0092      	lsls	r2, r2, #2
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0ff      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2240      	movs	r2, #64	; 0x40
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_I2C_Mem_Write+0x5c>
 80026d8:	2302      	movs	r3, #2
 80026da:	e0f8      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2240      	movs	r2, #64	; 0x40
 80026e0:	2101      	movs	r1, #1
 80026e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026e4:	f7ff fa5a 	bl	8001b9c <HAL_GetTick>
 80026e8:	0003      	movs	r3, r0
 80026ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	0219      	lsls	r1, r3, #8
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2319      	movs	r3, #25
 80026f8:	2201      	movs	r2, #1
 80026fa:	f000 f975 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0e3      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2241      	movs	r2, #65	; 0x41
 800270a:	2121      	movs	r1, #33	; 0x21
 800270c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2242      	movs	r2, #66	; 0x42
 8002712:	2140      	movs	r1, #64	; 0x40
 8002714:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	222c      	movs	r2, #44	; 0x2c
 8002726:	18ba      	adds	r2, r7, r2
 8002728:	8812      	ldrh	r2, [r2, #0]
 800272a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002732:	1dbb      	adds	r3, r7, #6
 8002734:	881c      	ldrh	r4, [r3, #0]
 8002736:	2308      	movs	r3, #8
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	230a      	movs	r3, #10
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	8819      	ldrh	r1, [r3, #0]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	0023      	movs	r3, r4
 800274e:	f000 f8c5 	bl	80028dc <I2C_RequestMemoryWrite>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d005      	beq.n	8002762 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e0b5      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	2bff      	cmp	r3, #255	; 0xff
 800276a:	d911      	bls.n	8002790 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	22ff      	movs	r2, #255	; 0xff
 8002770:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	b2da      	uxtb	r2, r3
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	045c      	lsls	r4, r3, #17
 800277c:	230a      	movs	r3, #10
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	8819      	ldrh	r1, [r3, #0]
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	2300      	movs	r3, #0
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	0023      	movs	r3, r4
 800278a:	f000 fb05 	bl	8002d98 <I2C_TransferConfig>
 800278e:	e012      	b.n	80027b6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	049c      	lsls	r4, r3, #18
 80027a4:	230a      	movs	r3, #10
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	8819      	ldrh	r1, [r3, #0]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	2300      	movs	r3, #0
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	0023      	movs	r3, r4
 80027b2:	f000 faf1 	bl	8002d98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	0018      	movs	r0, r3
 80027be:	f000 f961 	bl	8002a84 <I2C_WaitOnTXISFlagUntilTimeout>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e081      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d03a      	beq.n	800287a <HAL_I2C_Mem_Write+0x1fa>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d136      	bne.n	800287a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	0013      	movs	r3, r2
 8002816:	2200      	movs	r2, #0
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	f000 f8e5 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d001      	beq.n	8002826 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e053      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	2bff      	cmp	r3, #255	; 0xff
 800282e:	d911      	bls.n	8002854 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283a:	b2da      	uxtb	r2, r3
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	045c      	lsls	r4, r3, #17
 8002840:	230a      	movs	r3, #10
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	8819      	ldrh	r1, [r3, #0]
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	2300      	movs	r3, #0
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	0023      	movs	r3, r4
 800284e:	f000 faa3 	bl	8002d98 <I2C_TransferConfig>
 8002852:	e012      	b.n	800287a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	b2da      	uxtb	r2, r3
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	049c      	lsls	r4, r3, #18
 8002868:	230a      	movs	r3, #10
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	8819      	ldrh	r1, [r3, #0]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	2300      	movs	r3, #0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	0023      	movs	r3, r4
 8002876:	f000 fa8f 	bl	8002d98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d198      	bne.n	80027b6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0018      	movs	r0, r3
 800288c:	f000 f940 	bl	8002b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002890:	1e03      	subs	r3, r0, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e01a      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2220      	movs	r2, #32
 800289e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	490b      	ldr	r1, [pc, #44]	; (80028d8 <HAL_I2C_Mem_Write+0x258>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2241      	movs	r2, #65	; 0x41
 80028b4:	2120      	movs	r1, #32
 80028b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2242      	movs	r2, #66	; 0x42
 80028bc:	2100      	movs	r1, #0
 80028be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	2100      	movs	r1, #0
 80028c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b007      	add	sp, #28
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	fe00e800 	.word	0xfe00e800

080028dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	000c      	movs	r4, r1
 80028e6:	0010      	movs	r0, r2
 80028e8:	0019      	movs	r1, r3
 80028ea:	250a      	movs	r5, #10
 80028ec:	197b      	adds	r3, r7, r5
 80028ee:	1c22      	adds	r2, r4, #0
 80028f0:	801a      	strh	r2, [r3, #0]
 80028f2:	2308      	movs	r3, #8
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	1c02      	adds	r2, r0, #0
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	1dbb      	adds	r3, r7, #6
 80028fc:	1c0a      	adds	r2, r1, #0
 80028fe:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002900:	1dbb      	adds	r3, r7, #6
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	045c      	lsls	r4, r3, #17
 800290a:	197b      	adds	r3, r7, r5
 800290c:	8819      	ldrh	r1, [r3, #0]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <I2C_RequestMemoryWrite+0xc4>)
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	0023      	movs	r3, r4
 8002916:	f000 fa3f 	bl	8002d98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	6a39      	ldr	r1, [r7, #32]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f8af 	bl	8002a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e033      	b.n	8002996 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800292e:	1dbb      	adds	r3, r7, #6
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002936:	2308      	movs	r3, #8
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
 8002944:	e019      	b.n	800297a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002946:	2308      	movs	r3, #8
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	b29b      	uxth	r3, r3
 8002950:	b2da      	uxtb	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800295a:	6a39      	ldr	r1, [r7, #32]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 f890 	bl	8002a84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002964:	1e03      	subs	r3, r0, #0
 8002966:	d001      	beq.n	800296c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e014      	b.n	8002996 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800296c:	2308      	movs	r3, #8
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	0013      	movs	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	f000 f82e 	bl	80029e8 <I2C_WaitOnFlagUntilTimeout>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bdb0      	pop	{r4, r5, r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	80002000 	.word	0x80002000

080029a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2202      	movs	r2, #2
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d103      	bne.n	80029c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2200      	movs	r2, #0
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d007      	beq.n	80029e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	430a      	orrs	r2, r1
 80029de:	619a      	str	r2, [r3, #24]
  }
}
 80029e0:	46c0      	nop			; (mov r8, r8)
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b002      	add	sp, #8
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f8:	e030      	b.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	d02d      	beq.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a00:	f7ff f8cc 	bl	8001b9c <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d302      	bcc.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d122      	bne.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	425a      	negs	r2, r3
 8002a26:	4153      	adcs	r3, r2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	001a      	movs	r2, r3
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d113      	bne.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	2220      	movs	r2, #32
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2241      	movs	r2, #65	; 0x41
 8002a44:	2120      	movs	r1, #32
 8002a46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2242      	movs	r2, #66	; 0x42
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e00f      	b.n	8002a7c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	4013      	ands	r3, r2
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	425a      	negs	r2, r3
 8002a6c:	4153      	adcs	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	001a      	movs	r2, r3
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d0bf      	beq.n	80029fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b004      	add	sp, #16
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a90:	e032      	b.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 f87d 	bl	8002b98 <I2C_IsErrorOccurred>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d001      	beq.n	8002aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e030      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	d025      	beq.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aac:	f7ff f876 	bl	8001b9c <HAL_GetTick>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d302      	bcc.n	8002ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11a      	bne.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d013      	beq.n	8002af8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2241      	movs	r2, #65	; 0x41
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2242      	movs	r2, #66	; 0x42
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2240      	movs	r2, #64	; 0x40
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d1c5      	bne.n	8002a92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	0018      	movs	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b004      	add	sp, #16
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	e02f      	b.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f837 	bl	8002b98 <I2C_IsErrorOccurred>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e02d      	b.n	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7ff f833 	bl	8001b9c <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d11a      	bne.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d013      	beq.n	8002b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2241      	movs	r2, #65	; 0x41
 8002b66:	2120      	movs	r1, #32
 8002b68:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2242      	movs	r2, #66	; 0x42
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2240      	movs	r2, #64	; 0x40
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2220      	movs	r2, #32
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d1c8      	bne.n	8002b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b004      	add	sp, #16
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b08b      	sub	sp, #44	; 0x2c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba4:	2327      	movs	r3, #39	; 0x27
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2210      	movs	r2, #16
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <I2C_IsErrorOccurred+0x2e>
 8002bc4:	e082      	b.n	8002ccc <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2210      	movs	r2, #16
 8002bcc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bce:	e060      	b.n	8002c92 <I2C_IsErrorOccurred+0xfa>
 8002bd0:	2427      	movs	r4, #39	; 0x27
 8002bd2:	193b      	adds	r3, r7, r4
 8002bd4:	193a      	adds	r2, r7, r4
 8002bd6:	7812      	ldrb	r2, [r2, #0]
 8002bd8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	d058      	beq.n	8002c92 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002be0:	f7fe ffdc 	bl	8001b9c <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d306      	bcc.n	8002bfe <I2C_IsErrorOccurred+0x66>
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	193a      	adds	r2, r7, r4
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d149      	bne.n	8002c92 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	01db      	lsls	r3, r3, #7
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c0c:	2013      	movs	r0, #19
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	2142      	movs	r1, #66	; 0x42
 8002c14:	5c52      	ldrb	r2, [r2, r1]
 8002c16:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	401a      	ands	r2, r3
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d126      	bne.n	8002c7a <I2C_IsErrorOccurred+0xe2>
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	01db      	lsls	r3, r3, #7
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d021      	beq.n	8002c7a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002c36:	183b      	adds	r3, r7, r0
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d01d      	beq.n	8002c7a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2180      	movs	r1, #128	; 0x80
 8002c4a:	01c9      	lsls	r1, r1, #7
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c50:	f7fe ffa4 	bl	8001b9c <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c58:	e00f      	b.n	8002c7a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c5a:	f7fe ff9f 	bl	8001b9c <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b19      	cmp	r3, #25
 8002c66:	d908      	bls.n	8002c7a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c70:	2327      	movs	r3, #39	; 0x27
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]

              break;
 8002c78:	e00b      	b.n	8002c92 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2220      	movs	r2, #32
 8002c82:	4013      	ands	r3, r2
 8002c84:	2127      	movs	r1, #39	; 0x27
 8002c86:	187a      	adds	r2, r7, r1
 8002c88:	1879      	adds	r1, r7, r1
 8002c8a:	7809      	ldrb	r1, [r1, #0]
 8002c8c:	7011      	strb	r1, [r2, #0]
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d1e3      	bne.n	8002c5a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d004      	beq.n	8002caa <I2C_IsErrorOccurred+0x112>
 8002ca0:	2327      	movs	r3, #39	; 0x27
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d092      	beq.n	8002bd0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002caa:	2327      	movs	r3, #39	; 0x27
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d103      	bne.n	8002cbc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cc4:	2327      	movs	r3, #39	; 0x27
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d00c      	beq.n	8002cf8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	0052      	lsls	r2, r2, #1
 8002cee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf0:	2327      	movs	r3, #39	; 0x27
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d00c      	beq.n	8002d1c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	2208      	movs	r2, #8
 8002d06:	4313      	orrs	r3, r2
 8002d08:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	00d2      	lsls	r2, r2, #3
 8002d12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d14:	2327      	movs	r3, #39	; 0x27
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d00c      	beq.n	8002d40 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	0092      	lsls	r2, r2, #2
 8002d36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d38:	2327      	movs	r3, #39	; 0x27
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002d40:	2327      	movs	r3, #39	; 0x27
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01d      	beq.n	8002d86 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f7ff fe29 	bl	80029a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	490d      	ldr	r1, [pc, #52]	; (8002d94 <I2C_IsErrorOccurred+0x1fc>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2241      	movs	r2, #65	; 0x41
 8002d72:	2120      	movs	r1, #32
 8002d74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2242      	movs	r2, #66	; 0x42
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2240      	movs	r2, #64	; 0x40
 8002d82:	2100      	movs	r1, #0
 8002d84:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002d86:	2327      	movs	r3, #39	; 0x27
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	781b      	ldrb	r3, [r3, #0]
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b00b      	add	sp, #44	; 0x2c
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	fe00e800 	.word	0xfe00e800

08002d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	0008      	movs	r0, r1
 8002da2:	0011      	movs	r1, r2
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	240a      	movs	r4, #10
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	1c02      	adds	r2, r0, #0
 8002dac:	801a      	strh	r2, [r3, #0]
 8002dae:	2009      	movs	r0, #9
 8002db0:	183b      	adds	r3, r7, r0
 8002db2:	1c0a      	adds	r2, r1, #0
 8002db4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002db6:	193b      	adds	r3, r7, r4
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	059b      	lsls	r3, r3, #22
 8002dbc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dbe:	183b      	adds	r3, r7, r0
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	0419      	lsls	r1, r3, #16
 8002dc4:	23ff      	movs	r3, #255	; 0xff
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de2:	0d51      	lsrs	r1, r2, #21
 8002de4:	2280      	movs	r2, #128	; 0x80
 8002de6:	00d2      	lsls	r2, r2, #3
 8002de8:	400a      	ands	r2, r1
 8002dea:	4907      	ldr	r1, [pc, #28]	; (8002e08 <I2C_TransferConfig+0x70>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	43d2      	mvns	r2, r2
 8002df0:	401a      	ands	r2, r3
 8002df2:	0011      	movs	r1, r2
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b007      	add	sp, #28
 8002e04:	bd90      	pop	{r4, r7, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	03ff63ff 	.word	0x03ff63ff

08002e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2241      	movs	r2, #65	; 0x41
 8002e1a:	5c9b      	ldrb	r3, [r3, r2]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d138      	bne.n	8002e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	5c9b      	ldrb	r3, [r3, r2]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e032      	b.n	8002e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2240      	movs	r2, #64	; 0x40
 8002e34:	2101      	movs	r1, #1
 8002e36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2241      	movs	r2, #65	; 0x41
 8002e3c:	2124      	movs	r1, #36	; 0x24
 8002e3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4911      	ldr	r1, [pc, #68]	; (8002ea0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2241      	movs	r2, #65	; 0x41
 8002e84:	2120      	movs	r1, #32
 8002e86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	ffffefff 	.word	0xffffefff

08002ea4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2241      	movs	r2, #65	; 0x41
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	d139      	bne.n	8002f2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2240      	movs	r2, #64	; 0x40
 8002ebe:	5c9b      	ldrb	r3, [r3, r2]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e033      	b.n	8002f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	2101      	movs	r1, #1
 8002ece:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2241      	movs	r2, #65	; 0x41
 8002ed4:	2124      	movs	r1, #36	; 0x24
 8002ed6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	430a      	orrs	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2241      	movs	r2, #65	; 0x41
 8002f1e:	2120      	movs	r1, #32
 8002f20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2240      	movs	r2, #64	; 0x40
 8002f26:	2100      	movs	r1, #0
 8002f28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b004      	add	sp, #16
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	fffff0ff 	.word	0xfffff0ff

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b5b0      	push	{r4, r5, r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f000 fbbf 	bl	80036ce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f50:	4bc9      	ldr	r3, [pc, #804]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	220c      	movs	r2, #12
 8002f56:	4013      	ands	r3, r2
 8002f58:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f5a:	4bc7      	ldr	r3, [pc, #796]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	025b      	lsls	r3, r3, #9
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d100      	bne.n	8002f72 <HAL_RCC_OscConfig+0x36>
 8002f70:	e07e      	b.n	8003070 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d007      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b0c      	cmp	r3, #12
 8002f7c:	d112      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x68>
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	025b      	lsls	r3, r3, #9
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d10d      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	4bbb      	ldr	r3, [pc, #748]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	029b      	lsls	r3, r3, #10
 8002f90:	4013      	ands	r3, r2
 8002f92:	d100      	bne.n	8002f96 <HAL_RCC_OscConfig+0x5a>
 8002f94:	e06b      	b.n	800306e <HAL_RCC_OscConfig+0x132>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d167      	bne.n	800306e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f000 fb95 	bl	80036ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	025b      	lsls	r3, r3, #9
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x84>
 8002fb0:	4bb1      	ldr	r3, [pc, #708]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4bb0      	ldr	r3, [pc, #704]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	0249      	lsls	r1, r1, #9
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	601a      	str	r2, [r3, #0]
 8002fbe:	e027      	b.n	8003010 <HAL_RCC_OscConfig+0xd4>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	23a0      	movs	r3, #160	; 0xa0
 8002fc6:	02db      	lsls	r3, r3, #11
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d10e      	bne.n	8002fea <HAL_RCC_OscConfig+0xae>
 8002fcc:	4baa      	ldr	r3, [pc, #680]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4ba9      	ldr	r3, [pc, #676]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	02c9      	lsls	r1, r1, #11
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	4ba7      	ldr	r3, [pc, #668]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4ba6      	ldr	r3, [pc, #664]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	0249      	lsls	r1, r1, #9
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e012      	b.n	8003010 <HAL_RCC_OscConfig+0xd4>
 8002fea:	4ba3      	ldr	r3, [pc, #652]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4ba2      	ldr	r3, [pc, #648]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002ff0:	49a2      	ldr	r1, [pc, #648]	; (800327c <HAL_RCC_OscConfig+0x340>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4ba0      	ldr	r3, [pc, #640]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	025b      	lsls	r3, r3, #9
 8002ffe:	4013      	ands	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4b9c      	ldr	r3, [pc, #624]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b9b      	ldr	r3, [pc, #620]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 800300a:	499d      	ldr	r1, [pc, #628]	; (8003280 <HAL_RCC_OscConfig+0x344>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fdc0 	bl	8001b9c <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003020:	e009      	b.n	8003036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003022:	f7fe fdbb 	bl	8001b9c <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d902      	bls.n	8003036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	f000 fb4c 	bl	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003036:	4b90      	ldr	r3, [pc, #576]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	029b      	lsls	r3, r3, #10
 800303e:	4013      	ands	r3, r2
 8003040:	d0ef      	beq.n	8003022 <HAL_RCC_OscConfig+0xe6>
 8003042:	e015      	b.n	8003070 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fdaa 	bl	8001b9c <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304e:	f7fe fda5 	bl	8001b9c <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	; 0x64
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e336      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003060:	4b85      	ldr	r3, [pc, #532]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	029b      	lsls	r3, r3, #10
 8003068:	4013      	ands	r3, r2
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x112>
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2202      	movs	r2, #2
 8003076:	4013      	ands	r3, r2
 8003078:	d100      	bne.n	800307c <HAL_RCC_OscConfig+0x140>
 800307a:	e099      	b.n	80031b0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	2220      	movs	r2, #32
 8003086:	4013      	ands	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800308a:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4b7a      	ldr	r3, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003090:	2120      	movs	r1, #32
 8003092:	430a      	orrs	r2, r1
 8003094:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	2220      	movs	r2, #32
 800309a:	4393      	bics	r3, r2
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d13e      	bne.n	8003128 <HAL_RCC_OscConfig+0x1ec>
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13b      	bne.n	8003128 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80030b0:	4b71      	ldr	r3, [pc, #452]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2204      	movs	r2, #4
 80030b6:	4013      	ands	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_RCC_OscConfig+0x188>
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e304      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	; (8003284 <HAL_RCC_OscConfig+0x348>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	021a      	lsls	r2, r3, #8
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2209      	movs	r2, #9
 80030e0:	4393      	bics	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	4b64      	ldr	r3, [pc, #400]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030ec:	f000 fc42 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 80030f0:	0001      	movs	r1, r0
 80030f2:	4b61      	ldr	r3, [pc, #388]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	220f      	movs	r2, #15
 80030fa:	4013      	ands	r3, r2
 80030fc:	4a62      	ldr	r2, [pc, #392]	; (8003288 <HAL_RCC_OscConfig+0x34c>)
 80030fe:	5cd3      	ldrb	r3, [r2, r3]
 8003100:	000a      	movs	r2, r1
 8003102:	40da      	lsrs	r2, r3
 8003104:	4b61      	ldr	r3, [pc, #388]	; (800328c <HAL_RCC_OscConfig+0x350>)
 8003106:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003108:	4b61      	ldr	r3, [pc, #388]	; (8003290 <HAL_RCC_OscConfig+0x354>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2513      	movs	r5, #19
 800310e:	197c      	adds	r4, r7, r5
 8003110:	0018      	movs	r0, r3
 8003112:	f7fe fcfd 	bl	8001b10 <HAL_InitTick>
 8003116:	0003      	movs	r3, r0
 8003118:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800311a:	197b      	adds	r3, r7, r5
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d046      	beq.n	80031b0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003122:	197b      	adds	r3, r7, r5
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	e2d2      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d027      	beq.n	800317e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800312e:	4b52      	ldr	r3, [pc, #328]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2209      	movs	r2, #9
 8003134:	4393      	bics	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	4b4f      	ldr	r3, [pc, #316]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fe fd2c 	bl	8001b9c <HAL_GetTick>
 8003144:	0003      	movs	r3, r0
 8003146:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314a:	f7fe fd27 	bl	8001b9c <HAL_GetTick>
 800314e:	0002      	movs	r2, r0
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e2b8      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800315c:	4b46      	ldr	r3, [pc, #280]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2204      	movs	r2, #4
 8003162:	4013      	ands	r3, r2
 8003164:	d0f1      	beq.n	800314a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b44      	ldr	r3, [pc, #272]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4a46      	ldr	r2, [pc, #280]	; (8003284 <HAL_RCC_OscConfig+0x348>)
 800316c:	4013      	ands	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	021a      	lsls	r2, r3, #8
 8003176:	4b40      	ldr	r3, [pc, #256]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
 800317c:	e018      	b.n	80031b0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317e:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003184:	2101      	movs	r1, #1
 8003186:	438a      	bics	r2, r1
 8003188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe fd07 	bl	8001b9c <HAL_GetTick>
 800318e:	0003      	movs	r3, r0
 8003190:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe fd02 	bl	8001b9c <HAL_GetTick>
 8003198:	0002      	movs	r2, r0
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e293      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80031a6:	4b34      	ldr	r3, [pc, #208]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2204      	movs	r2, #4
 80031ac:	4013      	ands	r3, r2
 80031ae:	d1f1      	bne.n	8003194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2210      	movs	r2, #16
 80031b6:	4013      	ands	r3, r2
 80031b8:	d100      	bne.n	80031bc <HAL_RCC_OscConfig+0x280>
 80031ba:	e0a2      	b.n	8003302 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d140      	bne.n	8003244 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031c2:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x29e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e279      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <HAL_RCC_OscConfig+0x358>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ee:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	0a19      	lsrs	r1, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	061a      	lsls	r2, r3, #24
 80031fc:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	0b5b      	lsrs	r3, r3, #13
 8003208:	3301      	adds	r3, #1
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	0212      	lsls	r2, r2, #8
 800320e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	091b      	lsrs	r3, r3, #4
 8003216:	210f      	movs	r1, #15
 8003218:	400b      	ands	r3, r1
 800321a:	491b      	ldr	r1, [pc, #108]	; (8003288 <HAL_RCC_OscConfig+0x34c>)
 800321c:	5ccb      	ldrb	r3, [r1, r3]
 800321e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_OscConfig+0x350>)
 8003222:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003224:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCC_OscConfig+0x354>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2513      	movs	r5, #19
 800322a:	197c      	adds	r4, r7, r5
 800322c:	0018      	movs	r0, r3
 800322e:	f7fe fc6f 	bl	8001b10 <HAL_InitTick>
 8003232:	0003      	movs	r3, r0
 8003234:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003236:	197b      	adds	r3, r7, r5
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d061      	beq.n	8003302 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800323e:	197b      	adds	r3, r7, r5
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	e244      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d040      	beq.n	80032ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <HAL_RCC_OscConfig+0x33c>)
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	0049      	lsls	r1, r1, #1
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe fc9f 	bl	8001b9c <HAL_GetTick>
 800325e:	0003      	movs	r3, r0
 8003260:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003262:	e019      	b.n	8003298 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003264:	f7fe fc9a 	bl	8001b9c <HAL_GetTick>
 8003268:	0002      	movs	r2, r0
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d912      	bls.n	8003298 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e22b      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	40021000 	.word	0x40021000
 800327c:	fffeffff 	.word	0xfffeffff
 8003280:	fffbffff 	.word	0xfffbffff
 8003284:	ffffe0ff 	.word	0xffffe0ff
 8003288:	08006638 	.word	0x08006638
 800328c:	20000008 	.word	0x20000008
 8003290:	2000000c 	.word	0x2000000c
 8003294:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003298:	4bca      	ldr	r3, [pc, #808]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4013      	ands	r3, r2
 80032a2:	d0df      	beq.n	8003264 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a4:	4bc7      	ldr	r3, [pc, #796]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4ac7      	ldr	r2, [pc, #796]	; (80035c8 <HAL_RCC_OscConfig+0x68c>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032b2:	4bc4      	ldr	r3, [pc, #784]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b8:	4bc2      	ldr	r3, [pc, #776]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	0a19      	lsrs	r1, r3, #8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	061a      	lsls	r2, r3, #24
 80032c6:	4bbf      	ldr	r3, [pc, #764]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	e019      	b.n	8003302 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032ce:	4bbd      	ldr	r3, [pc, #756]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4bbc      	ldr	r3, [pc, #752]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80032d4:	49bd      	ldr	r1, [pc, #756]	; (80035cc <HAL_RCC_OscConfig+0x690>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fe fc5f 	bl	8001b9c <HAL_GetTick>
 80032de:	0003      	movs	r3, r0
 80032e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032e4:	f7fe fc5a 	bl	8001b9c <HAL_GetTick>
 80032e8:	0002      	movs	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e1eb      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032f6:	4bb3      	ldr	r3, [pc, #716]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4013      	ands	r3, r2
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2208      	movs	r2, #8
 8003308:	4013      	ands	r3, r2
 800330a:	d036      	beq.n	800337a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d019      	beq.n	8003348 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003314:	4bab      	ldr	r3, [pc, #684]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003318:	4baa      	ldr	r3, [pc, #680]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800331a:	2101      	movs	r1, #1
 800331c:	430a      	orrs	r2, r1
 800331e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003320:	f7fe fc3c 	bl	8001b9c <HAL_GetTick>
 8003324:	0003      	movs	r3, r0
 8003326:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332a:	f7fe fc37 	bl	8001b9c <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e1c8      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800333c:	4ba1      	ldr	r3, [pc, #644]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800333e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d0f1      	beq.n	800332a <HAL_RCC_OscConfig+0x3ee>
 8003346:	e018      	b.n	800337a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003348:	4b9e      	ldr	r3, [pc, #632]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800334a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800334c:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800334e:	2101      	movs	r1, #1
 8003350:	438a      	bics	r2, r1
 8003352:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003354:	f7fe fc22 	bl	8001b9c <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335e:	f7fe fc1d 	bl	8001b9c <HAL_GetTick>
 8003362:	0002      	movs	r2, r0
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1ae      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003370:	4b94      	ldr	r3, [pc, #592]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003374:	2202      	movs	r2, #2
 8003376:	4013      	ands	r3, r2
 8003378:	d1f1      	bne.n	800335e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2204      	movs	r2, #4
 8003380:	4013      	ands	r3, r2
 8003382:	d100      	bne.n	8003386 <HAL_RCC_OscConfig+0x44a>
 8003384:	e0ae      	b.n	80034e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003386:	2023      	movs	r0, #35	; 0x23
 8003388:	183b      	adds	r3, r7, r0
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b8d      	ldr	r3, [pc, #564]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	055b      	lsls	r3, r3, #21
 8003396:	4013      	ands	r3, r2
 8003398:	d109      	bne.n	80033ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	4b8a      	ldr	r3, [pc, #552]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800339c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	0549      	lsls	r1, r1, #21
 80033a4:	430a      	orrs	r2, r1
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80033a8:	183b      	adds	r3, r7, r0
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x694>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d11a      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ba:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <HAL_RCC_OscConfig+0x694>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b84      	ldr	r3, [pc, #528]	; (80035d0 <HAL_RCC_OscConfig+0x694>)
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	0049      	lsls	r1, r1, #1
 80033c4:	430a      	orrs	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c8:	f7fe fbe8 	bl	8001b9c <HAL_GetTick>
 80033cc:	0003      	movs	r3, r0
 80033ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fe fbe3 	bl	8001b9c <HAL_GetTick>
 80033d6:	0002      	movs	r2, r0
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b64      	cmp	r3, #100	; 0x64
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e174      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e4:	4b7a      	ldr	r3, [pc, #488]	; (80035d0 <HAL_RCC_OscConfig+0x694>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d0f0      	beq.n	80033d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_RCC_OscConfig+0x4d0>
 80033fc:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80033fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003400:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	0049      	lsls	r1, r1, #1
 8003406:	430a      	orrs	r2, r1
 8003408:	651a      	str	r2, [r3, #80]	; 0x50
 800340a:	e031      	b.n	8003470 <HAL_RCC_OscConfig+0x534>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x4f2>
 8003414:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003418:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800341a:	496c      	ldr	r1, [pc, #432]	; (80035cc <HAL_RCC_OscConfig+0x690>)
 800341c:	400a      	ands	r2, r1
 800341e:	651a      	str	r2, [r3, #80]	; 0x50
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003424:	4b67      	ldr	r3, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003426:	496b      	ldr	r1, [pc, #428]	; (80035d4 <HAL_RCC_OscConfig+0x698>)
 8003428:	400a      	ands	r2, r1
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
 800342c:	e020      	b.n	8003470 <HAL_RCC_OscConfig+0x534>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	23a0      	movs	r3, #160	; 0xa0
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	429a      	cmp	r2, r3
 8003438:	d10e      	bne.n	8003458 <HAL_RCC_OscConfig+0x51c>
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800343c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800343e:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003440:	2180      	movs	r1, #128	; 0x80
 8003442:	00c9      	lsls	r1, r1, #3
 8003444:	430a      	orrs	r2, r1
 8003446:	651a      	str	r2, [r3, #80]	; 0x50
 8003448:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800344a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800344c:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	0049      	lsls	r1, r1, #1
 8003452:	430a      	orrs	r2, r1
 8003454:	651a      	str	r2, [r3, #80]	; 0x50
 8003456:	e00b      	b.n	8003470 <HAL_RCC_OscConfig+0x534>
 8003458:	4b5a      	ldr	r3, [pc, #360]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800345a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800345e:	495b      	ldr	r1, [pc, #364]	; (80035cc <HAL_RCC_OscConfig+0x690>)
 8003460:	400a      	ands	r2, r1
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
 8003464:	4b57      	ldr	r3, [pc, #348]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003468:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800346a:	495a      	ldr	r1, [pc, #360]	; (80035d4 <HAL_RCC_OscConfig+0x698>)
 800346c:	400a      	ands	r2, r1
 800346e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d015      	beq.n	80034a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003478:	f7fe fb90 	bl	8001b9c <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003480:	e009      	b.n	8003496 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fb8b 	bl	8001b9c <HAL_GetTick>
 8003486:	0002      	movs	r2, r0
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_OscConfig+0x69c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e11b      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003496:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4013      	ands	r3, r2
 80034a0:	d0ef      	beq.n	8003482 <HAL_RCC_OscConfig+0x546>
 80034a2:	e014      	b.n	80034ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a4:	f7fe fb7a 	bl	8001b9c <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ac:	e009      	b.n	80034c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ae:	f7fe fb75 	bl	8001b9c <HAL_GetTick>
 80034b2:	0002      	movs	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	4a47      	ldr	r2, [pc, #284]	; (80035d8 <HAL_RCC_OscConfig+0x69c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e105      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034c2:	4b40      	ldr	r3, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80034c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4013      	ands	r3, r2
 80034cc:	d1ef      	bne.n	80034ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034ce:	2323      	movs	r3, #35	; 0x23
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d8:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80034da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80034de:	493f      	ldr	r1, [pc, #252]	; (80035dc <HAL_RCC_OscConfig+0x6a0>)
 80034e0:	400a      	ands	r2, r1
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	4013      	ands	r3, r2
 80034ec:	d049      	beq.n	8003582 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d026      	beq.n	8003544 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80034f6:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80034fc:	2101      	movs	r1, #1
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003506:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003508:	2101      	movs	r1, #1
 800350a:	430a      	orrs	r2, r1
 800350c:	635a      	str	r2, [r3, #52]	; 0x34
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <HAL_RCC_OscConfig+0x6a4>)
 8003510:	6a1a      	ldr	r2, [r3, #32]
 8003512:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_RCC_OscConfig+0x6a4>)
 8003514:	2180      	movs	r1, #128	; 0x80
 8003516:	0189      	lsls	r1, r1, #6
 8003518:	430a      	orrs	r2, r1
 800351a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe fb3e 	bl	8001b9c <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003526:	f7fe fb39 	bl	8001b9c <HAL_GetTick>
 800352a:	0002      	movs	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e0ca      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2202      	movs	r2, #2
 800353e:	4013      	ands	r3, r2
 8003540:	d0f1      	beq.n	8003526 <HAL_RCC_OscConfig+0x5ea>
 8003542:	e01e      	b.n	8003582 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003544:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800354a:	2101      	movs	r1, #1
 800354c:	438a      	bics	r2, r1
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_RCC_OscConfig+0x6a4>)
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_RCC_OscConfig+0x6a4>)
 8003556:	4923      	ldr	r1, [pc, #140]	; (80035e4 <HAL_RCC_OscConfig+0x6a8>)
 8003558:	400a      	ands	r2, r1
 800355a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355c:	f7fe fb1e 	bl	8001b9c <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003566:	f7fe fb19 	bl	8001b9c <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e0aa      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d1f1      	bne.n	8003566 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	d100      	bne.n	800358c <HAL_RCC_OscConfig+0x650>
 800358a:	e09f      	b.n	80036cc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d100      	bne.n	8003594 <HAL_RCC_OscConfig+0x658>
 8003592:	e078      	b.n	8003686 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	2b02      	cmp	r3, #2
 800359a:	d159      	bne.n	8003650 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <HAL_RCC_OscConfig+0x688>)
 80035a2:	4911      	ldr	r1, [pc, #68]	; (80035e8 <HAL_RCC_OscConfig+0x6ac>)
 80035a4:	400a      	ands	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe faf8 	bl	8001b9c <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035b0:	e01c      	b.n	80035ec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fe faf3 	bl	8001b9c <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d915      	bls.n	80035ec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e084      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
 80035c4:	40021000 	.word	0x40021000
 80035c8:	ffff1fff 	.word	0xffff1fff
 80035cc:	fffffeff 	.word	0xfffffeff
 80035d0:	40007000 	.word	0x40007000
 80035d4:	fffffbff 	.word	0xfffffbff
 80035d8:	00001388 	.word	0x00001388
 80035dc:	efffffff 	.word	0xefffffff
 80035e0:	40010000 	.word	0x40010000
 80035e4:	ffffdfff 	.word	0xffffdfff
 80035e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035ec:	4b3a      	ldr	r3, [pc, #232]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	049b      	lsls	r3, r3, #18
 80035f4:	4013      	ands	r3, r2
 80035f6:	d1dc      	bne.n	80035b2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f8:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a37      	ldr	r2, [pc, #220]	; (80036dc <HAL_RCC_OscConfig+0x7a0>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003610:	431a      	orrs	r2, r3
 8003612:	4b31      	ldr	r3, [pc, #196]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 8003614:	430a      	orrs	r2, r1
 8003616:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003618:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 800361e:	2180      	movs	r1, #128	; 0x80
 8003620:	0449      	lsls	r1, r1, #17
 8003622:	430a      	orrs	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7fe fab9 	bl	8001b9c <HAL_GetTick>
 800362a:	0003      	movs	r3, r0
 800362c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe fab4 	bl	8001b9c <HAL_GetTick>
 8003634:	0002      	movs	r2, r0
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e045      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003642:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	049b      	lsls	r3, r3, #18
 800364a:	4013      	ands	r3, r2
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x6f4>
 800364e:	e03d      	b.n	80036cc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b20      	ldr	r3, [pc, #128]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 8003656:	4922      	ldr	r1, [pc, #136]	; (80036e0 <HAL_RCC_OscConfig+0x7a4>)
 8003658:	400a      	ands	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fe fa9e 	bl	8001b9c <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003666:	f7fe fa99 	bl	8001b9c <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e02a      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	049b      	lsls	r3, r3, #18
 8003680:	4013      	ands	r3, r2
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x72a>
 8003684:	e022      	b.n	80036cc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e01d      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_RCC_OscConfig+0x79c>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	025b      	lsls	r3, r3, #9
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d10f      	bne.n	80036c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	23f0      	movs	r3, #240	; 0xf0
 80036ac:	039b      	lsls	r3, r3, #14
 80036ae:	401a      	ands	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	23c0      	movs	r3, #192	; 0xc0
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	401a      	ands	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b00a      	add	sp, #40	; 0x28
 80036d4:	bdb0      	pop	{r4, r5, r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40021000 	.word	0x40021000
 80036dc:	ff02ffff 	.word	0xff02ffff
 80036e0:	feffffff 	.word	0xfeffffff

080036e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b5b0      	push	{r4, r5, r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e128      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b96      	ldr	r3, [pc, #600]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2201      	movs	r2, #1
 80036fe:	4013      	ands	r3, r2
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d91e      	bls.n	8003744 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b93      	ldr	r3, [pc, #588]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	4393      	bics	r3, r2
 800370e:	0019      	movs	r1, r3
 8003710:	4b90      	ldr	r3, [pc, #576]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003718:	f7fe fa40 	bl	8001b9c <HAL_GetTick>
 800371c:	0003      	movs	r3, r0
 800371e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003720:	e009      	b.n	8003736 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003722:	f7fe fa3b 	bl	8001b9c <HAL_GetTick>
 8003726:	0002      	movs	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	4a8a      	ldr	r2, [pc, #552]	; (8003958 <HAL_RCC_ClockConfig+0x274>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e109      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b87      	ldr	r3, [pc, #540]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2201      	movs	r2, #1
 800373c:	4013      	ands	r3, r2
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d1ee      	bne.n	8003722 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2202      	movs	r2, #2
 800374a:	4013      	ands	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800374e:	4b83      	ldr	r3, [pc, #524]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	22f0      	movs	r2, #240	; 0xf0
 8003754:	4393      	bics	r3, r2
 8003756:	0019      	movs	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b7f      	ldr	r3, [pc, #508]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 800375e:	430a      	orrs	r2, r1
 8003760:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	4013      	ands	r3, r2
 800376a:	d100      	bne.n	800376e <HAL_RCC_ClockConfig+0x8a>
 800376c:	e089      	b.n	8003882 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003776:	4b79      	ldr	r3, [pc, #484]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	029b      	lsls	r3, r3, #10
 800377e:	4013      	ands	r3, r2
 8003780:	d120      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0e1      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800378e:	4b73      	ldr	r3, [pc, #460]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	2380      	movs	r3, #128	; 0x80
 8003794:	049b      	lsls	r3, r3, #18
 8003796:	4013      	ands	r3, r2
 8003798:	d114      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e0d5      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037a6:	4b6d      	ldr	r3, [pc, #436]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2204      	movs	r2, #4
 80037ac:	4013      	ands	r3, r2
 80037ae:	d109      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0ca      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80037b4:	4b69      	ldr	r3, [pc, #420]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0c2      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c4:	4b65      	ldr	r3, [pc, #404]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4393      	bics	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	4b62      	ldr	r3, [pc, #392]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 80037d4:	430a      	orrs	r2, r1
 80037d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d8:	f7fe f9e0 	bl	8001b9c <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d111      	bne.n	800380c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e8:	e009      	b.n	80037fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ea:	f7fe f9d7 	bl	8001b9c <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	4a58      	ldr	r2, [pc, #352]	; (8003958 <HAL_RCC_ClockConfig+0x274>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0a5      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037fe:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	220c      	movs	r2, #12
 8003804:	4013      	ands	r3, r2
 8003806:	2b08      	cmp	r3, #8
 8003808:	d1ef      	bne.n	80037ea <HAL_RCC_ClockConfig+0x106>
 800380a:	e03a      	b.n	8003882 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d111      	bne.n	8003838 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003814:	e009      	b.n	800382a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003816:	f7fe f9c1 	bl	8001b9c <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_RCC_ClockConfig+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d901      	bls.n	800382a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e08f      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800382a:	4b4c      	ldr	r3, [pc, #304]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	220c      	movs	r2, #12
 8003830:	4013      	ands	r3, r2
 8003832:	2b0c      	cmp	r3, #12
 8003834:	d1ef      	bne.n	8003816 <HAL_RCC_ClockConfig+0x132>
 8003836:	e024      	b.n	8003882 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d11b      	bne.n	8003878 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003840:	e009      	b.n	8003856 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003842:	f7fe f9ab 	bl	8001b9c <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_RCC_ClockConfig+0x274>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e079      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003856:	4b41      	ldr	r3, [pc, #260]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	220c      	movs	r2, #12
 800385c:	4013      	ands	r3, r2
 800385e:	2b04      	cmp	r3, #4
 8003860:	d1ef      	bne.n	8003842 <HAL_RCC_ClockConfig+0x15e>
 8003862:	e00e      	b.n	8003882 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003864:	f7fe f99a 	bl	8001b9c <HAL_GetTick>
 8003868:	0002      	movs	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <HAL_RCC_ClockConfig+0x274>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e068      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003878:	4b38      	ldr	r3, [pc, #224]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	220c      	movs	r2, #12
 800387e:	4013      	ands	r3, r2
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003882:	4b34      	ldr	r3, [pc, #208]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	4013      	ands	r3, r2
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d21e      	bcs.n	80038ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4393      	bics	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038a2:	f7fe f97b 	bl	8001b9c <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	e009      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7fe f976 	bl	8001b9c <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	4a28      	ldr	r2, [pc, #160]	; (8003958 <HAL_RCC_ClockConfig+0x274>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e044      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCC_ClockConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d1ee      	bne.n	80038ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2204      	movs	r2, #4
 80038d4:	4013      	ands	r3, r2
 80038d6:	d009      	beq.n	80038ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a20      	ldr	r2, [pc, #128]	; (8003960 <HAL_RCC_ClockConfig+0x27c>)
 80038de:	4013      	ands	r3, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 80038e8:	430a      	orrs	r2, r1
 80038ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2208      	movs	r2, #8
 80038f2:	4013      	ands	r3, r2
 80038f4:	d00a      	beq.n	800390c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038f6:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_RCC_ClockConfig+0x280>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	00da      	lsls	r2, r3, #3
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 8003908:	430a      	orrs	r2, r1
 800390a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390c:	f000 f832 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003910:	0001      	movs	r1, r0
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_RCC_ClockConfig+0x278>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	220f      	movs	r2, #15
 800391a:	4013      	ands	r3, r2
 800391c:	4a12      	ldr	r2, [pc, #72]	; (8003968 <HAL_RCC_ClockConfig+0x284>)
 800391e:	5cd3      	ldrb	r3, [r2, r3]
 8003920:	000a      	movs	r2, r1
 8003922:	40da      	lsrs	r2, r3
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_RCC_ClockConfig+0x288>)
 8003926:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <HAL_RCC_ClockConfig+0x28c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	250b      	movs	r5, #11
 800392e:	197c      	adds	r4, r7, r5
 8003930:	0018      	movs	r0, r3
 8003932:	f7fe f8ed 	bl	8001b10 <HAL_InitTick>
 8003936:	0003      	movs	r3, r0
 8003938:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800393a:	197b      	adds	r3, r7, r5
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003942:	197b      	adds	r3, r7, r5
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	e000      	b.n	800394a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b004      	add	sp, #16
 8003950:	bdb0      	pop	{r4, r5, r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	40022000 	.word	0x40022000
 8003958:	00001388 	.word	0x00001388
 800395c:	40021000 	.word	0x40021000
 8003960:	fffff8ff 	.word	0xfffff8ff
 8003964:	ffffc7ff 	.word	0xffffc7ff
 8003968:	08006638 	.word	0x08006638
 800396c:	20000008 	.word	0x20000008
 8003970:	2000000c 	.word	0x2000000c

08003974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b5b0      	push	{r4, r5, r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800397a:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <HAL_RCC_GetSysClockFreq+0x138>)
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003982:	230c      	movs	r3, #12
 8003984:	4013      	ands	r3, r2
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d014      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x40>
 800398a:	d900      	bls.n	800398e <HAL_RCC_GetSysClockFreq+0x1a>
 800398c:	e07b      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x112>
 800398e:	2b04      	cmp	r3, #4
 8003990:	d002      	beq.n	8003998 <HAL_RCC_GetSysClockFreq+0x24>
 8003992:	2b08      	cmp	r3, #8
 8003994:	d00b      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x3a>
 8003996:	e076      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003998:	4b44      	ldr	r3, [pc, #272]	; (8003aac <HAL_RCC_GetSysClockFreq+0x138>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	d002      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80039a6:	e07c      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80039a8:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x140>)
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039ac:	e079      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039ae:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x144>)
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039b2:	e076      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	0c9a      	lsrs	r2, r3, #18
 80039b8:	230f      	movs	r3, #15
 80039ba:	401a      	ands	r2, r3
 80039bc:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_RCC_GetSysClockFreq+0x148>)
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	0d9a      	lsrs	r2, r3, #22
 80039c6:	2303      	movs	r3, #3
 80039c8:	4013      	ands	r3, r2
 80039ca:	3301      	adds	r3, #1
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ce:	4b37      	ldr	r3, [pc, #220]	; (8003aac <HAL_RCC_GetSysClockFreq+0x138>)
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	025b      	lsls	r3, r3, #9
 80039d6:	4013      	ands	r3, r2
 80039d8:	d01a      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x144>)
 80039e4:	2300      	movs	r3, #0
 80039e6:	69b8      	ldr	r0, [r7, #24]
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	f7fc fd2d 	bl	8000448 <__aeabi_lmul>
 80039ee:	0002      	movs	r2, r0
 80039f0:	000b      	movs	r3, r1
 80039f2:	0010      	movs	r0, r2
 80039f4:	0019      	movs	r1, r3
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f7fc fd01 	bl	8000408 <__aeabi_uldivmod>
 8003a06:	0002      	movs	r2, r0
 8003a08:	000b      	movs	r3, r1
 8003a0a:	0013      	movs	r3, r2
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0e:	e037      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a10:	4b26      	ldr	r3, [pc, #152]	; (8003aac <HAL_RCC_GetSysClockFreq+0x138>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2210      	movs	r2, #16
 8003a16:	4013      	ands	r3, r2
 8003a18:	d01a      	beq.n	8003a50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a24:	2300      	movs	r3, #0
 8003a26:	68b8      	ldr	r0, [r7, #8]
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	f7fc fd0d 	bl	8000448 <__aeabi_lmul>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	000b      	movs	r3, r1
 8003a32:	0010      	movs	r0, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f7fc fce1 	bl	8000408 <__aeabi_uldivmod>
 8003a46:	0002      	movs	r2, r0
 8003a48:	000b      	movs	r3, r1
 8003a4a:	0013      	movs	r3, r2
 8003a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a4e:	e017      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	0018      	movs	r0, r3
 8003a54:	2300      	movs	r3, #0
 8003a56:	0019      	movs	r1, r3
 8003a58:	4a16      	ldr	r2, [pc, #88]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f7fc fcf4 	bl	8000448 <__aeabi_lmul>
 8003a60:	0002      	movs	r2, r0
 8003a62:	000b      	movs	r3, r1
 8003a64:	0010      	movs	r0, r2
 8003a66:	0019      	movs	r1, r3
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	001c      	movs	r4, r3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	001d      	movs	r5, r3
 8003a70:	0022      	movs	r2, r4
 8003a72:	002b      	movs	r3, r5
 8003a74:	f7fc fcc8 	bl	8000408 <__aeabi_uldivmod>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	000b      	movs	r3, r1
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a84:	e00d      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_GetSysClockFreq+0x138>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	0b5b      	lsrs	r3, r3, #13
 8003a8c:	2207      	movs	r2, #7
 8003a8e:	4013      	ands	r3, r2
 8003a90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	3301      	adds	r3, #1
 8003a96:	2280      	movs	r2, #128	; 0x80
 8003a98:	0212      	lsls	r2, r2, #8
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	0013      	movs	r3, r2
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aa0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b00e      	add	sp, #56	; 0x38
 8003aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	003d0900 	.word	0x003d0900
 8003ab4:	00f42400 	.word	0x00f42400
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	08006650 	.word	0x08006650

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	20000008 	.word	0x20000008

08003ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad8:	f7ff fff2 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003adc:	0001      	movs	r1, r0
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003aea:	5cd3      	ldrb	r3, [r2, r3]
 8003aec:	40d9      	lsrs	r1, r3
 8003aee:	000b      	movs	r3, r1
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	40021000 	.word	0x40021000
 8003afc:	08006648 	.word	0x08006648

08003b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b04:	f7ff ffdc 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b08:	0001      	movs	r1, r0
 8003b0a:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	0adb      	lsrs	r3, r3, #11
 8003b10:	2207      	movs	r2, #7
 8003b12:	4013      	ands	r3, r2
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b16:	5cd3      	ldrb	r3, [r2, r3]
 8003b18:	40d9      	lsrs	r1, r3
 8003b1a:	000b      	movs	r3, r1
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	40021000 	.word	0x40021000
 8003b28:	08006648 	.word	0x08006648

08003b2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b34:	2317      	movs	r3, #23
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2220      	movs	r2, #32
 8003b42:	4013      	ands	r3, r2
 8003b44:	d106      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d100      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b52:	e104      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b54:	4bb9      	ldr	r3, [pc, #740]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	055b      	lsls	r3, r3, #21
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d10a      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b60:	4bb6      	ldr	r3, [pc, #728]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b64:	4bb5      	ldr	r3, [pc, #724]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b66:	2180      	movs	r1, #128	; 0x80
 8003b68:	0549      	lsls	r1, r1, #21
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b6e:	2317      	movs	r3, #23
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4bb2      	ldr	r3, [pc, #712]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d11a      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b82:	4baf      	ldr	r3, [pc, #700]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4bae      	ldr	r3, [pc, #696]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	0049      	lsls	r1, r1, #1
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b90:	f7fe f804 	bl	8001b9c <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9a:	f7fd ffff 	bl	8001b9c <HAL_GetTick>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e143      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	4ba4      	ldr	r3, [pc, #656]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003bb8:	4ba0      	ldr	r3, [pc, #640]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	23c0      	movs	r3, #192	; 0xc0
 8003bbe:	039b      	lsls	r3, r3, #14
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	23c0      	movs	r3, #192	; 0xc0
 8003bca:	039b      	lsls	r3, r3, #14
 8003bcc:	4013      	ands	r3, r2
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d107      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	23c0      	movs	r3, #192	; 0xc0
 8003bda:	039b      	lsls	r3, r3, #14
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d013      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	23c0      	movs	r3, #192	; 0xc0
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	401a      	ands	r2, r3
 8003bee:	23c0      	movs	r3, #192	; 0xc0
 8003bf0:	029b      	lsls	r3, r3, #10
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d10a      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bf6:	4b91      	ldr	r3, [pc, #580]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	029b      	lsls	r3, r3, #10
 8003bfe:	401a      	ands	r2, r3
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d101      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e113      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003c0c:	4b8b      	ldr	r3, [pc, #556]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c10:	23c0      	movs	r3, #192	; 0xc0
 8003c12:	029b      	lsls	r3, r3, #10
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d049      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	23c0      	movs	r3, #192	; 0xc0
 8003c24:	029b      	lsls	r3, r3, #10
 8003c26:	4013      	ands	r3, r2
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d004      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2220      	movs	r2, #32
 8003c34:	4013      	ands	r3, r2
 8003c36:	d10d      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	23c0      	movs	r3, #192	; 0xc0
 8003c3e:	029b      	lsls	r3, r3, #10
 8003c40:	4013      	ands	r3, r2
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d034      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4013      	ands	r3, r2
 8003c52:	d02e      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c54:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c58:	4a7a      	ldr	r2, [pc, #488]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5e:	4b77      	ldr	r3, [pc, #476]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	0309      	lsls	r1, r1, #12
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6c:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c70:	4b72      	ldr	r3, [pc, #456]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c72:	4975      	ldr	r1, [pc, #468]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c74:	400a      	ands	r2, r1
 8003c76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c78:	4b70      	ldr	r3, [pc, #448]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	4013      	ands	r3, r2
 8003c86:	d014      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd ff88 	bl	8001b9c <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c90:	e009      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd ff83 	bl	8001b9c <HAL_GetTick>
 8003c96:	0002      	movs	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e0c6      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca6:	4b65      	ldr	r3, [pc, #404]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d0ef      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d01f      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	23c0      	movs	r3, #192	; 0xc0
 8003cc4:	029b      	lsls	r3, r3, #10
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	23c0      	movs	r3, #192	; 0xc0
 8003cca:	029b      	lsls	r3, r3, #10
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d10c      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003cd0:	4b5a      	ldr	r3, [pc, #360]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5e      	ldr	r2, [pc, #376]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	0019      	movs	r1, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	039b      	lsls	r3, r3, #14
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	4b54      	ldr	r3, [pc, #336]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	23c0      	movs	r3, #192	; 0xc0
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2220      	movs	r2, #32
 8003d04:	4013      	ands	r3, r2
 8003d06:	d01f      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	23c0      	movs	r3, #192	; 0xc0
 8003d0e:	029b      	lsls	r3, r3, #10
 8003d10:	401a      	ands	r2, r3
 8003d12:	23c0      	movs	r3, #192	; 0xc0
 8003d14:	029b      	lsls	r3, r3, #10
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d1a:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	23c0      	movs	r3, #192	; 0xc0
 8003d2a:	039b      	lsls	r3, r3, #14
 8003d2c:	401a      	ands	r2, r3
 8003d2e:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d36:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	23c0      	movs	r3, #192	; 0xc0
 8003d3e:	029b      	lsls	r3, r3, #10
 8003d40:	401a      	ands	r2, r3
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d44:	430a      	orrs	r2, r1
 8003d46:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d48:	2317      	movs	r3, #23
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d105      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d52:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d58:	493e      	ldr	r1, [pc, #248]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003d5a:	400a      	ands	r2, r1
 8003d5c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	4013      	ands	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	4393      	bics	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	4b31      	ldr	r3, [pc, #196]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2202      	movs	r2, #2
 8003d82:	4013      	ands	r3, r2
 8003d84:	d009      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d86:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8a:	220c      	movs	r2, #12
 8003d8c:	4393      	bics	r3, r2
 8003d8e:	0019      	movs	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d96:	430a      	orrs	r2, r1
 8003d98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	4013      	ands	r3, r2
 8003da2:	d009      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da4:	4b25      	ldr	r3, [pc, #148]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da8:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db4:	430a      	orrs	r2, r1
 8003db6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2208      	movs	r2, #8
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d009      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc6:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	0019      	movs	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4013      	ands	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003de2:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	0019      	movs	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003df2:	430a      	orrs	r2, r1
 8003df4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e00:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e04:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	0019      	movs	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e10:	430a      	orrs	r2, r1
 8003e12:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e1e:	4b07      	ldr	r3, [pc, #28]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	4b03      	ldr	r3, [pc, #12]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b006      	add	sp, #24
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40007000 	.word	0x40007000
 8003e44:	fffcffff 	.word	0xfffcffff
 8003e48:	fff7ffff 	.word	0xfff7ffff
 8003e4c:	00001388 	.word	0x00001388
 8003e50:	ffcfffff 	.word	0xffcfffff
 8003e54:	efffffff 	.word	0xefffffff
 8003e58:	fffff3ff 	.word	0xfffff3ff
 8003e5c:	ffffcfff 	.word	0xffffcfff
 8003e60:	fbffffff 	.word	0xfbffffff
 8003e64:	fff3ffff 	.word	0xfff3ffff

08003e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e044      	b.n	8003f04 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2278      	movs	r2, #120	; 0x78
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7fd fcd7 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2224      	movs	r2, #36	; 0x24
 8003e96:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f000 f830 	bl	8003f10 <UART_SetConfig>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e024      	b.n	8003f04 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fac1 	bl	800444c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	490d      	ldr	r1, [pc, #52]	; (8003f0c <HAL_UART_Init+0xa4>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	212a      	movs	r1, #42	; 0x2a
 8003ee6:	438a      	bics	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 fb59 	bl	80045b4 <UART_CheckIdleState>
 8003f02:	0003      	movs	r3, r0
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b002      	add	sp, #8
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	ffffb7ff 	.word	0xffffb7ff

08003f10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b08e      	sub	sp, #56	; 0x38
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f18:	231a      	movs	r3, #26
 8003f1a:	2218      	movs	r2, #24
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	19db      	adds	r3, r3, r7
 8003f20:	2200      	movs	r2, #0
 8003f22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4ac3      	ldr	r2, [pc, #780]	; (8004250 <UART_SetConfig+0x340>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	0019      	movs	r1, r3
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4abe      	ldr	r2, [pc, #760]	; (8004254 <UART_SetConfig+0x344>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4ab8      	ldr	r2, [pc, #736]	; (8004258 <UART_SetConfig+0x348>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f80:	4313      	orrs	r3, r2
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	4ab4      	ldr	r2, [pc, #720]	; (800425c <UART_SetConfig+0x34c>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f96:	430a      	orrs	r2, r1
 8003f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4ab0      	ldr	r2, [pc, #704]	; (8004260 <UART_SetConfig+0x350>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d131      	bne.n	8004008 <UART_SetConfig+0xf8>
 8003fa4:	4baf      	ldr	r3, [pc, #700]	; (8004264 <UART_SetConfig+0x354>)
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa8:	2203      	movs	r2, #3
 8003faa:	4013      	ands	r3, r2
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d01d      	beq.n	8003fec <UART_SetConfig+0xdc>
 8003fb0:	d823      	bhi.n	8003ffa <UART_SetConfig+0xea>
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d00c      	beq.n	8003fd0 <UART_SetConfig+0xc0>
 8003fb6:	d820      	bhi.n	8003ffa <UART_SetConfig+0xea>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <UART_SetConfig+0xb2>
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d00e      	beq.n	8003fde <UART_SetConfig+0xce>
 8003fc0:	e01b      	b.n	8003ffa <UART_SetConfig+0xea>
 8003fc2:	231b      	movs	r3, #27
 8003fc4:	2218      	movs	r2, #24
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	19db      	adds	r3, r3, r7
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	e0b4      	b.n	800413a <UART_SetConfig+0x22a>
 8003fd0:	231b      	movs	r3, #27
 8003fd2:	2218      	movs	r2, #24
 8003fd4:	189b      	adds	r3, r3, r2
 8003fd6:	19db      	adds	r3, r3, r7
 8003fd8:	2202      	movs	r2, #2
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	e0ad      	b.n	800413a <UART_SetConfig+0x22a>
 8003fde:	231b      	movs	r3, #27
 8003fe0:	2218      	movs	r2, #24
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e0a6      	b.n	800413a <UART_SetConfig+0x22a>
 8003fec:	231b      	movs	r3, #27
 8003fee:	2218      	movs	r2, #24
 8003ff0:	189b      	adds	r3, r3, r2
 8003ff2:	19db      	adds	r3, r3, r7
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	701a      	strb	r2, [r3, #0]
 8003ff8:	e09f      	b.n	800413a <UART_SetConfig+0x22a>
 8003ffa:	231b      	movs	r3, #27
 8003ffc:	2218      	movs	r2, #24
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	19db      	adds	r3, r3, r7
 8004002:	2210      	movs	r2, #16
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	e098      	b.n	800413a <UART_SetConfig+0x22a>
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a96      	ldr	r2, [pc, #600]	; (8004268 <UART_SetConfig+0x358>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d131      	bne.n	8004076 <UART_SetConfig+0x166>
 8004012:	4b94      	ldr	r3, [pc, #592]	; (8004264 <UART_SetConfig+0x354>)
 8004014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004016:	220c      	movs	r2, #12
 8004018:	4013      	ands	r3, r2
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d01d      	beq.n	800405a <UART_SetConfig+0x14a>
 800401e:	d823      	bhi.n	8004068 <UART_SetConfig+0x158>
 8004020:	2b08      	cmp	r3, #8
 8004022:	d00c      	beq.n	800403e <UART_SetConfig+0x12e>
 8004024:	d820      	bhi.n	8004068 <UART_SetConfig+0x158>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <UART_SetConfig+0x120>
 800402a:	2b04      	cmp	r3, #4
 800402c:	d00e      	beq.n	800404c <UART_SetConfig+0x13c>
 800402e:	e01b      	b.n	8004068 <UART_SetConfig+0x158>
 8004030:	231b      	movs	r3, #27
 8004032:	2218      	movs	r2, #24
 8004034:	189b      	adds	r3, r3, r2
 8004036:	19db      	adds	r3, r3, r7
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e07d      	b.n	800413a <UART_SetConfig+0x22a>
 800403e:	231b      	movs	r3, #27
 8004040:	2218      	movs	r2, #24
 8004042:	189b      	adds	r3, r3, r2
 8004044:	19db      	adds	r3, r3, r7
 8004046:	2202      	movs	r2, #2
 8004048:	701a      	strb	r2, [r3, #0]
 800404a:	e076      	b.n	800413a <UART_SetConfig+0x22a>
 800404c:	231b      	movs	r3, #27
 800404e:	2218      	movs	r2, #24
 8004050:	189b      	adds	r3, r3, r2
 8004052:	19db      	adds	r3, r3, r7
 8004054:	2204      	movs	r2, #4
 8004056:	701a      	strb	r2, [r3, #0]
 8004058:	e06f      	b.n	800413a <UART_SetConfig+0x22a>
 800405a:	231b      	movs	r3, #27
 800405c:	2218      	movs	r2, #24
 800405e:	189b      	adds	r3, r3, r2
 8004060:	19db      	adds	r3, r3, r7
 8004062:	2208      	movs	r2, #8
 8004064:	701a      	strb	r2, [r3, #0]
 8004066:	e068      	b.n	800413a <UART_SetConfig+0x22a>
 8004068:	231b      	movs	r3, #27
 800406a:	2218      	movs	r2, #24
 800406c:	189b      	adds	r3, r3, r2
 800406e:	19db      	adds	r3, r3, r7
 8004070:	2210      	movs	r2, #16
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	e061      	b.n	800413a <UART_SetConfig+0x22a>
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7c      	ldr	r2, [pc, #496]	; (800426c <UART_SetConfig+0x35c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d106      	bne.n	800408e <UART_SetConfig+0x17e>
 8004080:	231b      	movs	r3, #27
 8004082:	2218      	movs	r2, #24
 8004084:	189b      	adds	r3, r3, r2
 8004086:	19db      	adds	r3, r3, r7
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e055      	b.n	800413a <UART_SetConfig+0x22a>
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a77      	ldr	r2, [pc, #476]	; (8004270 <UART_SetConfig+0x360>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d106      	bne.n	80040a6 <UART_SetConfig+0x196>
 8004098:	231b      	movs	r3, #27
 800409a:	2218      	movs	r2, #24
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	e049      	b.n	800413a <UART_SetConfig+0x22a>
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6b      	ldr	r2, [pc, #428]	; (8004258 <UART_SetConfig+0x348>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d13e      	bne.n	800412e <UART_SetConfig+0x21e>
 80040b0:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <UART_SetConfig+0x354>)
 80040b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040b4:	23c0      	movs	r3, #192	; 0xc0
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	4013      	ands	r3, r2
 80040ba:	22c0      	movs	r2, #192	; 0xc0
 80040bc:	0112      	lsls	r2, r2, #4
 80040be:	4293      	cmp	r3, r2
 80040c0:	d027      	beq.n	8004112 <UART_SetConfig+0x202>
 80040c2:	22c0      	movs	r2, #192	; 0xc0
 80040c4:	0112      	lsls	r2, r2, #4
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d82a      	bhi.n	8004120 <UART_SetConfig+0x210>
 80040ca:	2280      	movs	r2, #128	; 0x80
 80040cc:	0112      	lsls	r2, r2, #4
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d011      	beq.n	80040f6 <UART_SetConfig+0x1e6>
 80040d2:	2280      	movs	r2, #128	; 0x80
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d822      	bhi.n	8004120 <UART_SetConfig+0x210>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <UART_SetConfig+0x1d8>
 80040de:	2280      	movs	r2, #128	; 0x80
 80040e0:	00d2      	lsls	r2, r2, #3
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00e      	beq.n	8004104 <UART_SetConfig+0x1f4>
 80040e6:	e01b      	b.n	8004120 <UART_SetConfig+0x210>
 80040e8:	231b      	movs	r3, #27
 80040ea:	2218      	movs	r2, #24
 80040ec:	189b      	adds	r3, r3, r2
 80040ee:	19db      	adds	r3, r3, r7
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e021      	b.n	800413a <UART_SetConfig+0x22a>
 80040f6:	231b      	movs	r3, #27
 80040f8:	2218      	movs	r2, #24
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	19db      	adds	r3, r3, r7
 80040fe:	2202      	movs	r2, #2
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e01a      	b.n	800413a <UART_SetConfig+0x22a>
 8004104:	231b      	movs	r3, #27
 8004106:	2218      	movs	r2, #24
 8004108:	189b      	adds	r3, r3, r2
 800410a:	19db      	adds	r3, r3, r7
 800410c:	2204      	movs	r2, #4
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	e013      	b.n	800413a <UART_SetConfig+0x22a>
 8004112:	231b      	movs	r3, #27
 8004114:	2218      	movs	r2, #24
 8004116:	189b      	adds	r3, r3, r2
 8004118:	19db      	adds	r3, r3, r7
 800411a:	2208      	movs	r2, #8
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e00c      	b.n	800413a <UART_SetConfig+0x22a>
 8004120:	231b      	movs	r3, #27
 8004122:	2218      	movs	r2, #24
 8004124:	189b      	adds	r3, r3, r2
 8004126:	19db      	adds	r3, r3, r7
 8004128:	2210      	movs	r2, #16
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e005      	b.n	800413a <UART_SetConfig+0x22a>
 800412e:	231b      	movs	r3, #27
 8004130:	2218      	movs	r2, #24
 8004132:	189b      	adds	r3, r3, r2
 8004134:	19db      	adds	r3, r3, r7
 8004136:	2210      	movs	r2, #16
 8004138:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a46      	ldr	r2, [pc, #280]	; (8004258 <UART_SetConfig+0x348>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d000      	beq.n	8004146 <UART_SetConfig+0x236>
 8004144:	e09a      	b.n	800427c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004146:	231b      	movs	r3, #27
 8004148:	2218      	movs	r2, #24
 800414a:	189b      	adds	r3, r3, r2
 800414c:	19db      	adds	r3, r3, r7
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d01d      	beq.n	8004190 <UART_SetConfig+0x280>
 8004154:	dc20      	bgt.n	8004198 <UART_SetConfig+0x288>
 8004156:	2b04      	cmp	r3, #4
 8004158:	d015      	beq.n	8004186 <UART_SetConfig+0x276>
 800415a:	dc1d      	bgt.n	8004198 <UART_SetConfig+0x288>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <UART_SetConfig+0x256>
 8004160:	2b02      	cmp	r3, #2
 8004162:	d005      	beq.n	8004170 <UART_SetConfig+0x260>
 8004164:	e018      	b.n	8004198 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004166:	f7ff fcb5 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 800416a:	0003      	movs	r3, r0
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800416e:	e01c      	b.n	80041aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004170:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <UART_SetConfig+0x354>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2210      	movs	r2, #16
 8004176:	4013      	ands	r3, r2
 8004178:	d002      	beq.n	8004180 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800417a:	4b3e      	ldr	r3, [pc, #248]	; (8004274 <UART_SetConfig+0x364>)
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800417e:	e014      	b.n	80041aa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004180:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <UART_SetConfig+0x368>)
 8004182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004184:	e011      	b.n	80041aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004186:	f7ff fbf5 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 800418a:	0003      	movs	r3, r0
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800418e:	e00c      	b.n	80041aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004196:	e008      	b.n	80041aa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800419c:	231a      	movs	r3, #26
 800419e:	2218      	movs	r2, #24
 80041a0:	189b      	adds	r3, r3, r2
 80041a2:	19db      	adds	r3, r3, r7
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
        break;
 80041a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d100      	bne.n	80041b2 <UART_SetConfig+0x2a2>
 80041b0:	e133      	b.n	800441a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	0013      	movs	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d305      	bcc.n	80041ce <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d906      	bls.n	80041dc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80041ce:	231a      	movs	r3, #26
 80041d0:	2218      	movs	r2, #24
 80041d2:	189b      	adds	r3, r3, r2
 80041d4:	19db      	adds	r3, r3, r7
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e11e      	b.n	800441a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	6939      	ldr	r1, [r7, #16]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	000b      	movs	r3, r1
 80041ea:	0e1b      	lsrs	r3, r3, #24
 80041ec:	0010      	movs	r0, r2
 80041ee:	0205      	lsls	r5, r0, #8
 80041f0:	431d      	orrs	r5, r3
 80041f2:	000b      	movs	r3, r1
 80041f4:	021c      	lsls	r4, r3, #8
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	68b8      	ldr	r0, [r7, #8]
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	1900      	adds	r0, r0, r4
 8004208:	4169      	adcs	r1, r5
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	2300      	movs	r3, #0
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f7fc f8f6 	bl	8000408 <__aeabi_uldivmod>
 800421c:	0002      	movs	r2, r0
 800421e:	000b      	movs	r3, r1
 8004220:	0013      	movs	r3, r2
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004226:	23c0      	movs	r3, #192	; 0xc0
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	429a      	cmp	r2, r3
 800422c:	d309      	bcc.n	8004242 <UART_SetConfig+0x332>
 800422e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	035b      	lsls	r3, r3, #13
 8004234:	429a      	cmp	r2, r3
 8004236:	d204      	bcs.n	8004242 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800423e:	60da      	str	r2, [r3, #12]
 8004240:	e0eb      	b.n	800441a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004242:	231a      	movs	r3, #26
 8004244:	2218      	movs	r2, #24
 8004246:	189b      	adds	r3, r3, r2
 8004248:	19db      	adds	r3, r3, r7
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e0e4      	b.n	800441a <UART_SetConfig+0x50a>
 8004250:	efff69f3 	.word	0xefff69f3
 8004254:	ffffcfff 	.word	0xffffcfff
 8004258:	40004800 	.word	0x40004800
 800425c:	fffff4ff 	.word	0xfffff4ff
 8004260:	40013800 	.word	0x40013800
 8004264:	40021000 	.word	0x40021000
 8004268:	40004400 	.word	0x40004400
 800426c:	40004c00 	.word	0x40004c00
 8004270:	40005000 	.word	0x40005000
 8004274:	003d0900 	.word	0x003d0900
 8004278:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	429a      	cmp	r2, r3
 8004286:	d000      	beq.n	800428a <UART_SetConfig+0x37a>
 8004288:	e070      	b.n	800436c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800428a:	231b      	movs	r3, #27
 800428c:	2218      	movs	r2, #24
 800428e:	189b      	adds	r3, r3, r2
 8004290:	19db      	adds	r3, r3, r7
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b08      	cmp	r3, #8
 8004296:	d822      	bhi.n	80042de <UART_SetConfig+0x3ce>
 8004298:	009a      	lsls	r2, r3, #2
 800429a:	4b67      	ldr	r3, [pc, #412]	; (8004438 <UART_SetConfig+0x528>)
 800429c:	18d3      	adds	r3, r2, r3
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042a2:	f7ff fc17 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 80042a6:	0003      	movs	r3, r0
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042aa:	e021      	b.n	80042f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ac:	f7ff fc28 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 80042b0:	0003      	movs	r3, r0
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042b4:	e01c      	b.n	80042f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042b6:	4b61      	ldr	r3, [pc, #388]	; (800443c <UART_SetConfig+0x52c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2210      	movs	r2, #16
 80042bc:	4013      	ands	r3, r2
 80042be:	d002      	beq.n	80042c6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042c0:	4b5f      	ldr	r3, [pc, #380]	; (8004440 <UART_SetConfig+0x530>)
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042c4:	e014      	b.n	80042f0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80042c6:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <UART_SetConfig+0x534>)
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042ca:	e011      	b.n	80042f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042cc:	f7ff fb52 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 80042d0:	0003      	movs	r3, r0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042d4:	e00c      	b.n	80042f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042dc:	e008      	b.n	80042f0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80042e2:	231a      	movs	r3, #26
 80042e4:	2218      	movs	r2, #24
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	19db      	adds	r3, r3, r7
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
        break;
 80042ee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d100      	bne.n	80042f8 <UART_SetConfig+0x3e8>
 80042f6:	e090      	b.n	800441a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	005a      	lsls	r2, r3, #1
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	18d2      	adds	r2, r2, r3
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	0019      	movs	r1, r3
 800430a:	0010      	movs	r0, r2
 800430c:	f7fb ff06 	bl	800011c <__udivsi3>
 8004310:	0003      	movs	r3, r0
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d921      	bls.n	800435e <UART_SetConfig+0x44e>
 800431a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	025b      	lsls	r3, r3, #9
 8004320:	429a      	cmp	r2, r3
 8004322:	d21c      	bcs.n	800435e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	b29a      	uxth	r2, r3
 8004328:	200e      	movs	r0, #14
 800432a:	2418      	movs	r4, #24
 800432c:	1903      	adds	r3, r0, r4
 800432e:	19db      	adds	r3, r3, r7
 8004330:	210f      	movs	r1, #15
 8004332:	438a      	bics	r2, r1
 8004334:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	2207      	movs	r2, #7
 800433e:	4013      	ands	r3, r2
 8004340:	b299      	uxth	r1, r3
 8004342:	1903      	adds	r3, r0, r4
 8004344:	19db      	adds	r3, r3, r7
 8004346:	1902      	adds	r2, r0, r4
 8004348:	19d2      	adds	r2, r2, r7
 800434a:	8812      	ldrh	r2, [r2, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	1902      	adds	r2, r0, r4
 8004356:	19d2      	adds	r2, r2, r7
 8004358:	8812      	ldrh	r2, [r2, #0]
 800435a:	60da      	str	r2, [r3, #12]
 800435c:	e05d      	b.n	800441a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800435e:	231a      	movs	r3, #26
 8004360:	2218      	movs	r2, #24
 8004362:	189b      	adds	r3, r3, r2
 8004364:	19db      	adds	r3, r3, r7
 8004366:	2201      	movs	r2, #1
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e056      	b.n	800441a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800436c:	231b      	movs	r3, #27
 800436e:	2218      	movs	r2, #24
 8004370:	189b      	adds	r3, r3, r2
 8004372:	19db      	adds	r3, r3, r7
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b08      	cmp	r3, #8
 8004378:	d822      	bhi.n	80043c0 <UART_SetConfig+0x4b0>
 800437a:	009a      	lsls	r2, r3, #2
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <UART_SetConfig+0x538>)
 800437e:	18d3      	adds	r3, r2, r3
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004384:	f7ff fba6 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8004388:	0003      	movs	r3, r0
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800438c:	e021      	b.n	80043d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800438e:	f7ff fbb7 	bl	8003b00 <HAL_RCC_GetPCLK2Freq>
 8004392:	0003      	movs	r3, r0
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004396:	e01c      	b.n	80043d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004398:	4b28      	ldr	r3, [pc, #160]	; (800443c <UART_SetConfig+0x52c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2210      	movs	r2, #16
 800439e:	4013      	ands	r3, r2
 80043a0:	d002      	beq.n	80043a8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043a2:	4b27      	ldr	r3, [pc, #156]	; (8004440 <UART_SetConfig+0x530>)
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043a6:	e014      	b.n	80043d2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80043a8:	4b26      	ldr	r3, [pc, #152]	; (8004444 <UART_SetConfig+0x534>)
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043ac:	e011      	b.n	80043d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ae:	f7ff fae1 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 80043b2:	0003      	movs	r3, r0
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043b6:	e00c      	b.n	80043d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	021b      	lsls	r3, r3, #8
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043be:	e008      	b.n	80043d2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043c4:	231a      	movs	r3, #26
 80043c6:	2218      	movs	r2, #24
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	2201      	movs	r2, #1
 80043ce:	701a      	strb	r2, [r3, #0]
        break;
 80043d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	085a      	lsrs	r2, r3, #1
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	18d2      	adds	r2, r2, r3
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	0019      	movs	r1, r3
 80043e8:	0010      	movs	r0, r2
 80043ea:	f7fb fe97 	bl	800011c <__udivsi3>
 80043ee:	0003      	movs	r3, r0
 80043f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2b0f      	cmp	r3, #15
 80043f6:	d90a      	bls.n	800440e <UART_SetConfig+0x4fe>
 80043f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	025b      	lsls	r3, r3, #9
 80043fe:	429a      	cmp	r2, r3
 8004400:	d205      	bcs.n	800440e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	b29a      	uxth	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
 800440c:	e005      	b.n	800441a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800440e:	231a      	movs	r3, #26
 8004410:	2218      	movs	r2, #24
 8004412:	189b      	adds	r3, r3, r2
 8004414:	19db      	adds	r3, r3, r7
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2200      	movs	r2, #0
 800441e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2200      	movs	r2, #0
 8004424:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004426:	231a      	movs	r3, #26
 8004428:	2218      	movs	r2, #24
 800442a:	189b      	adds	r3, r3, r2
 800442c:	19db      	adds	r3, r3, r7
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	0018      	movs	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	b00e      	add	sp, #56	; 0x38
 8004436:	bdb0      	pop	{r4, r5, r7, pc}
 8004438:	0800665c 	.word	0x0800665c
 800443c:	40021000 	.word	0x40021000
 8004440:	003d0900 	.word	0x003d0900
 8004444:	00f42400 	.word	0x00f42400
 8004448:	08006680 	.word	0x08006680

0800444c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	2201      	movs	r2, #1
 800445a:	4013      	ands	r3, r2
 800445c:	d00b      	beq.n	8004476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a4a      	ldr	r2, [pc, #296]	; (8004590 <UART_AdvFeatureConfig+0x144>)
 8004466:	4013      	ands	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2202      	movs	r2, #2
 800447c:	4013      	ands	r3, r2
 800447e:	d00b      	beq.n	8004498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4a43      	ldr	r2, [pc, #268]	; (8004594 <UART_AdvFeatureConfig+0x148>)
 8004488:	4013      	ands	r3, r2
 800448a:	0019      	movs	r1, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	2204      	movs	r2, #4
 800449e:	4013      	ands	r3, r2
 80044a0:	d00b      	beq.n	80044ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <UART_AdvFeatureConfig+0x14c>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2208      	movs	r2, #8
 80044c0:	4013      	ands	r3, r2
 80044c2:	d00b      	beq.n	80044dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4a34      	ldr	r2, [pc, #208]	; (800459c <UART_AdvFeatureConfig+0x150>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2210      	movs	r2, #16
 80044e2:	4013      	ands	r3, r2
 80044e4:	d00b      	beq.n	80044fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <UART_AdvFeatureConfig+0x154>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	2220      	movs	r2, #32
 8004504:	4013      	ands	r3, r2
 8004506:	d00b      	beq.n	8004520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <UART_AdvFeatureConfig+0x158>)
 8004510:	4013      	ands	r3, r2
 8004512:	0019      	movs	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2240      	movs	r2, #64	; 0x40
 8004526:	4013      	ands	r3, r2
 8004528:	d01d      	beq.n	8004566 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a1d      	ldr	r2, [pc, #116]	; (80045a8 <UART_AdvFeatureConfig+0x15c>)
 8004532:	4013      	ands	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	035b      	lsls	r3, r3, #13
 800454a:	429a      	cmp	r2, r3
 800454c:	d10b      	bne.n	8004566 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a15      	ldr	r2, [pc, #84]	; (80045ac <UART_AdvFeatureConfig+0x160>)
 8004556:	4013      	ands	r3, r2
 8004558:	0019      	movs	r1, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	4013      	ands	r3, r2
 800456e:	d00b      	beq.n	8004588 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4a0e      	ldr	r2, [pc, #56]	; (80045b0 <UART_AdvFeatureConfig+0x164>)
 8004578:	4013      	ands	r3, r2
 800457a:	0019      	movs	r1, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	605a      	str	r2, [r3, #4]
  }
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b002      	add	sp, #8
 800458e:	bd80      	pop	{r7, pc}
 8004590:	fffdffff 	.word	0xfffdffff
 8004594:	fffeffff 	.word	0xfffeffff
 8004598:	fffbffff 	.word	0xfffbffff
 800459c:	ffff7fff 	.word	0xffff7fff
 80045a0:	ffffefff 	.word	0xffffefff
 80045a4:	ffffdfff 	.word	0xffffdfff
 80045a8:	ffefffff 	.word	0xffefffff
 80045ac:	ff9fffff 	.word	0xff9fffff
 80045b0:	fff7ffff 	.word	0xfff7ffff

080045b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b092      	sub	sp, #72	; 0x48
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2284      	movs	r2, #132	; 0x84
 80045c0:	2100      	movs	r1, #0
 80045c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045c4:	f7fd faea 	bl	8001b9c <HAL_GetTick>
 80045c8:	0003      	movs	r3, r0
 80045ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2208      	movs	r2, #8
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d12c      	bne.n	8004634 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045dc:	2280      	movs	r2, #128	; 0x80
 80045de:	0391      	lsls	r1, r2, #14
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4a46      	ldr	r2, [pc, #280]	; (80046fc <UART_CheckIdleState+0x148>)
 80045e4:	9200      	str	r2, [sp, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f000 f88c 	bl	8004704 <UART_WaitOnFlagUntilTimeout>
 80045ec:	1e03      	subs	r3, r0, #0
 80045ee:	d021      	beq.n	8004634 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f0:	f3ef 8310 	mrs	r3, PRIMASK
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045fa:	2301      	movs	r3, #1
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			; (mov r8, r8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	438a      	bics	r2, r1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2278      	movs	r2, #120	; 0x78
 800462c:	2100      	movs	r1, #0
 800462e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e05f      	b.n	80046f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2204      	movs	r2, #4
 800463c:	4013      	ands	r3, r2
 800463e:	2b04      	cmp	r3, #4
 8004640:	d146      	bne.n	80046d0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004644:	2280      	movs	r2, #128	; 0x80
 8004646:	03d1      	lsls	r1, r2, #15
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4a2c      	ldr	r2, [pc, #176]	; (80046fc <UART_CheckIdleState+0x148>)
 800464c:	9200      	str	r2, [sp, #0]
 800464e:	2200      	movs	r2, #0
 8004650:	f000 f858 	bl	8004704 <UART_WaitOnFlagUntilTimeout>
 8004654:	1e03      	subs	r3, r0, #0
 8004656:	d03b      	beq.n	80046d0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	60fb      	str	r3, [r7, #12]
  return(result);
 800465e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
 8004662:	2301      	movs	r3, #1
 8004664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4921      	ldr	r1, [pc, #132]	; (8004700 <UART_CheckIdleState+0x14c>)
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004690:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004692:	633b      	str	r3, [r7, #48]	; 0x30
 8004694:	2301      	movs	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2101      	movs	r1, #1
 80046ac:	438a      	bics	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	2120      	movs	r1, #32
 80046c2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2278      	movs	r2, #120	; 0x78
 80046c8:	2100      	movs	r1, #0
 80046ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e011      	b.n	80046f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2280      	movs	r2, #128	; 0x80
 80046da:	2120      	movs	r1, #32
 80046dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2278      	movs	r2, #120	; 0x78
 80046ee:	2100      	movs	r1, #0
 80046f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b010      	add	sp, #64	; 0x40
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	01ffffff 	.word	0x01ffffff
 8004700:	fffffedf 	.word	0xfffffedf

08004704 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	1dfb      	adds	r3, r7, #7
 8004712:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004714:	e04b      	b.n	80047ae <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	3301      	adds	r3, #1
 800471a:	d048      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fd fa3e 	bl	8001b9c <HAL_GetTick>
 8004720:	0002      	movs	r2, r0
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <UART_WaitOnFlagUntilTimeout+0x2e>
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e04b      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2204      	movs	r2, #4
 800473e:	4013      	ands	r3, r2
 8004740:	d035      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2208      	movs	r2, #8
 800474a:	4013      	ands	r3, r2
 800474c:	2b08      	cmp	r3, #8
 800474e:	d111      	bne.n	8004774 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2208      	movs	r2, #8
 8004756:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f83c 	bl	80047d8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2284      	movs	r2, #132	; 0x84
 8004764:	2108      	movs	r1, #8
 8004766:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2278      	movs	r2, #120	; 0x78
 800476c:	2100      	movs	r1, #0
 800476e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e02c      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	401a      	ands	r2, r3
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	429a      	cmp	r2, r3
 8004786:	d112      	bne.n	80047ae <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	0112      	lsls	r2, r2, #4
 8004790:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 f81f 	bl	80047d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2284      	movs	r2, #132	; 0x84
 800479e:	2120      	movs	r1, #32
 80047a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2278      	movs	r2, #120	; 0x78
 80047a6:	2100      	movs	r1, #0
 80047a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e00f      	b.n	80047ce <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	425a      	negs	r2, r3
 80047be:	4153      	adcs	r3, r2
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	001a      	movs	r2, r3
 80047c4:	1dfb      	adds	r3, r7, #7
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d0a4      	beq.n	8004716 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b004      	add	sp, #16
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08e      	sub	sp, #56	; 0x38
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e0:	f3ef 8310 	mrs	r3, PRIMASK
 80047e4:	617b      	str	r3, [r7, #20]
  return(result);
 80047e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ea:	2301      	movs	r3, #1
 80047ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f383 8810 	msr	PRIMASK, r3
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4926      	ldr	r1, [pc, #152]	; (800489c <UART_EndRxTransfer+0xc4>)
 8004802:	400a      	ands	r2, r1
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	f383 8810 	msr	PRIMASK, r3
}
 8004810:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004812:	f3ef 8310 	mrs	r3, PRIMASK
 8004816:	623b      	str	r3, [r7, #32]
  return(result);
 8004818:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481a:	633b      	str	r3, [r7, #48]	; 0x30
 800481c:	2301      	movs	r3, #1
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	f383 8810 	msr	PRIMASK, r3
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2101      	movs	r1, #1
 8004834:	438a      	bics	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	f383 8810 	msr	PRIMASK, r3
}
 8004842:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	2b01      	cmp	r3, #1
 800484a:	d118      	bne.n	800487e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484c:	f3ef 8310 	mrs	r3, PRIMASK
 8004850:	60bb      	str	r3, [r7, #8]
  return(result);
 8004852:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004856:	2301      	movs	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f383 8810 	msr	PRIMASK, r3
}
 8004860:	46c0      	nop			; (mov r8, r8)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2110      	movs	r1, #16
 800486e:	438a      	bics	r2, r1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f383 8810 	msr	PRIMASK, r3
}
 800487c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	2120      	movs	r1, #32
 8004884:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b00e      	add	sp, #56	; 0x38
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	fffffedf 	.word	0xfffffedf

080048a0 <rand>:
 80048a0:	4b16      	ldr	r3, [pc, #88]	; (80048fc <rand+0x5c>)
 80048a2:	b510      	push	{r4, lr}
 80048a4:	681c      	ldr	r4, [r3, #0]
 80048a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d116      	bne.n	80048da <rand+0x3a>
 80048ac:	2018      	movs	r0, #24
 80048ae:	f000 fa1d 	bl	8004cec <malloc>
 80048b2:	1e02      	subs	r2, r0, #0
 80048b4:	6320      	str	r0, [r4, #48]	; 0x30
 80048b6:	d104      	bne.n	80048c2 <rand+0x22>
 80048b8:	2152      	movs	r1, #82	; 0x52
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <rand+0x60>)
 80048bc:	4811      	ldr	r0, [pc, #68]	; (8004904 <rand+0x64>)
 80048be:	f000 f9ad 	bl	8004c1c <__assert_func>
 80048c2:	4b11      	ldr	r3, [pc, #68]	; (8004908 <rand+0x68>)
 80048c4:	2100      	movs	r1, #0
 80048c6:	6003      	str	r3, [r0, #0]
 80048c8:	4b10      	ldr	r3, [pc, #64]	; (800490c <rand+0x6c>)
 80048ca:	6043      	str	r3, [r0, #4]
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <rand+0x70>)
 80048ce:	6083      	str	r3, [r0, #8]
 80048d0:	230b      	movs	r3, #11
 80048d2:	8183      	strh	r3, [r0, #12]
 80048d4:	2001      	movs	r0, #1
 80048d6:	6110      	str	r0, [r2, #16]
 80048d8:	6151      	str	r1, [r2, #20]
 80048da:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80048dc:	4a0d      	ldr	r2, [pc, #52]	; (8004914 <rand+0x74>)
 80048de:	6920      	ldr	r0, [r4, #16]
 80048e0:	6961      	ldr	r1, [r4, #20]
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <rand+0x78>)
 80048e4:	f7fb fdb0 	bl	8000448 <__aeabi_lmul>
 80048e8:	2201      	movs	r2, #1
 80048ea:	2300      	movs	r3, #0
 80048ec:	1880      	adds	r0, r0, r2
 80048ee:	4159      	adcs	r1, r3
 80048f0:	6120      	str	r0, [r4, #16]
 80048f2:	6161      	str	r1, [r4, #20]
 80048f4:	0048      	lsls	r0, r1, #1
 80048f6:	0840      	lsrs	r0, r0, #1
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	46c0      	nop			; (mov r8, r8)
 80048fc:	2000006c 	.word	0x2000006c
 8004900:	080066a4 	.word	0x080066a4
 8004904:	080066bb 	.word	0x080066bb
 8004908:	abcd330e 	.word	0xabcd330e
 800490c:	e66d1234 	.word	0xe66d1234
 8004910:	0005deec 	.word	0x0005deec
 8004914:	4c957f2d 	.word	0x4c957f2d
 8004918:	5851f42d 	.word	0x5851f42d

0800491c <std>:
 800491c:	2300      	movs	r3, #0
 800491e:	b510      	push	{r4, lr}
 8004920:	0004      	movs	r4, r0
 8004922:	6003      	str	r3, [r0, #0]
 8004924:	6043      	str	r3, [r0, #4]
 8004926:	6083      	str	r3, [r0, #8]
 8004928:	8181      	strh	r1, [r0, #12]
 800492a:	6643      	str	r3, [r0, #100]	; 0x64
 800492c:	0019      	movs	r1, r3
 800492e:	81c2      	strh	r2, [r0, #14]
 8004930:	6103      	str	r3, [r0, #16]
 8004932:	6143      	str	r3, [r0, #20]
 8004934:	6183      	str	r3, [r0, #24]
 8004936:	2208      	movs	r2, #8
 8004938:	305c      	adds	r0, #92	; 0x5c
 800493a:	f000 f8ed 	bl	8004b18 <memset>
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <std+0x38>)
 8004940:	6224      	str	r4, [r4, #32]
 8004942:	6263      	str	r3, [r4, #36]	; 0x24
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <std+0x3c>)
 8004946:	62a3      	str	r3, [r4, #40]	; 0x28
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <std+0x40>)
 800494a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800494c:	4b04      	ldr	r3, [pc, #16]	; (8004960 <std+0x44>)
 800494e:	6323      	str	r3, [r4, #48]	; 0x30
 8004950:	bd10      	pop	{r4, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	08004a81 	.word	0x08004a81
 8004958:	08004aa9 	.word	0x08004aa9
 800495c:	08004ae1 	.word	0x08004ae1
 8004960:	08004b0d 	.word	0x08004b0d

08004964 <stdio_exit_handler>:
 8004964:	b510      	push	{r4, lr}
 8004966:	4a03      	ldr	r2, [pc, #12]	; (8004974 <stdio_exit_handler+0x10>)
 8004968:	4903      	ldr	r1, [pc, #12]	; (8004978 <stdio_exit_handler+0x14>)
 800496a:	4804      	ldr	r0, [pc, #16]	; (800497c <stdio_exit_handler+0x18>)
 800496c:	f000 f86c 	bl	8004a48 <_fwalk_sglue>
 8004970:	bd10      	pop	{r4, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	20000014 	.word	0x20000014
 8004978:	0800527d 	.word	0x0800527d
 800497c:	20000020 	.word	0x20000020

08004980 <cleanup_stdio>:
 8004980:	6841      	ldr	r1, [r0, #4]
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <cleanup_stdio+0x30>)
 8004984:	b510      	push	{r4, lr}
 8004986:	0004      	movs	r4, r0
 8004988:	4299      	cmp	r1, r3
 800498a:	d001      	beq.n	8004990 <cleanup_stdio+0x10>
 800498c:	f000 fc76 	bl	800527c <_fflush_r>
 8004990:	68a1      	ldr	r1, [r4, #8]
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <cleanup_stdio+0x34>)
 8004994:	4299      	cmp	r1, r3
 8004996:	d002      	beq.n	800499e <cleanup_stdio+0x1e>
 8004998:	0020      	movs	r0, r4
 800499a:	f000 fc6f 	bl	800527c <_fflush_r>
 800499e:	68e1      	ldr	r1, [r4, #12]
 80049a0:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <cleanup_stdio+0x38>)
 80049a2:	4299      	cmp	r1, r3
 80049a4:	d002      	beq.n	80049ac <cleanup_stdio+0x2c>
 80049a6:	0020      	movs	r0, r4
 80049a8:	f000 fc68 	bl	800527c <_fflush_r>
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	200005dc 	.word	0x200005dc
 80049b4:	20000644 	.word	0x20000644
 80049b8:	200006ac 	.word	0x200006ac

080049bc <global_stdio_init.part.0>:
 80049bc:	b510      	push	{r4, lr}
 80049be:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <global_stdio_init.part.0+0x28>)
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <global_stdio_init.part.0+0x2c>)
 80049c2:	2104      	movs	r1, #4
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	4809      	ldr	r0, [pc, #36]	; (80049ec <global_stdio_init.part.0+0x30>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	f7ff ffa7 	bl	800491c <std>
 80049ce:	2201      	movs	r2, #1
 80049d0:	2109      	movs	r1, #9
 80049d2:	4807      	ldr	r0, [pc, #28]	; (80049f0 <global_stdio_init.part.0+0x34>)
 80049d4:	f7ff ffa2 	bl	800491c <std>
 80049d8:	2202      	movs	r2, #2
 80049da:	2112      	movs	r1, #18
 80049dc:	4805      	ldr	r0, [pc, #20]	; (80049f4 <global_stdio_init.part.0+0x38>)
 80049de:	f7ff ff9d 	bl	800491c <std>
 80049e2:	bd10      	pop	{r4, pc}
 80049e4:	20000714 	.word	0x20000714
 80049e8:	08004965 	.word	0x08004965
 80049ec:	200005dc 	.word	0x200005dc
 80049f0:	20000644 	.word	0x20000644
 80049f4:	200006ac 	.word	0x200006ac

080049f8 <__sfp_lock_acquire>:
 80049f8:	b510      	push	{r4, lr}
 80049fa:	4802      	ldr	r0, [pc, #8]	; (8004a04 <__sfp_lock_acquire+0xc>)
 80049fc:	f000 f90c 	bl	8004c18 <__retarget_lock_acquire_recursive>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	2000071d 	.word	0x2000071d

08004a08 <__sfp_lock_release>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	4802      	ldr	r0, [pc, #8]	; (8004a14 <__sfp_lock_release+0xc>)
 8004a0c:	f000 f905 	bl	8004c1a <__retarget_lock_release_recursive>
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	2000071d 	.word	0x2000071d

08004a18 <__sinit>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	0004      	movs	r4, r0
 8004a1c:	f7ff ffec 	bl	80049f8 <__sfp_lock_acquire>
 8004a20:	6a23      	ldr	r3, [r4, #32]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <__sinit+0x14>
 8004a26:	f7ff ffef 	bl	8004a08 <__sfp_lock_release>
 8004a2a:	bd10      	pop	{r4, pc}
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <__sinit+0x28>)
 8004a2e:	6223      	str	r3, [r4, #32]
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <__sinit+0x2c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f6      	bne.n	8004a26 <__sinit+0xe>
 8004a38:	f7ff ffc0 	bl	80049bc <global_stdio_init.part.0>
 8004a3c:	e7f3      	b.n	8004a26 <__sinit+0xe>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	08004981 	.word	0x08004981
 8004a44:	20000714 	.word	0x20000714

08004a48 <_fwalk_sglue>:
 8004a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a4a:	0014      	movs	r4, r2
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	9000      	str	r0, [sp, #0]
 8004a50:	9101      	str	r1, [sp, #4]
 8004a52:	68a5      	ldr	r5, [r4, #8]
 8004a54:	6867      	ldr	r7, [r4, #4]
 8004a56:	3f01      	subs	r7, #1
 8004a58:	d504      	bpl.n	8004a64 <_fwalk_sglue+0x1c>
 8004a5a:	6824      	ldr	r4, [r4, #0]
 8004a5c:	2c00      	cmp	r4, #0
 8004a5e:	d1f8      	bne.n	8004a52 <_fwalk_sglue+0xa>
 8004a60:	0030      	movs	r0, r6
 8004a62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a64:	89ab      	ldrh	r3, [r5, #12]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d908      	bls.n	8004a7c <_fwalk_sglue+0x34>
 8004a6a:	220e      	movs	r2, #14
 8004a6c:	5eab      	ldrsh	r3, [r5, r2]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	d004      	beq.n	8004a7c <_fwalk_sglue+0x34>
 8004a72:	0029      	movs	r1, r5
 8004a74:	9800      	ldr	r0, [sp, #0]
 8004a76:	9b01      	ldr	r3, [sp, #4]
 8004a78:	4798      	blx	r3
 8004a7a:	4306      	orrs	r6, r0
 8004a7c:	3568      	adds	r5, #104	; 0x68
 8004a7e:	e7ea      	b.n	8004a56 <_fwalk_sglue+0xe>

08004a80 <__sread>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	000c      	movs	r4, r1
 8004a84:	250e      	movs	r5, #14
 8004a86:	5f49      	ldrsh	r1, [r1, r5]
 8004a88:	f000 f874 	bl	8004b74 <_read_r>
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	db03      	blt.n	8004a98 <__sread+0x18>
 8004a90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a92:	181b      	adds	r3, r3, r0
 8004a94:	6563      	str	r3, [r4, #84]	; 0x54
 8004a96:	bd70      	pop	{r4, r5, r6, pc}
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	4a02      	ldr	r2, [pc, #8]	; (8004aa4 <__sread+0x24>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	e7f9      	b.n	8004a96 <__sread+0x16>
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	ffffefff 	.word	0xffffefff

08004aa8 <__swrite>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	001f      	movs	r7, r3
 8004aac:	898b      	ldrh	r3, [r1, #12]
 8004aae:	0005      	movs	r5, r0
 8004ab0:	000c      	movs	r4, r1
 8004ab2:	0016      	movs	r6, r2
 8004ab4:	05db      	lsls	r3, r3, #23
 8004ab6:	d505      	bpl.n	8004ac4 <__swrite+0x1c>
 8004ab8:	230e      	movs	r3, #14
 8004aba:	5ec9      	ldrsh	r1, [r1, r3]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2302      	movs	r3, #2
 8004ac0:	f000 f844 	bl	8004b4c <_lseek_r>
 8004ac4:	89a3      	ldrh	r3, [r4, #12]
 8004ac6:	4a05      	ldr	r2, [pc, #20]	; (8004adc <__swrite+0x34>)
 8004ac8:	0028      	movs	r0, r5
 8004aca:	4013      	ands	r3, r2
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	0032      	movs	r2, r6
 8004ad0:	230e      	movs	r3, #14
 8004ad2:	5ee1      	ldrsh	r1, [r4, r3]
 8004ad4:	003b      	movs	r3, r7
 8004ad6:	f000 f861 	bl	8004b9c <_write_r>
 8004ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004adc:	ffffefff 	.word	0xffffefff

08004ae0 <__sseek>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	000c      	movs	r4, r1
 8004ae4:	250e      	movs	r5, #14
 8004ae6:	5f49      	ldrsh	r1, [r1, r5]
 8004ae8:	f000 f830 	bl	8004b4c <_lseek_r>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	1c42      	adds	r2, r0, #1
 8004af0:	d103      	bne.n	8004afa <__sseek+0x1a>
 8004af2:	4a05      	ldr	r2, [pc, #20]	; (8004b08 <__sseek+0x28>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	81a3      	strh	r3, [r4, #12]
 8004af8:	bd70      	pop	{r4, r5, r6, pc}
 8004afa:	2280      	movs	r2, #128	; 0x80
 8004afc:	0152      	lsls	r2, r2, #5
 8004afe:	4313      	orrs	r3, r2
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	6560      	str	r0, [r4, #84]	; 0x54
 8004b04:	e7f8      	b.n	8004af8 <__sseek+0x18>
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	ffffefff 	.word	0xffffefff

08004b0c <__sclose>:
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	230e      	movs	r3, #14
 8004b10:	5ec9      	ldrsh	r1, [r1, r3]
 8004b12:	f000 f809 	bl	8004b28 <_close_r>
 8004b16:	bd10      	pop	{r4, pc}

08004b18 <memset>:
 8004b18:	0003      	movs	r3, r0
 8004b1a:	1882      	adds	r2, r0, r2
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d100      	bne.n	8004b22 <memset+0xa>
 8004b20:	4770      	bx	lr
 8004b22:	7019      	strb	r1, [r3, #0]
 8004b24:	3301      	adds	r3, #1
 8004b26:	e7f9      	b.n	8004b1c <memset+0x4>

08004b28 <_close_r>:
 8004b28:	2300      	movs	r3, #0
 8004b2a:	b570      	push	{r4, r5, r6, lr}
 8004b2c:	4d06      	ldr	r5, [pc, #24]	; (8004b48 <_close_r+0x20>)
 8004b2e:	0004      	movs	r4, r0
 8004b30:	0008      	movs	r0, r1
 8004b32:	602b      	str	r3, [r5, #0]
 8004b34:	f7fc ff3a 	bl	80019ac <_close>
 8004b38:	1c43      	adds	r3, r0, #1
 8004b3a:	d103      	bne.n	8004b44 <_close_r+0x1c>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d000      	beq.n	8004b44 <_close_r+0x1c>
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	20000718 	.word	0x20000718

08004b4c <_lseek_r>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	0004      	movs	r4, r0
 8004b50:	0008      	movs	r0, r1
 8004b52:	0011      	movs	r1, r2
 8004b54:	001a      	movs	r2, r3
 8004b56:	2300      	movs	r3, #0
 8004b58:	4d05      	ldr	r5, [pc, #20]	; (8004b70 <_lseek_r+0x24>)
 8004b5a:	602b      	str	r3, [r5, #0]
 8004b5c:	f7fc ff47 	bl	80019ee <_lseek>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d103      	bne.n	8004b6c <_lseek_r+0x20>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d000      	beq.n	8004b6c <_lseek_r+0x20>
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20000718 	.word	0x20000718

08004b74 <_read_r>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	0004      	movs	r4, r0
 8004b78:	0008      	movs	r0, r1
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4d05      	ldr	r5, [pc, #20]	; (8004b98 <_read_r+0x24>)
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fc fed9 	bl	800193a <_read>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d103      	bne.n	8004b94 <_read_r+0x20>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d000      	beq.n	8004b94 <_read_r+0x20>
 8004b92:	6023      	str	r3, [r4, #0]
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	20000718 	.word	0x20000718

08004b9c <_write_r>:
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	0004      	movs	r4, r0
 8004ba0:	0008      	movs	r0, r1
 8004ba2:	0011      	movs	r1, r2
 8004ba4:	001a      	movs	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	4d05      	ldr	r5, [pc, #20]	; (8004bc0 <_write_r+0x24>)
 8004baa:	602b      	str	r3, [r5, #0]
 8004bac:	f7fc fee2 	bl	8001974 <_write>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d103      	bne.n	8004bbc <_write_r+0x20>
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d000      	beq.n	8004bbc <_write_r+0x20>
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	20000718 	.word	0x20000718

08004bc4 <__errno>:
 8004bc4:	4b01      	ldr	r3, [pc, #4]	; (8004bcc <__errno+0x8>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	4770      	bx	lr
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	2000006c 	.word	0x2000006c

08004bd0 <__libc_init_array>:
 8004bd0:	b570      	push	{r4, r5, r6, lr}
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	4c0c      	ldr	r4, [pc, #48]	; (8004c08 <__libc_init_array+0x38>)
 8004bd6:	4d0d      	ldr	r5, [pc, #52]	; (8004c0c <__libc_init_array+0x3c>)
 8004bd8:	1b64      	subs	r4, r4, r5
 8004bda:	10a4      	asrs	r4, r4, #2
 8004bdc:	42a6      	cmp	r6, r4
 8004bde:	d109      	bne.n	8004bf4 <__libc_init_array+0x24>
 8004be0:	2600      	movs	r6, #0
 8004be2:	f000 fe69 	bl	80058b8 <_init>
 8004be6:	4c0a      	ldr	r4, [pc, #40]	; (8004c10 <__libc_init_array+0x40>)
 8004be8:	4d0a      	ldr	r5, [pc, #40]	; (8004c14 <__libc_init_array+0x44>)
 8004bea:	1b64      	subs	r4, r4, r5
 8004bec:	10a4      	asrs	r4, r4, #2
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d105      	bne.n	8004bfe <__libc_init_array+0x2e>
 8004bf2:	bd70      	pop	{r4, r5, r6, pc}
 8004bf4:	00b3      	lsls	r3, r6, #2
 8004bf6:	58eb      	ldr	r3, [r5, r3]
 8004bf8:	4798      	blx	r3
 8004bfa:	3601      	adds	r6, #1
 8004bfc:	e7ee      	b.n	8004bdc <__libc_init_array+0xc>
 8004bfe:	00b3      	lsls	r3, r6, #2
 8004c00:	58eb      	ldr	r3, [r5, r3]
 8004c02:	4798      	blx	r3
 8004c04:	3601      	adds	r6, #1
 8004c06:	e7f2      	b.n	8004bee <__libc_init_array+0x1e>
 8004c08:	0800678c 	.word	0x0800678c
 8004c0c:	0800678c 	.word	0x0800678c
 8004c10:	08006790 	.word	0x08006790
 8004c14:	0800678c 	.word	0x0800678c

08004c18 <__retarget_lock_acquire_recursive>:
 8004c18:	4770      	bx	lr

08004c1a <__retarget_lock_release_recursive>:
 8004c1a:	4770      	bx	lr

08004c1c <__assert_func>:
 8004c1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004c1e:	0014      	movs	r4, r2
 8004c20:	001a      	movs	r2, r3
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <__assert_func+0x2c>)
 8004c24:	0005      	movs	r5, r0
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	000e      	movs	r6, r1
 8004c2a:	68d8      	ldr	r0, [r3, #12]
 8004c2c:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <__assert_func+0x30>)
 8004c2e:	2c00      	cmp	r4, #0
 8004c30:	d101      	bne.n	8004c36 <__assert_func+0x1a>
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <__assert_func+0x34>)
 8004c34:	001c      	movs	r4, r3
 8004c36:	4907      	ldr	r1, [pc, #28]	; (8004c54 <__assert_func+0x38>)
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	9402      	str	r4, [sp, #8]
 8004c3c:	002b      	movs	r3, r5
 8004c3e:	9600      	str	r6, [sp, #0]
 8004c40:	f000 fb48 	bl	80052d4 <fiprintf>
 8004c44:	f000 fb73 	bl	800532e <abort>
 8004c48:	2000006c 	.word	0x2000006c
 8004c4c:	08006713 	.word	0x08006713
 8004c50:	0800674e 	.word	0x0800674e
 8004c54:	08006720 	.word	0x08006720

08004c58 <_free_r>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	0005      	movs	r5, r0
 8004c5c:	2900      	cmp	r1, #0
 8004c5e:	d010      	beq.n	8004c82 <_free_r+0x2a>
 8004c60:	1f0c      	subs	r4, r1, #4
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da00      	bge.n	8004c6a <_free_r+0x12>
 8004c68:	18e4      	adds	r4, r4, r3
 8004c6a:	0028      	movs	r0, r5
 8004c6c:	f000 f8ec 	bl	8004e48 <__malloc_lock>
 8004c70:	4a1d      	ldr	r2, [pc, #116]	; (8004ce8 <_free_r+0x90>)
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <_free_r+0x2c>
 8004c78:	6063      	str	r3, [r4, #4]
 8004c7a:	6014      	str	r4, [r2, #0]
 8004c7c:	0028      	movs	r0, r5
 8004c7e:	f000 f8eb 	bl	8004e58 <__malloc_unlock>
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	d908      	bls.n	8004c9a <_free_r+0x42>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	1821      	adds	r1, r4, r0
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d1f3      	bne.n	8004c78 <_free_r+0x20>
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	1809      	adds	r1, r1, r0
 8004c96:	6021      	str	r1, [r4, #0]
 8004c98:	e7ee      	b.n	8004c78 <_free_r+0x20>
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <_free_r+0x4e>
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	d9f9      	bls.n	8004c9a <_free_r+0x42>
 8004ca6:	6811      	ldr	r1, [r2, #0]
 8004ca8:	1850      	adds	r0, r2, r1
 8004caa:	42a0      	cmp	r0, r4
 8004cac:	d10b      	bne.n	8004cc6 <_free_r+0x6e>
 8004cae:	6820      	ldr	r0, [r4, #0]
 8004cb0:	1809      	adds	r1, r1, r0
 8004cb2:	1850      	adds	r0, r2, r1
 8004cb4:	6011      	str	r1, [r2, #0]
 8004cb6:	4283      	cmp	r3, r0
 8004cb8:	d1e0      	bne.n	8004c7c <_free_r+0x24>
 8004cba:	6818      	ldr	r0, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	1841      	adds	r1, r0, r1
 8004cc0:	6011      	str	r1, [r2, #0]
 8004cc2:	6053      	str	r3, [r2, #4]
 8004cc4:	e7da      	b.n	8004c7c <_free_r+0x24>
 8004cc6:	42a0      	cmp	r0, r4
 8004cc8:	d902      	bls.n	8004cd0 <_free_r+0x78>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	602b      	str	r3, [r5, #0]
 8004cce:	e7d5      	b.n	8004c7c <_free_r+0x24>
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	1821      	adds	r1, r4, r0
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	d103      	bne.n	8004ce0 <_free_r+0x88>
 8004cd8:	6819      	ldr	r1, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	1809      	adds	r1, r1, r0
 8004cde:	6021      	str	r1, [r4, #0]
 8004ce0:	6063      	str	r3, [r4, #4]
 8004ce2:	6054      	str	r4, [r2, #4]
 8004ce4:	e7ca      	b.n	8004c7c <_free_r+0x24>
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	20000720 	.word	0x20000720

08004cec <malloc>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <malloc+0x10>)
 8004cf0:	0001      	movs	r1, r0
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	f000 f826 	bl	8004d44 <_malloc_r>
 8004cf8:	bd10      	pop	{r4, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	2000006c 	.word	0x2000006c

08004d00 <sbrk_aligned>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4e0f      	ldr	r6, [pc, #60]	; (8004d40 <sbrk_aligned+0x40>)
 8004d04:	000d      	movs	r5, r1
 8004d06:	6831      	ldr	r1, [r6, #0]
 8004d08:	0004      	movs	r4, r0
 8004d0a:	2900      	cmp	r1, #0
 8004d0c:	d102      	bne.n	8004d14 <sbrk_aligned+0x14>
 8004d0e:	f000 faf1 	bl	80052f4 <_sbrk_r>
 8004d12:	6030      	str	r0, [r6, #0]
 8004d14:	0029      	movs	r1, r5
 8004d16:	0020      	movs	r0, r4
 8004d18:	f000 faec 	bl	80052f4 <_sbrk_r>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	d00a      	beq.n	8004d36 <sbrk_aligned+0x36>
 8004d20:	2303      	movs	r3, #3
 8004d22:	1cc5      	adds	r5, r0, #3
 8004d24:	439d      	bics	r5, r3
 8004d26:	42a8      	cmp	r0, r5
 8004d28:	d007      	beq.n	8004d3a <sbrk_aligned+0x3a>
 8004d2a:	1a29      	subs	r1, r5, r0
 8004d2c:	0020      	movs	r0, r4
 8004d2e:	f000 fae1 	bl	80052f4 <_sbrk_r>
 8004d32:	3001      	adds	r0, #1
 8004d34:	d101      	bne.n	8004d3a <sbrk_aligned+0x3a>
 8004d36:	2501      	movs	r5, #1
 8004d38:	426d      	negs	r5, r5
 8004d3a:	0028      	movs	r0, r5
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	20000724 	.word	0x20000724

08004d44 <_malloc_r>:
 8004d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d46:	2203      	movs	r2, #3
 8004d48:	1ccb      	adds	r3, r1, #3
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	0006      	movs	r6, r0
 8004d50:	001f      	movs	r7, r3
 8004d52:	2b0c      	cmp	r3, #12
 8004d54:	d238      	bcs.n	8004dc8 <_malloc_r+0x84>
 8004d56:	270c      	movs	r7, #12
 8004d58:	42b9      	cmp	r1, r7
 8004d5a:	d837      	bhi.n	8004dcc <_malloc_r+0x88>
 8004d5c:	0030      	movs	r0, r6
 8004d5e:	f000 f873 	bl	8004e48 <__malloc_lock>
 8004d62:	4b38      	ldr	r3, [pc, #224]	; (8004e44 <_malloc_r+0x100>)
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	001c      	movs	r4, r3
 8004d6a:	2c00      	cmp	r4, #0
 8004d6c:	d133      	bne.n	8004dd6 <_malloc_r+0x92>
 8004d6e:	0039      	movs	r1, r7
 8004d70:	0030      	movs	r0, r6
 8004d72:	f7ff ffc5 	bl	8004d00 <sbrk_aligned>
 8004d76:	0004      	movs	r4, r0
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d15e      	bne.n	8004e3a <_malloc_r+0xf6>
 8004d7c:	9b00      	ldr	r3, [sp, #0]
 8004d7e:	681c      	ldr	r4, [r3, #0]
 8004d80:	0025      	movs	r5, r4
 8004d82:	2d00      	cmp	r5, #0
 8004d84:	d14e      	bne.n	8004e24 <_malloc_r+0xe0>
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	d051      	beq.n	8004e2e <_malloc_r+0xea>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	0029      	movs	r1, r5
 8004d8e:	18e3      	adds	r3, r4, r3
 8004d90:	0030      	movs	r0, r6
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	f000 faae 	bl	80052f4 <_sbrk_r>
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	4283      	cmp	r3, r0
 8004d9c:	d147      	bne.n	8004e2e <_malloc_r+0xea>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0030      	movs	r0, r6
 8004da2:	1aff      	subs	r7, r7, r3
 8004da4:	0039      	movs	r1, r7
 8004da6:	f7ff ffab 	bl	8004d00 <sbrk_aligned>
 8004daa:	3001      	adds	r0, #1
 8004dac:	d03f      	beq.n	8004e2e <_malloc_r+0xea>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	19db      	adds	r3, r3, r7
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	9b00      	ldr	r3, [sp, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d040      	beq.n	8004e3e <_malloc_r+0xfa>
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	42a2      	cmp	r2, r4
 8004dc0:	d133      	bne.n	8004e2a <_malloc_r+0xe6>
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	605a      	str	r2, [r3, #4]
 8004dc6:	e014      	b.n	8004df2 <_malloc_r+0xae>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	dac5      	bge.n	8004d58 <_malloc_r+0x14>
 8004dcc:	230c      	movs	r3, #12
 8004dce:	2500      	movs	r5, #0
 8004dd0:	6033      	str	r3, [r6, #0]
 8004dd2:	0028      	movs	r0, r5
 8004dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dd6:	6821      	ldr	r1, [r4, #0]
 8004dd8:	1bc9      	subs	r1, r1, r7
 8004dda:	d420      	bmi.n	8004e1e <_malloc_r+0xda>
 8004ddc:	290b      	cmp	r1, #11
 8004dde:	d918      	bls.n	8004e12 <_malloc_r+0xce>
 8004de0:	19e2      	adds	r2, r4, r7
 8004de2:	6027      	str	r7, [r4, #0]
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	d112      	bne.n	8004e0e <_malloc_r+0xca>
 8004de8:	9b00      	ldr	r3, [sp, #0]
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	6863      	ldr	r3, [r4, #4]
 8004dee:	6011      	str	r1, [r2, #0]
 8004df0:	6053      	str	r3, [r2, #4]
 8004df2:	0030      	movs	r0, r6
 8004df4:	0025      	movs	r5, r4
 8004df6:	f000 f82f 	bl	8004e58 <__malloc_unlock>
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	350b      	adds	r5, #11
 8004dfe:	1d23      	adds	r3, r4, #4
 8004e00:	4395      	bics	r5, r2
 8004e02:	1aea      	subs	r2, r5, r3
 8004e04:	429d      	cmp	r5, r3
 8004e06:	d0e4      	beq.n	8004dd2 <_malloc_r+0x8e>
 8004e08:	1b5b      	subs	r3, r3, r5
 8004e0a:	50a3      	str	r3, [r4, r2]
 8004e0c:	e7e1      	b.n	8004dd2 <_malloc_r+0x8e>
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	e7ec      	b.n	8004dec <_malloc_r+0xa8>
 8004e12:	6862      	ldr	r2, [r4, #4]
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	d1d5      	bne.n	8004dc4 <_malloc_r+0x80>
 8004e18:	9b00      	ldr	r3, [sp, #0]
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e7e9      	b.n	8004df2 <_malloc_r+0xae>
 8004e1e:	0023      	movs	r3, r4
 8004e20:	6864      	ldr	r4, [r4, #4]
 8004e22:	e7a2      	b.n	8004d6a <_malloc_r+0x26>
 8004e24:	002c      	movs	r4, r5
 8004e26:	686d      	ldr	r5, [r5, #4]
 8004e28:	e7ab      	b.n	8004d82 <_malloc_r+0x3e>
 8004e2a:	0013      	movs	r3, r2
 8004e2c:	e7c4      	b.n	8004db8 <_malloc_r+0x74>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	0030      	movs	r0, r6
 8004e32:	6033      	str	r3, [r6, #0]
 8004e34:	f000 f810 	bl	8004e58 <__malloc_unlock>
 8004e38:	e7cb      	b.n	8004dd2 <_malloc_r+0x8e>
 8004e3a:	6027      	str	r7, [r4, #0]
 8004e3c:	e7d9      	b.n	8004df2 <_malloc_r+0xae>
 8004e3e:	605b      	str	r3, [r3, #4]
 8004e40:	deff      	udf	#255	; 0xff
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	20000720 	.word	0x20000720

08004e48 <__malloc_lock>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4802      	ldr	r0, [pc, #8]	; (8004e54 <__malloc_lock+0xc>)
 8004e4c:	f7ff fee4 	bl	8004c18 <__retarget_lock_acquire_recursive>
 8004e50:	bd10      	pop	{r4, pc}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	2000071c 	.word	0x2000071c

08004e58 <__malloc_unlock>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4802      	ldr	r0, [pc, #8]	; (8004e64 <__malloc_unlock+0xc>)
 8004e5c:	f7ff fedd 	bl	8004c1a <__retarget_lock_release_recursive>
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	2000071c 	.word	0x2000071c

08004e68 <_printf_common>:
 8004e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6a:	0016      	movs	r6, r2
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	688a      	ldr	r2, [r1, #8]
 8004e70:	690b      	ldr	r3, [r1, #16]
 8004e72:	000c      	movs	r4, r1
 8004e74:	9000      	str	r0, [sp, #0]
 8004e76:	4293      	cmp	r3, r2
 8004e78:	da00      	bge.n	8004e7c <_printf_common+0x14>
 8004e7a:	0013      	movs	r3, r2
 8004e7c:	0022      	movs	r2, r4
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	3243      	adds	r2, #67	; 0x43
 8004e82:	7812      	ldrb	r2, [r2, #0]
 8004e84:	2a00      	cmp	r2, #0
 8004e86:	d001      	beq.n	8004e8c <_printf_common+0x24>
 8004e88:	3301      	adds	r3, #1
 8004e8a:	6033      	str	r3, [r6, #0]
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	069b      	lsls	r3, r3, #26
 8004e90:	d502      	bpl.n	8004e98 <_printf_common+0x30>
 8004e92:	6833      	ldr	r3, [r6, #0]
 8004e94:	3302      	adds	r3, #2
 8004e96:	6033      	str	r3, [r6, #0]
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	2306      	movs	r3, #6
 8004e9c:	0015      	movs	r5, r2
 8004e9e:	401d      	ands	r5, r3
 8004ea0:	421a      	tst	r2, r3
 8004ea2:	d027      	beq.n	8004ef4 <_printf_common+0x8c>
 8004ea4:	0023      	movs	r3, r4
 8004ea6:	3343      	adds	r3, #67	; 0x43
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	1e5a      	subs	r2, r3, #1
 8004eac:	4193      	sbcs	r3, r2
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	0692      	lsls	r2, r2, #26
 8004eb2:	d430      	bmi.n	8004f16 <_printf_common+0xae>
 8004eb4:	0022      	movs	r2, r4
 8004eb6:	9901      	ldr	r1, [sp, #4]
 8004eb8:	9800      	ldr	r0, [sp, #0]
 8004eba:	9d08      	ldr	r5, [sp, #32]
 8004ebc:	3243      	adds	r2, #67	; 0x43
 8004ebe:	47a8      	blx	r5
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d025      	beq.n	8004f10 <_printf_common+0xa8>
 8004ec4:	2206      	movs	r2, #6
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	2500      	movs	r5, #0
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d105      	bne.n	8004edc <_printf_common+0x74>
 8004ed0:	6833      	ldr	r3, [r6, #0]
 8004ed2:	68e5      	ldr	r5, [r4, #12]
 8004ed4:	1aed      	subs	r5, r5, r3
 8004ed6:	43eb      	mvns	r3, r5
 8004ed8:	17db      	asrs	r3, r3, #31
 8004eda:	401d      	ands	r5, r3
 8004edc:	68a3      	ldr	r3, [r4, #8]
 8004ede:	6922      	ldr	r2, [r4, #16]
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	dd01      	ble.n	8004ee8 <_printf_common+0x80>
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	18ed      	adds	r5, r5, r3
 8004ee8:	2600      	movs	r6, #0
 8004eea:	42b5      	cmp	r5, r6
 8004eec:	d120      	bne.n	8004f30 <_printf_common+0xc8>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e010      	b.n	8004f14 <_printf_common+0xac>
 8004ef2:	3501      	adds	r5, #1
 8004ef4:	68e3      	ldr	r3, [r4, #12]
 8004ef6:	6832      	ldr	r2, [r6, #0]
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	42ab      	cmp	r3, r5
 8004efc:	ddd2      	ble.n	8004ea4 <_printf_common+0x3c>
 8004efe:	0022      	movs	r2, r4
 8004f00:	2301      	movs	r3, #1
 8004f02:	9901      	ldr	r1, [sp, #4]
 8004f04:	9800      	ldr	r0, [sp, #0]
 8004f06:	9f08      	ldr	r7, [sp, #32]
 8004f08:	3219      	adds	r2, #25
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	d1f0      	bne.n	8004ef2 <_printf_common+0x8a>
 8004f10:	2001      	movs	r0, #1
 8004f12:	4240      	negs	r0, r0
 8004f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f16:	2030      	movs	r0, #48	; 0x30
 8004f18:	18e1      	adds	r1, r4, r3
 8004f1a:	3143      	adds	r1, #67	; 0x43
 8004f1c:	7008      	strb	r0, [r1, #0]
 8004f1e:	0021      	movs	r1, r4
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	3145      	adds	r1, #69	; 0x45
 8004f24:	7809      	ldrb	r1, [r1, #0]
 8004f26:	18a2      	adds	r2, r4, r2
 8004f28:	3243      	adds	r2, #67	; 0x43
 8004f2a:	3302      	adds	r3, #2
 8004f2c:	7011      	strb	r1, [r2, #0]
 8004f2e:	e7c1      	b.n	8004eb4 <_printf_common+0x4c>
 8004f30:	0022      	movs	r2, r4
 8004f32:	2301      	movs	r3, #1
 8004f34:	9901      	ldr	r1, [sp, #4]
 8004f36:	9800      	ldr	r0, [sp, #0]
 8004f38:	9f08      	ldr	r7, [sp, #32]
 8004f3a:	321a      	adds	r2, #26
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d0e6      	beq.n	8004f10 <_printf_common+0xa8>
 8004f42:	3601      	adds	r6, #1
 8004f44:	e7d1      	b.n	8004eea <_printf_common+0x82>
	...

08004f48 <_printf_i>:
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	b08b      	sub	sp, #44	; 0x2c
 8004f4c:	9206      	str	r2, [sp, #24]
 8004f4e:	000a      	movs	r2, r1
 8004f50:	3243      	adds	r2, #67	; 0x43
 8004f52:	9307      	str	r3, [sp, #28]
 8004f54:	9005      	str	r0, [sp, #20]
 8004f56:	9204      	str	r2, [sp, #16]
 8004f58:	7e0a      	ldrb	r2, [r1, #24]
 8004f5a:	000c      	movs	r4, r1
 8004f5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f5e:	2a78      	cmp	r2, #120	; 0x78
 8004f60:	d809      	bhi.n	8004f76 <_printf_i+0x2e>
 8004f62:	2a62      	cmp	r2, #98	; 0x62
 8004f64:	d80b      	bhi.n	8004f7e <_printf_i+0x36>
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	d100      	bne.n	8004f6c <_printf_i+0x24>
 8004f6a:	e0be      	b.n	80050ea <_printf_i+0x1a2>
 8004f6c:	497c      	ldr	r1, [pc, #496]	; (8005160 <_printf_i+0x218>)
 8004f6e:	9103      	str	r1, [sp, #12]
 8004f70:	2a58      	cmp	r2, #88	; 0x58
 8004f72:	d100      	bne.n	8004f76 <_printf_i+0x2e>
 8004f74:	e093      	b.n	800509e <_printf_i+0x156>
 8004f76:	0026      	movs	r6, r4
 8004f78:	3642      	adds	r6, #66	; 0x42
 8004f7a:	7032      	strb	r2, [r6, #0]
 8004f7c:	e022      	b.n	8004fc4 <_printf_i+0x7c>
 8004f7e:	0010      	movs	r0, r2
 8004f80:	3863      	subs	r0, #99	; 0x63
 8004f82:	2815      	cmp	r0, #21
 8004f84:	d8f7      	bhi.n	8004f76 <_printf_i+0x2e>
 8004f86:	f7fb f8bf 	bl	8000108 <__gnu_thumb1_case_shi>
 8004f8a:	0016      	.short	0x0016
 8004f8c:	fff6001f 	.word	0xfff6001f
 8004f90:	fff6fff6 	.word	0xfff6fff6
 8004f94:	001ffff6 	.word	0x001ffff6
 8004f98:	fff6fff6 	.word	0xfff6fff6
 8004f9c:	fff6fff6 	.word	0xfff6fff6
 8004fa0:	003600a3 	.word	0x003600a3
 8004fa4:	fff60083 	.word	0xfff60083
 8004fa8:	00b4fff6 	.word	0x00b4fff6
 8004fac:	0036fff6 	.word	0x0036fff6
 8004fb0:	fff6fff6 	.word	0xfff6fff6
 8004fb4:	0087      	.short	0x0087
 8004fb6:	0026      	movs	r6, r4
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	3642      	adds	r6, #66	; 0x42
 8004fbc:	1d11      	adds	r1, r2, #4
 8004fbe:	6019      	str	r1, [r3, #0]
 8004fc0:	6813      	ldr	r3, [r2, #0]
 8004fc2:	7033      	strb	r3, [r6, #0]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0a2      	b.n	800510e <_printf_i+0x1c6>
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	6809      	ldr	r1, [r1, #0]
 8004fcc:	1d02      	adds	r2, r0, #4
 8004fce:	060d      	lsls	r5, r1, #24
 8004fd0:	d50b      	bpl.n	8004fea <_printf_i+0xa2>
 8004fd2:	6805      	ldr	r5, [r0, #0]
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	2d00      	cmp	r5, #0
 8004fd8:	da03      	bge.n	8004fe2 <_printf_i+0x9a>
 8004fda:	232d      	movs	r3, #45	; 0x2d
 8004fdc:	9a04      	ldr	r2, [sp, #16]
 8004fde:	426d      	negs	r5, r5
 8004fe0:	7013      	strb	r3, [r2, #0]
 8004fe2:	4b5f      	ldr	r3, [pc, #380]	; (8005160 <_printf_i+0x218>)
 8004fe4:	270a      	movs	r7, #10
 8004fe6:	9303      	str	r3, [sp, #12]
 8004fe8:	e01b      	b.n	8005022 <_printf_i+0xda>
 8004fea:	6805      	ldr	r5, [r0, #0]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	0649      	lsls	r1, r1, #25
 8004ff0:	d5f1      	bpl.n	8004fd6 <_printf_i+0x8e>
 8004ff2:	b22d      	sxth	r5, r5
 8004ff4:	e7ef      	b.n	8004fd6 <_printf_i+0x8e>
 8004ff6:	680d      	ldr	r5, [r1, #0]
 8004ff8:	6819      	ldr	r1, [r3, #0]
 8004ffa:	1d08      	adds	r0, r1, #4
 8004ffc:	6018      	str	r0, [r3, #0]
 8004ffe:	062e      	lsls	r6, r5, #24
 8005000:	d501      	bpl.n	8005006 <_printf_i+0xbe>
 8005002:	680d      	ldr	r5, [r1, #0]
 8005004:	e003      	b.n	800500e <_printf_i+0xc6>
 8005006:	066d      	lsls	r5, r5, #25
 8005008:	d5fb      	bpl.n	8005002 <_printf_i+0xba>
 800500a:	680d      	ldr	r5, [r1, #0]
 800500c:	b2ad      	uxth	r5, r5
 800500e:	4b54      	ldr	r3, [pc, #336]	; (8005160 <_printf_i+0x218>)
 8005010:	2708      	movs	r7, #8
 8005012:	9303      	str	r3, [sp, #12]
 8005014:	2a6f      	cmp	r2, #111	; 0x6f
 8005016:	d000      	beq.n	800501a <_printf_i+0xd2>
 8005018:	3702      	adds	r7, #2
 800501a:	0023      	movs	r3, r4
 800501c:	2200      	movs	r2, #0
 800501e:	3343      	adds	r3, #67	; 0x43
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	6863      	ldr	r3, [r4, #4]
 8005024:	60a3      	str	r3, [r4, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	db03      	blt.n	8005032 <_printf_i+0xea>
 800502a:	2104      	movs	r1, #4
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	438a      	bics	r2, r1
 8005030:	6022      	str	r2, [r4, #0]
 8005032:	2d00      	cmp	r5, #0
 8005034:	d102      	bne.n	800503c <_printf_i+0xf4>
 8005036:	9e04      	ldr	r6, [sp, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <_printf_i+0x10e>
 800503c:	9e04      	ldr	r6, [sp, #16]
 800503e:	0028      	movs	r0, r5
 8005040:	0039      	movs	r1, r7
 8005042:	f7fb f8f1 	bl	8000228 <__aeabi_uidivmod>
 8005046:	9b03      	ldr	r3, [sp, #12]
 8005048:	3e01      	subs	r6, #1
 800504a:	5c5b      	ldrb	r3, [r3, r1]
 800504c:	7033      	strb	r3, [r6, #0]
 800504e:	002b      	movs	r3, r5
 8005050:	0005      	movs	r5, r0
 8005052:	429f      	cmp	r7, r3
 8005054:	d9f3      	bls.n	800503e <_printf_i+0xf6>
 8005056:	2f08      	cmp	r7, #8
 8005058:	d109      	bne.n	800506e <_printf_i+0x126>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	07db      	lsls	r3, r3, #31
 800505e:	d506      	bpl.n	800506e <_printf_i+0x126>
 8005060:	6862      	ldr	r2, [r4, #4]
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	dc02      	bgt.n	800506e <_printf_i+0x126>
 8005068:	2330      	movs	r3, #48	; 0x30
 800506a:	3e01      	subs	r6, #1
 800506c:	7033      	strb	r3, [r6, #0]
 800506e:	9b04      	ldr	r3, [sp, #16]
 8005070:	1b9b      	subs	r3, r3, r6
 8005072:	6123      	str	r3, [r4, #16]
 8005074:	9b07      	ldr	r3, [sp, #28]
 8005076:	0021      	movs	r1, r4
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	9805      	ldr	r0, [sp, #20]
 800507c:	9b06      	ldr	r3, [sp, #24]
 800507e:	aa09      	add	r2, sp, #36	; 0x24
 8005080:	f7ff fef2 	bl	8004e68 <_printf_common>
 8005084:	3001      	adds	r0, #1
 8005086:	d147      	bne.n	8005118 <_printf_i+0x1d0>
 8005088:	2001      	movs	r0, #1
 800508a:	4240      	negs	r0, r0
 800508c:	b00b      	add	sp, #44	; 0x2c
 800508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005090:	2220      	movs	r2, #32
 8005092:	6809      	ldr	r1, [r1, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	6022      	str	r2, [r4, #0]
 8005098:	2278      	movs	r2, #120	; 0x78
 800509a:	4932      	ldr	r1, [pc, #200]	; (8005164 <_printf_i+0x21c>)
 800509c:	9103      	str	r1, [sp, #12]
 800509e:	0021      	movs	r1, r4
 80050a0:	3145      	adds	r1, #69	; 0x45
 80050a2:	700a      	strb	r2, [r1, #0]
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	c920      	ldmia	r1!, {r5}
 80050aa:	0610      	lsls	r0, r2, #24
 80050ac:	d402      	bmi.n	80050b4 <_printf_i+0x16c>
 80050ae:	0650      	lsls	r0, r2, #25
 80050b0:	d500      	bpl.n	80050b4 <_printf_i+0x16c>
 80050b2:	b2ad      	uxth	r5, r5
 80050b4:	6019      	str	r1, [r3, #0]
 80050b6:	07d3      	lsls	r3, r2, #31
 80050b8:	d502      	bpl.n	80050c0 <_printf_i+0x178>
 80050ba:	2320      	movs	r3, #32
 80050bc:	4313      	orrs	r3, r2
 80050be:	6023      	str	r3, [r4, #0]
 80050c0:	2710      	movs	r7, #16
 80050c2:	2d00      	cmp	r5, #0
 80050c4:	d1a9      	bne.n	800501a <_printf_i+0xd2>
 80050c6:	2220      	movs	r2, #32
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	4393      	bics	r3, r2
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	e7a4      	b.n	800501a <_printf_i+0xd2>
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	680d      	ldr	r5, [r1, #0]
 80050d4:	1d10      	adds	r0, r2, #4
 80050d6:	6949      	ldr	r1, [r1, #20]
 80050d8:	6018      	str	r0, [r3, #0]
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	062e      	lsls	r6, r5, #24
 80050de:	d501      	bpl.n	80050e4 <_printf_i+0x19c>
 80050e0:	6019      	str	r1, [r3, #0]
 80050e2:	e002      	b.n	80050ea <_printf_i+0x1a2>
 80050e4:	066d      	lsls	r5, r5, #25
 80050e6:	d5fb      	bpl.n	80050e0 <_printf_i+0x198>
 80050e8:	8019      	strh	r1, [r3, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	9e04      	ldr	r6, [sp, #16]
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	e7c0      	b.n	8005074 <_printf_i+0x12c>
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	1d11      	adds	r1, r2, #4
 80050f6:	6019      	str	r1, [r3, #0]
 80050f8:	6816      	ldr	r6, [r2, #0]
 80050fa:	2100      	movs	r1, #0
 80050fc:	0030      	movs	r0, r6
 80050fe:	6862      	ldr	r2, [r4, #4]
 8005100:	f000 f90a 	bl	8005318 <memchr>
 8005104:	2800      	cmp	r0, #0
 8005106:	d001      	beq.n	800510c <_printf_i+0x1c4>
 8005108:	1b80      	subs	r0, r0, r6
 800510a:	6060      	str	r0, [r4, #4]
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	2300      	movs	r3, #0
 8005112:	9a04      	ldr	r2, [sp, #16]
 8005114:	7013      	strb	r3, [r2, #0]
 8005116:	e7ad      	b.n	8005074 <_printf_i+0x12c>
 8005118:	0032      	movs	r2, r6
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	9906      	ldr	r1, [sp, #24]
 800511e:	9805      	ldr	r0, [sp, #20]
 8005120:	9d07      	ldr	r5, [sp, #28]
 8005122:	47a8      	blx	r5
 8005124:	3001      	adds	r0, #1
 8005126:	d0af      	beq.n	8005088 <_printf_i+0x140>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	079b      	lsls	r3, r3, #30
 800512c:	d415      	bmi.n	800515a <_printf_i+0x212>
 800512e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005130:	68e0      	ldr	r0, [r4, #12]
 8005132:	4298      	cmp	r0, r3
 8005134:	daaa      	bge.n	800508c <_printf_i+0x144>
 8005136:	0018      	movs	r0, r3
 8005138:	e7a8      	b.n	800508c <_printf_i+0x144>
 800513a:	0022      	movs	r2, r4
 800513c:	2301      	movs	r3, #1
 800513e:	9906      	ldr	r1, [sp, #24]
 8005140:	9805      	ldr	r0, [sp, #20]
 8005142:	9e07      	ldr	r6, [sp, #28]
 8005144:	3219      	adds	r2, #25
 8005146:	47b0      	blx	r6
 8005148:	3001      	adds	r0, #1
 800514a:	d09d      	beq.n	8005088 <_printf_i+0x140>
 800514c:	3501      	adds	r5, #1
 800514e:	68e3      	ldr	r3, [r4, #12]
 8005150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	42ab      	cmp	r3, r5
 8005156:	dcf0      	bgt.n	800513a <_printf_i+0x1f2>
 8005158:	e7e9      	b.n	800512e <_printf_i+0x1e6>
 800515a:	2500      	movs	r5, #0
 800515c:	e7f7      	b.n	800514e <_printf_i+0x206>
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	0800674f 	.word	0x0800674f
 8005164:	08006760 	.word	0x08006760

08005168 <__sflush_r>:
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	898b      	ldrh	r3, [r1, #12]
 800516c:	0005      	movs	r5, r0
 800516e:	000c      	movs	r4, r1
 8005170:	071a      	lsls	r2, r3, #28
 8005172:	d45c      	bmi.n	800522e <__sflush_r+0xc6>
 8005174:	684a      	ldr	r2, [r1, #4]
 8005176:	2a00      	cmp	r2, #0
 8005178:	dc04      	bgt.n	8005184 <__sflush_r+0x1c>
 800517a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800517c:	2a00      	cmp	r2, #0
 800517e:	dc01      	bgt.n	8005184 <__sflush_r+0x1c>
 8005180:	2000      	movs	r0, #0
 8005182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005184:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005186:	2f00      	cmp	r7, #0
 8005188:	d0fa      	beq.n	8005180 <__sflush_r+0x18>
 800518a:	2200      	movs	r2, #0
 800518c:	2080      	movs	r0, #128	; 0x80
 800518e:	682e      	ldr	r6, [r5, #0]
 8005190:	602a      	str	r2, [r5, #0]
 8005192:	001a      	movs	r2, r3
 8005194:	0140      	lsls	r0, r0, #5
 8005196:	6a21      	ldr	r1, [r4, #32]
 8005198:	4002      	ands	r2, r0
 800519a:	4203      	tst	r3, r0
 800519c:	d034      	beq.n	8005208 <__sflush_r+0xa0>
 800519e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	075b      	lsls	r3, r3, #29
 80051a4:	d506      	bpl.n	80051b4 <__sflush_r+0x4c>
 80051a6:	6863      	ldr	r3, [r4, #4]
 80051a8:	1ac0      	subs	r0, r0, r3
 80051aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <__sflush_r+0x4c>
 80051b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051b2:	1ac0      	subs	r0, r0, r3
 80051b4:	0002      	movs	r2, r0
 80051b6:	2300      	movs	r3, #0
 80051b8:	0028      	movs	r0, r5
 80051ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80051bc:	6a21      	ldr	r1, [r4, #32]
 80051be:	47b8      	blx	r7
 80051c0:	89a2      	ldrh	r2, [r4, #12]
 80051c2:	1c43      	adds	r3, r0, #1
 80051c4:	d106      	bne.n	80051d4 <__sflush_r+0x6c>
 80051c6:	6829      	ldr	r1, [r5, #0]
 80051c8:	291d      	cmp	r1, #29
 80051ca:	d82c      	bhi.n	8005226 <__sflush_r+0xbe>
 80051cc:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <__sflush_r+0x110>)
 80051ce:	410b      	asrs	r3, r1
 80051d0:	07db      	lsls	r3, r3, #31
 80051d2:	d428      	bmi.n	8005226 <__sflush_r+0xbe>
 80051d4:	2300      	movs	r3, #0
 80051d6:	6063      	str	r3, [r4, #4]
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	04d2      	lsls	r2, r2, #19
 80051de:	d505      	bpl.n	80051ec <__sflush_r+0x84>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <__sflush_r+0x82>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d100      	bne.n	80051ec <__sflush_r+0x84>
 80051ea:	6560      	str	r0, [r4, #84]	; 0x54
 80051ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ee:	602e      	str	r6, [r5, #0]
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d0c5      	beq.n	8005180 <__sflush_r+0x18>
 80051f4:	0023      	movs	r3, r4
 80051f6:	3344      	adds	r3, #68	; 0x44
 80051f8:	4299      	cmp	r1, r3
 80051fa:	d002      	beq.n	8005202 <__sflush_r+0x9a>
 80051fc:	0028      	movs	r0, r5
 80051fe:	f7ff fd2b 	bl	8004c58 <_free_r>
 8005202:	2000      	movs	r0, #0
 8005204:	6360      	str	r0, [r4, #52]	; 0x34
 8005206:	e7bc      	b.n	8005182 <__sflush_r+0x1a>
 8005208:	2301      	movs	r3, #1
 800520a:	0028      	movs	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	d1c6      	bne.n	80051a0 <__sflush_r+0x38>
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0c3      	beq.n	80051a0 <__sflush_r+0x38>
 8005218:	2b1d      	cmp	r3, #29
 800521a:	d001      	beq.n	8005220 <__sflush_r+0xb8>
 800521c:	2b16      	cmp	r3, #22
 800521e:	d101      	bne.n	8005224 <__sflush_r+0xbc>
 8005220:	602e      	str	r6, [r5, #0]
 8005222:	e7ad      	b.n	8005180 <__sflush_r+0x18>
 8005224:	89a2      	ldrh	r2, [r4, #12]
 8005226:	2340      	movs	r3, #64	; 0x40
 8005228:	4313      	orrs	r3, r2
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	e7a9      	b.n	8005182 <__sflush_r+0x1a>
 800522e:	690e      	ldr	r6, [r1, #16]
 8005230:	2e00      	cmp	r6, #0
 8005232:	d0a5      	beq.n	8005180 <__sflush_r+0x18>
 8005234:	680f      	ldr	r7, [r1, #0]
 8005236:	600e      	str	r6, [r1, #0]
 8005238:	1bba      	subs	r2, r7, r6
 800523a:	9201      	str	r2, [sp, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	079b      	lsls	r3, r3, #30
 8005240:	d100      	bne.n	8005244 <__sflush_r+0xdc>
 8005242:	694a      	ldr	r2, [r1, #20]
 8005244:	60a2      	str	r2, [r4, #8]
 8005246:	9b01      	ldr	r3, [sp, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dd99      	ble.n	8005180 <__sflush_r+0x18>
 800524c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800524e:	0032      	movs	r2, r6
 8005250:	001f      	movs	r7, r3
 8005252:	0028      	movs	r0, r5
 8005254:	9b01      	ldr	r3, [sp, #4]
 8005256:	6a21      	ldr	r1, [r4, #32]
 8005258:	47b8      	blx	r7
 800525a:	2800      	cmp	r0, #0
 800525c:	dc06      	bgt.n	800526c <__sflush_r+0x104>
 800525e:	2340      	movs	r3, #64	; 0x40
 8005260:	2001      	movs	r0, #1
 8005262:	89a2      	ldrh	r2, [r4, #12]
 8005264:	4240      	negs	r0, r0
 8005266:	4313      	orrs	r3, r2
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	e78a      	b.n	8005182 <__sflush_r+0x1a>
 800526c:	9b01      	ldr	r3, [sp, #4]
 800526e:	1836      	adds	r6, r6, r0
 8005270:	1a1b      	subs	r3, r3, r0
 8005272:	9301      	str	r3, [sp, #4]
 8005274:	e7e7      	b.n	8005246 <__sflush_r+0xde>
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	dfbffffe 	.word	0xdfbffffe

0800527c <_fflush_r>:
 800527c:	690b      	ldr	r3, [r1, #16]
 800527e:	b570      	push	{r4, r5, r6, lr}
 8005280:	0005      	movs	r5, r0
 8005282:	000c      	movs	r4, r1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <_fflush_r+0x12>
 8005288:	2500      	movs	r5, #0
 800528a:	0028      	movs	r0, r5
 800528c:	bd70      	pop	{r4, r5, r6, pc}
 800528e:	2800      	cmp	r0, #0
 8005290:	d004      	beq.n	800529c <_fflush_r+0x20>
 8005292:	6a03      	ldr	r3, [r0, #32]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <_fflush_r+0x20>
 8005298:	f7ff fbbe 	bl	8004a18 <__sinit>
 800529c:	220c      	movs	r2, #12
 800529e:	5ea3      	ldrsh	r3, [r4, r2]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f1      	beq.n	8005288 <_fflush_r+0xc>
 80052a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052a6:	07d2      	lsls	r2, r2, #31
 80052a8:	d404      	bmi.n	80052b4 <_fflush_r+0x38>
 80052aa:	059b      	lsls	r3, r3, #22
 80052ac:	d402      	bmi.n	80052b4 <_fflush_r+0x38>
 80052ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052b0:	f7ff fcb2 	bl	8004c18 <__retarget_lock_acquire_recursive>
 80052b4:	0028      	movs	r0, r5
 80052b6:	0021      	movs	r1, r4
 80052b8:	f7ff ff56 	bl	8005168 <__sflush_r>
 80052bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052be:	0005      	movs	r5, r0
 80052c0:	07db      	lsls	r3, r3, #31
 80052c2:	d4e2      	bmi.n	800528a <_fflush_r+0xe>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	059b      	lsls	r3, r3, #22
 80052c8:	d4df      	bmi.n	800528a <_fflush_r+0xe>
 80052ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052cc:	f7ff fca5 	bl	8004c1a <__retarget_lock_release_recursive>
 80052d0:	e7db      	b.n	800528a <_fflush_r+0xe>
	...

080052d4 <fiprintf>:
 80052d4:	b40e      	push	{r1, r2, r3}
 80052d6:	b517      	push	{r0, r1, r2, r4, lr}
 80052d8:	4c05      	ldr	r4, [pc, #20]	; (80052f0 <fiprintf+0x1c>)
 80052da:	ab05      	add	r3, sp, #20
 80052dc:	cb04      	ldmia	r3!, {r2}
 80052de:	0001      	movs	r1, r0
 80052e0:	6820      	ldr	r0, [r4, #0]
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	f000 f852 	bl	800538c <_vfiprintf_r>
 80052e8:	bc1e      	pop	{r1, r2, r3, r4}
 80052ea:	bc08      	pop	{r3}
 80052ec:	b003      	add	sp, #12
 80052ee:	4718      	bx	r3
 80052f0:	2000006c 	.word	0x2000006c

080052f4 <_sbrk_r>:
 80052f4:	2300      	movs	r3, #0
 80052f6:	b570      	push	{r4, r5, r6, lr}
 80052f8:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_sbrk_r+0x20>)
 80052fa:	0004      	movs	r4, r0
 80052fc:	0008      	movs	r0, r1
 80052fe:	602b      	str	r3, [r5, #0]
 8005300:	f7fc fb80 	bl	8001a04 <_sbrk>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d103      	bne.n	8005310 <_sbrk_r+0x1c>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d000      	beq.n	8005310 <_sbrk_r+0x1c>
 800530e:	6023      	str	r3, [r4, #0]
 8005310:	bd70      	pop	{r4, r5, r6, pc}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	20000718 	.word	0x20000718

08005318 <memchr>:
 8005318:	b2c9      	uxtb	r1, r1
 800531a:	1882      	adds	r2, r0, r2
 800531c:	4290      	cmp	r0, r2
 800531e:	d101      	bne.n	8005324 <memchr+0xc>
 8005320:	2000      	movs	r0, #0
 8005322:	4770      	bx	lr
 8005324:	7803      	ldrb	r3, [r0, #0]
 8005326:	428b      	cmp	r3, r1
 8005328:	d0fb      	beq.n	8005322 <memchr+0xa>
 800532a:	3001      	adds	r0, #1
 800532c:	e7f6      	b.n	800531c <memchr+0x4>

0800532e <abort>:
 800532e:	2006      	movs	r0, #6
 8005330:	b510      	push	{r4, lr}
 8005332:	f000 fa17 	bl	8005764 <raise>
 8005336:	2001      	movs	r0, #1
 8005338:	f7fc faf3 	bl	8001922 <_exit>

0800533c <__sfputc_r>:
 800533c:	6893      	ldr	r3, [r2, #8]
 800533e:	b510      	push	{r4, lr}
 8005340:	3b01      	subs	r3, #1
 8005342:	6093      	str	r3, [r2, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	da04      	bge.n	8005352 <__sfputc_r+0x16>
 8005348:	6994      	ldr	r4, [r2, #24]
 800534a:	42a3      	cmp	r3, r4
 800534c:	db07      	blt.n	800535e <__sfputc_r+0x22>
 800534e:	290a      	cmp	r1, #10
 8005350:	d005      	beq.n	800535e <__sfputc_r+0x22>
 8005352:	6813      	ldr	r3, [r2, #0]
 8005354:	1c58      	adds	r0, r3, #1
 8005356:	6010      	str	r0, [r2, #0]
 8005358:	7019      	strb	r1, [r3, #0]
 800535a:	0008      	movs	r0, r1
 800535c:	bd10      	pop	{r4, pc}
 800535e:	f000 f931 	bl	80055c4 <__swbuf_r>
 8005362:	0001      	movs	r1, r0
 8005364:	e7f9      	b.n	800535a <__sfputc_r+0x1e>

08005366 <__sfputs_r>:
 8005366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005368:	0006      	movs	r6, r0
 800536a:	000f      	movs	r7, r1
 800536c:	0014      	movs	r4, r2
 800536e:	18d5      	adds	r5, r2, r3
 8005370:	42ac      	cmp	r4, r5
 8005372:	d101      	bne.n	8005378 <__sfputs_r+0x12>
 8005374:	2000      	movs	r0, #0
 8005376:	e007      	b.n	8005388 <__sfputs_r+0x22>
 8005378:	7821      	ldrb	r1, [r4, #0]
 800537a:	003a      	movs	r2, r7
 800537c:	0030      	movs	r0, r6
 800537e:	f7ff ffdd 	bl	800533c <__sfputc_r>
 8005382:	3401      	adds	r4, #1
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d1f3      	bne.n	8005370 <__sfputs_r+0xa>
 8005388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800538c <_vfiprintf_r>:
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538e:	b0a1      	sub	sp, #132	; 0x84
 8005390:	000f      	movs	r7, r1
 8005392:	0015      	movs	r5, r2
 8005394:	001e      	movs	r6, r3
 8005396:	9003      	str	r0, [sp, #12]
 8005398:	2800      	cmp	r0, #0
 800539a:	d004      	beq.n	80053a6 <_vfiprintf_r+0x1a>
 800539c:	6a03      	ldr	r3, [r0, #32]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <_vfiprintf_r+0x1a>
 80053a2:	f7ff fb39 	bl	8004a18 <__sinit>
 80053a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a8:	07db      	lsls	r3, r3, #31
 80053aa:	d405      	bmi.n	80053b8 <_vfiprintf_r+0x2c>
 80053ac:	89bb      	ldrh	r3, [r7, #12]
 80053ae:	059b      	lsls	r3, r3, #22
 80053b0:	d402      	bmi.n	80053b8 <_vfiprintf_r+0x2c>
 80053b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80053b4:	f7ff fc30 	bl	8004c18 <__retarget_lock_acquire_recursive>
 80053b8:	89bb      	ldrh	r3, [r7, #12]
 80053ba:	071b      	lsls	r3, r3, #28
 80053bc:	d502      	bpl.n	80053c4 <_vfiprintf_r+0x38>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d113      	bne.n	80053ec <_vfiprintf_r+0x60>
 80053c4:	0039      	movs	r1, r7
 80053c6:	9803      	ldr	r0, [sp, #12]
 80053c8:	f000 f93e 	bl	8005648 <__swsetup_r>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d00d      	beq.n	80053ec <_vfiprintf_r+0x60>
 80053d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053d2:	07db      	lsls	r3, r3, #31
 80053d4:	d503      	bpl.n	80053de <_vfiprintf_r+0x52>
 80053d6:	2001      	movs	r0, #1
 80053d8:	4240      	negs	r0, r0
 80053da:	b021      	add	sp, #132	; 0x84
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053de:	89bb      	ldrh	r3, [r7, #12]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	d4f8      	bmi.n	80053d6 <_vfiprintf_r+0x4a>
 80053e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80053e6:	f7ff fc18 	bl	8004c1a <__retarget_lock_release_recursive>
 80053ea:	e7f4      	b.n	80053d6 <_vfiprintf_r+0x4a>
 80053ec:	2300      	movs	r3, #0
 80053ee:	ac08      	add	r4, sp, #32
 80053f0:	6163      	str	r3, [r4, #20]
 80053f2:	3320      	adds	r3, #32
 80053f4:	7663      	strb	r3, [r4, #25]
 80053f6:	3310      	adds	r3, #16
 80053f8:	76a3      	strb	r3, [r4, #26]
 80053fa:	9607      	str	r6, [sp, #28]
 80053fc:	002e      	movs	r6, r5
 80053fe:	7833      	ldrb	r3, [r6, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <_vfiprintf_r+0x7c>
 8005404:	2b25      	cmp	r3, #37	; 0x25
 8005406:	d148      	bne.n	800549a <_vfiprintf_r+0x10e>
 8005408:	1b73      	subs	r3, r6, r5
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	42ae      	cmp	r6, r5
 800540e:	d00b      	beq.n	8005428 <_vfiprintf_r+0x9c>
 8005410:	002a      	movs	r2, r5
 8005412:	0039      	movs	r1, r7
 8005414:	9803      	ldr	r0, [sp, #12]
 8005416:	f7ff ffa6 	bl	8005366 <__sfputs_r>
 800541a:	3001      	adds	r0, #1
 800541c:	d100      	bne.n	8005420 <_vfiprintf_r+0x94>
 800541e:	e0af      	b.n	8005580 <_vfiprintf_r+0x1f4>
 8005420:	6963      	ldr	r3, [r4, #20]
 8005422:	9a05      	ldr	r2, [sp, #20]
 8005424:	189b      	adds	r3, r3, r2
 8005426:	6163      	str	r3, [r4, #20]
 8005428:	7833      	ldrb	r3, [r6, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d100      	bne.n	8005430 <_vfiprintf_r+0xa4>
 800542e:	e0a7      	b.n	8005580 <_vfiprintf_r+0x1f4>
 8005430:	2201      	movs	r2, #1
 8005432:	2300      	movs	r3, #0
 8005434:	4252      	negs	r2, r2
 8005436:	6062      	str	r2, [r4, #4]
 8005438:	a904      	add	r1, sp, #16
 800543a:	3254      	adds	r2, #84	; 0x54
 800543c:	1852      	adds	r2, r2, r1
 800543e:	1c75      	adds	r5, r6, #1
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	60e3      	str	r3, [r4, #12]
 8005444:	60a3      	str	r3, [r4, #8]
 8005446:	7013      	strb	r3, [r2, #0]
 8005448:	65a3      	str	r3, [r4, #88]	; 0x58
 800544a:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <_vfiprintf_r+0x224>)
 800544c:	2205      	movs	r2, #5
 800544e:	0018      	movs	r0, r3
 8005450:	7829      	ldrb	r1, [r5, #0]
 8005452:	9305      	str	r3, [sp, #20]
 8005454:	f7ff ff60 	bl	8005318 <memchr>
 8005458:	1c6e      	adds	r6, r5, #1
 800545a:	2800      	cmp	r0, #0
 800545c:	d11f      	bne.n	800549e <_vfiprintf_r+0x112>
 800545e:	6822      	ldr	r2, [r4, #0]
 8005460:	06d3      	lsls	r3, r2, #27
 8005462:	d504      	bpl.n	800546e <_vfiprintf_r+0xe2>
 8005464:	2353      	movs	r3, #83	; 0x53
 8005466:	a904      	add	r1, sp, #16
 8005468:	185b      	adds	r3, r3, r1
 800546a:	2120      	movs	r1, #32
 800546c:	7019      	strb	r1, [r3, #0]
 800546e:	0713      	lsls	r3, r2, #28
 8005470:	d504      	bpl.n	800547c <_vfiprintf_r+0xf0>
 8005472:	2353      	movs	r3, #83	; 0x53
 8005474:	a904      	add	r1, sp, #16
 8005476:	185b      	adds	r3, r3, r1
 8005478:	212b      	movs	r1, #43	; 0x2b
 800547a:	7019      	strb	r1, [r3, #0]
 800547c:	782b      	ldrb	r3, [r5, #0]
 800547e:	2b2a      	cmp	r3, #42	; 0x2a
 8005480:	d016      	beq.n	80054b0 <_vfiprintf_r+0x124>
 8005482:	002e      	movs	r6, r5
 8005484:	2100      	movs	r1, #0
 8005486:	200a      	movs	r0, #10
 8005488:	68e3      	ldr	r3, [r4, #12]
 800548a:	7832      	ldrb	r2, [r6, #0]
 800548c:	1c75      	adds	r5, r6, #1
 800548e:	3a30      	subs	r2, #48	; 0x30
 8005490:	2a09      	cmp	r2, #9
 8005492:	d94e      	bls.n	8005532 <_vfiprintf_r+0x1a6>
 8005494:	2900      	cmp	r1, #0
 8005496:	d111      	bne.n	80054bc <_vfiprintf_r+0x130>
 8005498:	e017      	b.n	80054ca <_vfiprintf_r+0x13e>
 800549a:	3601      	adds	r6, #1
 800549c:	e7af      	b.n	80053fe <_vfiprintf_r+0x72>
 800549e:	9b05      	ldr	r3, [sp, #20]
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	1ac0      	subs	r0, r0, r3
 80054a4:	2301      	movs	r3, #1
 80054a6:	4083      	lsls	r3, r0
 80054a8:	4313      	orrs	r3, r2
 80054aa:	0035      	movs	r5, r6
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	e7cc      	b.n	800544a <_vfiprintf_r+0xbe>
 80054b0:	9b07      	ldr	r3, [sp, #28]
 80054b2:	1d19      	adds	r1, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	9107      	str	r1, [sp, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	db01      	blt.n	80054c0 <_vfiprintf_r+0x134>
 80054bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054be:	e004      	b.n	80054ca <_vfiprintf_r+0x13e>
 80054c0:	425b      	negs	r3, r3
 80054c2:	60e3      	str	r3, [r4, #12]
 80054c4:	2302      	movs	r3, #2
 80054c6:	4313      	orrs	r3, r2
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	7833      	ldrb	r3, [r6, #0]
 80054cc:	2b2e      	cmp	r3, #46	; 0x2e
 80054ce:	d10a      	bne.n	80054e6 <_vfiprintf_r+0x15a>
 80054d0:	7873      	ldrb	r3, [r6, #1]
 80054d2:	2b2a      	cmp	r3, #42	; 0x2a
 80054d4:	d135      	bne.n	8005542 <_vfiprintf_r+0x1b6>
 80054d6:	9b07      	ldr	r3, [sp, #28]
 80054d8:	3602      	adds	r6, #2
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	9207      	str	r2, [sp, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	db2b      	blt.n	800553c <_vfiprintf_r+0x1b0>
 80054e4:	9309      	str	r3, [sp, #36]	; 0x24
 80054e6:	4d33      	ldr	r5, [pc, #204]	; (80055b4 <_vfiprintf_r+0x228>)
 80054e8:	2203      	movs	r2, #3
 80054ea:	0028      	movs	r0, r5
 80054ec:	7831      	ldrb	r1, [r6, #0]
 80054ee:	f7ff ff13 	bl	8005318 <memchr>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d006      	beq.n	8005504 <_vfiprintf_r+0x178>
 80054f6:	2340      	movs	r3, #64	; 0x40
 80054f8:	1b40      	subs	r0, r0, r5
 80054fa:	4083      	lsls	r3, r0
 80054fc:	6822      	ldr	r2, [r4, #0]
 80054fe:	3601      	adds	r6, #1
 8005500:	4313      	orrs	r3, r2
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	7831      	ldrb	r1, [r6, #0]
 8005506:	2206      	movs	r2, #6
 8005508:	482b      	ldr	r0, [pc, #172]	; (80055b8 <_vfiprintf_r+0x22c>)
 800550a:	1c75      	adds	r5, r6, #1
 800550c:	7621      	strb	r1, [r4, #24]
 800550e:	f7ff ff03 	bl	8005318 <memchr>
 8005512:	2800      	cmp	r0, #0
 8005514:	d043      	beq.n	800559e <_vfiprintf_r+0x212>
 8005516:	4b29      	ldr	r3, [pc, #164]	; (80055bc <_vfiprintf_r+0x230>)
 8005518:	2b00      	cmp	r3, #0
 800551a:	d125      	bne.n	8005568 <_vfiprintf_r+0x1dc>
 800551c:	2207      	movs	r2, #7
 800551e:	9b07      	ldr	r3, [sp, #28]
 8005520:	3307      	adds	r3, #7
 8005522:	4393      	bics	r3, r2
 8005524:	3308      	adds	r3, #8
 8005526:	9307      	str	r3, [sp, #28]
 8005528:	6963      	ldr	r3, [r4, #20]
 800552a:	9a04      	ldr	r2, [sp, #16]
 800552c:	189b      	adds	r3, r3, r2
 800552e:	6163      	str	r3, [r4, #20]
 8005530:	e764      	b.n	80053fc <_vfiprintf_r+0x70>
 8005532:	4343      	muls	r3, r0
 8005534:	002e      	movs	r6, r5
 8005536:	2101      	movs	r1, #1
 8005538:	189b      	adds	r3, r3, r2
 800553a:	e7a6      	b.n	800548a <_vfiprintf_r+0xfe>
 800553c:	2301      	movs	r3, #1
 800553e:	425b      	negs	r3, r3
 8005540:	e7d0      	b.n	80054e4 <_vfiprintf_r+0x158>
 8005542:	2300      	movs	r3, #0
 8005544:	200a      	movs	r0, #10
 8005546:	001a      	movs	r2, r3
 8005548:	3601      	adds	r6, #1
 800554a:	6063      	str	r3, [r4, #4]
 800554c:	7831      	ldrb	r1, [r6, #0]
 800554e:	1c75      	adds	r5, r6, #1
 8005550:	3930      	subs	r1, #48	; 0x30
 8005552:	2909      	cmp	r1, #9
 8005554:	d903      	bls.n	800555e <_vfiprintf_r+0x1d2>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0c5      	beq.n	80054e6 <_vfiprintf_r+0x15a>
 800555a:	9209      	str	r2, [sp, #36]	; 0x24
 800555c:	e7c3      	b.n	80054e6 <_vfiprintf_r+0x15a>
 800555e:	4342      	muls	r2, r0
 8005560:	002e      	movs	r6, r5
 8005562:	2301      	movs	r3, #1
 8005564:	1852      	adds	r2, r2, r1
 8005566:	e7f1      	b.n	800554c <_vfiprintf_r+0x1c0>
 8005568:	aa07      	add	r2, sp, #28
 800556a:	9200      	str	r2, [sp, #0]
 800556c:	0021      	movs	r1, r4
 800556e:	003a      	movs	r2, r7
 8005570:	4b13      	ldr	r3, [pc, #76]	; (80055c0 <_vfiprintf_r+0x234>)
 8005572:	9803      	ldr	r0, [sp, #12]
 8005574:	e000      	b.n	8005578 <_vfiprintf_r+0x1ec>
 8005576:	bf00      	nop
 8005578:	9004      	str	r0, [sp, #16]
 800557a:	9b04      	ldr	r3, [sp, #16]
 800557c:	3301      	adds	r3, #1
 800557e:	d1d3      	bne.n	8005528 <_vfiprintf_r+0x19c>
 8005580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005582:	07db      	lsls	r3, r3, #31
 8005584:	d405      	bmi.n	8005592 <_vfiprintf_r+0x206>
 8005586:	89bb      	ldrh	r3, [r7, #12]
 8005588:	059b      	lsls	r3, r3, #22
 800558a:	d402      	bmi.n	8005592 <_vfiprintf_r+0x206>
 800558c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800558e:	f7ff fb44 	bl	8004c1a <__retarget_lock_release_recursive>
 8005592:	89bb      	ldrh	r3, [r7, #12]
 8005594:	065b      	lsls	r3, r3, #25
 8005596:	d500      	bpl.n	800559a <_vfiprintf_r+0x20e>
 8005598:	e71d      	b.n	80053d6 <_vfiprintf_r+0x4a>
 800559a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800559c:	e71d      	b.n	80053da <_vfiprintf_r+0x4e>
 800559e:	aa07      	add	r2, sp, #28
 80055a0:	9200      	str	r2, [sp, #0]
 80055a2:	0021      	movs	r1, r4
 80055a4:	003a      	movs	r2, r7
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <_vfiprintf_r+0x234>)
 80055a8:	9803      	ldr	r0, [sp, #12]
 80055aa:	f7ff fccd 	bl	8004f48 <_printf_i>
 80055ae:	e7e3      	b.n	8005578 <_vfiprintf_r+0x1ec>
 80055b0:	08006771 	.word	0x08006771
 80055b4:	08006777 	.word	0x08006777
 80055b8:	0800677b 	.word	0x0800677b
 80055bc:	00000000 	.word	0x00000000
 80055c0:	08005367 	.word	0x08005367

080055c4 <__swbuf_r>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	0006      	movs	r6, r0
 80055c8:	000d      	movs	r5, r1
 80055ca:	0014      	movs	r4, r2
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d004      	beq.n	80055da <__swbuf_r+0x16>
 80055d0:	6a03      	ldr	r3, [r0, #32]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <__swbuf_r+0x16>
 80055d6:	f7ff fa1f 	bl	8004a18 <__sinit>
 80055da:	69a3      	ldr	r3, [r4, #24]
 80055dc:	60a3      	str	r3, [r4, #8]
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	071b      	lsls	r3, r3, #28
 80055e2:	d528      	bpl.n	8005636 <__swbuf_r+0x72>
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d025      	beq.n	8005636 <__swbuf_r+0x72>
 80055ea:	6923      	ldr	r3, [r4, #16]
 80055ec:	6820      	ldr	r0, [r4, #0]
 80055ee:	b2ef      	uxtb	r7, r5
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	6963      	ldr	r3, [r4, #20]
 80055f4:	b2ed      	uxtb	r5, r5
 80055f6:	4283      	cmp	r3, r0
 80055f8:	dc05      	bgt.n	8005606 <__swbuf_r+0x42>
 80055fa:	0021      	movs	r1, r4
 80055fc:	0030      	movs	r0, r6
 80055fe:	f7ff fe3d 	bl	800527c <_fflush_r>
 8005602:	2800      	cmp	r0, #0
 8005604:	d11d      	bne.n	8005642 <__swbuf_r+0x7e>
 8005606:	68a3      	ldr	r3, [r4, #8]
 8005608:	3001      	adds	r0, #1
 800560a:	3b01      	subs	r3, #1
 800560c:	60a3      	str	r3, [r4, #8]
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	6022      	str	r2, [r4, #0]
 8005614:	701f      	strb	r7, [r3, #0]
 8005616:	6963      	ldr	r3, [r4, #20]
 8005618:	4283      	cmp	r3, r0
 800561a:	d004      	beq.n	8005626 <__swbuf_r+0x62>
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	07db      	lsls	r3, r3, #31
 8005620:	d507      	bpl.n	8005632 <__swbuf_r+0x6e>
 8005622:	2d0a      	cmp	r5, #10
 8005624:	d105      	bne.n	8005632 <__swbuf_r+0x6e>
 8005626:	0021      	movs	r1, r4
 8005628:	0030      	movs	r0, r6
 800562a:	f7ff fe27 	bl	800527c <_fflush_r>
 800562e:	2800      	cmp	r0, #0
 8005630:	d107      	bne.n	8005642 <__swbuf_r+0x7e>
 8005632:	0028      	movs	r0, r5
 8005634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005636:	0021      	movs	r1, r4
 8005638:	0030      	movs	r0, r6
 800563a:	f000 f805 	bl	8005648 <__swsetup_r>
 800563e:	2800      	cmp	r0, #0
 8005640:	d0d3      	beq.n	80055ea <__swbuf_r+0x26>
 8005642:	2501      	movs	r5, #1
 8005644:	426d      	negs	r5, r5
 8005646:	e7f4      	b.n	8005632 <__swbuf_r+0x6e>

08005648 <__swsetup_r>:
 8005648:	4b30      	ldr	r3, [pc, #192]	; (800570c <__swsetup_r+0xc4>)
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	0005      	movs	r5, r0
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	000c      	movs	r4, r1
 8005652:	2800      	cmp	r0, #0
 8005654:	d004      	beq.n	8005660 <__swsetup_r+0x18>
 8005656:	6a03      	ldr	r3, [r0, #32]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <__swsetup_r+0x18>
 800565c:	f7ff f9dc 	bl	8004a18 <__sinit>
 8005660:	230c      	movs	r3, #12
 8005662:	5ee2      	ldrsh	r2, [r4, r3]
 8005664:	b293      	uxth	r3, r2
 8005666:	0711      	lsls	r1, r2, #28
 8005668:	d423      	bmi.n	80056b2 <__swsetup_r+0x6a>
 800566a:	06d9      	lsls	r1, r3, #27
 800566c:	d407      	bmi.n	800567e <__swsetup_r+0x36>
 800566e:	2309      	movs	r3, #9
 8005670:	2001      	movs	r0, #1
 8005672:	602b      	str	r3, [r5, #0]
 8005674:	3337      	adds	r3, #55	; 0x37
 8005676:	4313      	orrs	r3, r2
 8005678:	81a3      	strh	r3, [r4, #12]
 800567a:	4240      	negs	r0, r0
 800567c:	bd70      	pop	{r4, r5, r6, pc}
 800567e:	075b      	lsls	r3, r3, #29
 8005680:	d513      	bpl.n	80056aa <__swsetup_r+0x62>
 8005682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005684:	2900      	cmp	r1, #0
 8005686:	d008      	beq.n	800569a <__swsetup_r+0x52>
 8005688:	0023      	movs	r3, r4
 800568a:	3344      	adds	r3, #68	; 0x44
 800568c:	4299      	cmp	r1, r3
 800568e:	d002      	beq.n	8005696 <__swsetup_r+0x4e>
 8005690:	0028      	movs	r0, r5
 8005692:	f7ff fae1 	bl	8004c58 <_free_r>
 8005696:	2300      	movs	r3, #0
 8005698:	6363      	str	r3, [r4, #52]	; 0x34
 800569a:	2224      	movs	r2, #36	; 0x24
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	4393      	bics	r3, r2
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	2300      	movs	r3, #0
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	6923      	ldr	r3, [r4, #16]
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	2308      	movs	r3, #8
 80056ac:	89a2      	ldrh	r2, [r4, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	81a3      	strh	r3, [r4, #12]
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <__swsetup_r+0x88>
 80056b8:	21a0      	movs	r1, #160	; 0xa0
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	0089      	lsls	r1, r1, #2
 80056c0:	0092      	lsls	r2, r2, #2
 80056c2:	400b      	ands	r3, r1
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <__swsetup_r+0x88>
 80056c8:	0021      	movs	r1, r4
 80056ca:	0028      	movs	r0, r5
 80056cc:	f000 f892 	bl	80057f4 <__smakebuf_r>
 80056d0:	220c      	movs	r2, #12
 80056d2:	5ea3      	ldrsh	r3, [r4, r2]
 80056d4:	2001      	movs	r0, #1
 80056d6:	001a      	movs	r2, r3
 80056d8:	b299      	uxth	r1, r3
 80056da:	4002      	ands	r2, r0
 80056dc:	4203      	tst	r3, r0
 80056de:	d00f      	beq.n	8005700 <__swsetup_r+0xb8>
 80056e0:	2200      	movs	r2, #0
 80056e2:	60a2      	str	r2, [r4, #8]
 80056e4:	6962      	ldr	r2, [r4, #20]
 80056e6:	4252      	negs	r2, r2
 80056e8:	61a2      	str	r2, [r4, #24]
 80056ea:	2000      	movs	r0, #0
 80056ec:	6922      	ldr	r2, [r4, #16]
 80056ee:	4282      	cmp	r2, r0
 80056f0:	d1c4      	bne.n	800567c <__swsetup_r+0x34>
 80056f2:	0609      	lsls	r1, r1, #24
 80056f4:	d5c2      	bpl.n	800567c <__swsetup_r+0x34>
 80056f6:	2240      	movs	r2, #64	; 0x40
 80056f8:	4313      	orrs	r3, r2
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	3801      	subs	r0, #1
 80056fe:	e7bd      	b.n	800567c <__swsetup_r+0x34>
 8005700:	0788      	lsls	r0, r1, #30
 8005702:	d400      	bmi.n	8005706 <__swsetup_r+0xbe>
 8005704:	6962      	ldr	r2, [r4, #20]
 8005706:	60a2      	str	r2, [r4, #8]
 8005708:	e7ef      	b.n	80056ea <__swsetup_r+0xa2>
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	2000006c 	.word	0x2000006c

08005710 <_raise_r>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	0004      	movs	r4, r0
 8005714:	000d      	movs	r5, r1
 8005716:	291f      	cmp	r1, #31
 8005718:	d904      	bls.n	8005724 <_raise_r+0x14>
 800571a:	2316      	movs	r3, #22
 800571c:	6003      	str	r3, [r0, #0]
 800571e:	2001      	movs	r0, #1
 8005720:	4240      	negs	r0, r0
 8005722:	bd70      	pop	{r4, r5, r6, pc}
 8005724:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005726:	2b00      	cmp	r3, #0
 8005728:	d004      	beq.n	8005734 <_raise_r+0x24>
 800572a:	008a      	lsls	r2, r1, #2
 800572c:	189b      	adds	r3, r3, r2
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	2a00      	cmp	r2, #0
 8005732:	d108      	bne.n	8005746 <_raise_r+0x36>
 8005734:	0020      	movs	r0, r4
 8005736:	f000 f831 	bl	800579c <_getpid_r>
 800573a:	002a      	movs	r2, r5
 800573c:	0001      	movs	r1, r0
 800573e:	0020      	movs	r0, r4
 8005740:	f000 f81a 	bl	8005778 <_kill_r>
 8005744:	e7ed      	b.n	8005722 <_raise_r+0x12>
 8005746:	2000      	movs	r0, #0
 8005748:	2a01      	cmp	r2, #1
 800574a:	d0ea      	beq.n	8005722 <_raise_r+0x12>
 800574c:	1c51      	adds	r1, r2, #1
 800574e:	d103      	bne.n	8005758 <_raise_r+0x48>
 8005750:	2316      	movs	r3, #22
 8005752:	3001      	adds	r0, #1
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	e7e4      	b.n	8005722 <_raise_r+0x12>
 8005758:	2400      	movs	r4, #0
 800575a:	0028      	movs	r0, r5
 800575c:	601c      	str	r4, [r3, #0]
 800575e:	4790      	blx	r2
 8005760:	0020      	movs	r0, r4
 8005762:	e7de      	b.n	8005722 <_raise_r+0x12>

08005764 <raise>:
 8005764:	b510      	push	{r4, lr}
 8005766:	4b03      	ldr	r3, [pc, #12]	; (8005774 <raise+0x10>)
 8005768:	0001      	movs	r1, r0
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	f7ff ffd0 	bl	8005710 <_raise_r>
 8005770:	bd10      	pop	{r4, pc}
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	2000006c 	.word	0x2000006c

08005778 <_kill_r>:
 8005778:	2300      	movs	r3, #0
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	4d06      	ldr	r5, [pc, #24]	; (8005798 <_kill_r+0x20>)
 800577e:	0004      	movs	r4, r0
 8005780:	0008      	movs	r0, r1
 8005782:	0011      	movs	r1, r2
 8005784:	602b      	str	r3, [r5, #0]
 8005786:	f7fc f8bc 	bl	8001902 <_kill>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d103      	bne.n	8005796 <_kill_r+0x1e>
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d000      	beq.n	8005796 <_kill_r+0x1e>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd70      	pop	{r4, r5, r6, pc}
 8005798:	20000718 	.word	0x20000718

0800579c <_getpid_r>:
 800579c:	b510      	push	{r4, lr}
 800579e:	f7fc f8aa 	bl	80018f6 <_getpid>
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <__swhatbuf_r>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	000e      	movs	r6, r1
 80057a8:	001d      	movs	r5, r3
 80057aa:	230e      	movs	r3, #14
 80057ac:	5ec9      	ldrsh	r1, [r1, r3]
 80057ae:	0014      	movs	r4, r2
 80057b0:	b096      	sub	sp, #88	; 0x58
 80057b2:	2900      	cmp	r1, #0
 80057b4:	da0c      	bge.n	80057d0 <__swhatbuf_r+0x2c>
 80057b6:	89b2      	ldrh	r2, [r6, #12]
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	0011      	movs	r1, r2
 80057bc:	4019      	ands	r1, r3
 80057be:	421a      	tst	r2, r3
 80057c0:	d013      	beq.n	80057ea <__swhatbuf_r+0x46>
 80057c2:	2100      	movs	r1, #0
 80057c4:	3b40      	subs	r3, #64	; 0x40
 80057c6:	2000      	movs	r0, #0
 80057c8:	6029      	str	r1, [r5, #0]
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	b016      	add	sp, #88	; 0x58
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	466a      	mov	r2, sp
 80057d2:	f000 f84d 	bl	8005870 <_fstat_r>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	dbed      	blt.n	80057b6 <__swhatbuf_r+0x12>
 80057da:	23f0      	movs	r3, #240	; 0xf0
 80057dc:	9901      	ldr	r1, [sp, #4]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	4019      	ands	r1, r3
 80057e2:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <__swhatbuf_r+0x4c>)
 80057e4:	18c9      	adds	r1, r1, r3
 80057e6:	424b      	negs	r3, r1
 80057e8:	4159      	adcs	r1, r3
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	e7ea      	b.n	80057c6 <__swhatbuf_r+0x22>
 80057f0:	ffffe000 	.word	0xffffe000

080057f4 <__smakebuf_r>:
 80057f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057f6:	2602      	movs	r6, #2
 80057f8:	898b      	ldrh	r3, [r1, #12]
 80057fa:	0005      	movs	r5, r0
 80057fc:	000c      	movs	r4, r1
 80057fe:	4233      	tst	r3, r6
 8005800:	d006      	beq.n	8005810 <__smakebuf_r+0x1c>
 8005802:	0023      	movs	r3, r4
 8005804:	3347      	adds	r3, #71	; 0x47
 8005806:	6023      	str	r3, [r4, #0]
 8005808:	6123      	str	r3, [r4, #16]
 800580a:	2301      	movs	r3, #1
 800580c:	6163      	str	r3, [r4, #20]
 800580e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005810:	466a      	mov	r2, sp
 8005812:	ab01      	add	r3, sp, #4
 8005814:	f7ff ffc6 	bl	80057a4 <__swhatbuf_r>
 8005818:	9900      	ldr	r1, [sp, #0]
 800581a:	0007      	movs	r7, r0
 800581c:	0028      	movs	r0, r5
 800581e:	f7ff fa91 	bl	8004d44 <_malloc_r>
 8005822:	2800      	cmp	r0, #0
 8005824:	d108      	bne.n	8005838 <__smakebuf_r+0x44>
 8005826:	220c      	movs	r2, #12
 8005828:	5ea3      	ldrsh	r3, [r4, r2]
 800582a:	059a      	lsls	r2, r3, #22
 800582c:	d4ef      	bmi.n	800580e <__smakebuf_r+0x1a>
 800582e:	2203      	movs	r2, #3
 8005830:	4393      	bics	r3, r2
 8005832:	431e      	orrs	r6, r3
 8005834:	81a6      	strh	r6, [r4, #12]
 8005836:	e7e4      	b.n	8005802 <__smakebuf_r+0xe>
 8005838:	2380      	movs	r3, #128	; 0x80
 800583a:	89a2      	ldrh	r2, [r4, #12]
 800583c:	6020      	str	r0, [r4, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	9b00      	ldr	r3, [sp, #0]
 8005844:	6120      	str	r0, [r4, #16]
 8005846:	6163      	str	r3, [r4, #20]
 8005848:	9b01      	ldr	r3, [sp, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00c      	beq.n	8005868 <__smakebuf_r+0x74>
 800584e:	0028      	movs	r0, r5
 8005850:	230e      	movs	r3, #14
 8005852:	5ee1      	ldrsh	r1, [r4, r3]
 8005854:	f000 f81e 	bl	8005894 <_isatty_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	d005      	beq.n	8005868 <__smakebuf_r+0x74>
 800585c:	2303      	movs	r3, #3
 800585e:	89a2      	ldrh	r2, [r4, #12]
 8005860:	439a      	bics	r2, r3
 8005862:	3b02      	subs	r3, #2
 8005864:	4313      	orrs	r3, r2
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	433b      	orrs	r3, r7
 800586c:	81a3      	strh	r3, [r4, #12]
 800586e:	e7ce      	b.n	800580e <__smakebuf_r+0x1a>

08005870 <_fstat_r>:
 8005870:	2300      	movs	r3, #0
 8005872:	b570      	push	{r4, r5, r6, lr}
 8005874:	4d06      	ldr	r5, [pc, #24]	; (8005890 <_fstat_r+0x20>)
 8005876:	0004      	movs	r4, r0
 8005878:	0008      	movs	r0, r1
 800587a:	0011      	movs	r1, r2
 800587c:	602b      	str	r3, [r5, #0]
 800587e:	f7fc f89f 	bl	80019c0 <_fstat>
 8005882:	1c43      	adds	r3, r0, #1
 8005884:	d103      	bne.n	800588e <_fstat_r+0x1e>
 8005886:	682b      	ldr	r3, [r5, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d000      	beq.n	800588e <_fstat_r+0x1e>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	20000718 	.word	0x20000718

08005894 <_isatty_r>:
 8005894:	2300      	movs	r3, #0
 8005896:	b570      	push	{r4, r5, r6, lr}
 8005898:	4d06      	ldr	r5, [pc, #24]	; (80058b4 <_isatty_r+0x20>)
 800589a:	0004      	movs	r4, r0
 800589c:	0008      	movs	r0, r1
 800589e:	602b      	str	r3, [r5, #0]
 80058a0:	f7fc f89c 	bl	80019dc <_isatty>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d103      	bne.n	80058b0 <_isatty_r+0x1c>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d000      	beq.n	80058b0 <_isatty_r+0x1c>
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	20000718 	.word	0x20000718

080058b8 <_init>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr

080058c4 <_fini>:
 80058c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ca:	bc08      	pop	{r3}
 80058cc:	469e      	mov	lr, r3
 80058ce:	4770      	bx	lr
